{
    "docs": [
        {
            "location": "/", 
            "text": "", 
            "title": "Index"
        }, 
        {
            "location": "/quickstart/", 
            "text": "QuickStart\n\n\nNodeJS v 4.2.0\n and higher required to start.\nInstall \nCodeceptJS\n with NPM:\n\n\nYou can install it globally:\n\n\n[sudo] npm install -g codeceptjs\n\n\n\n\nor locally\n\n\nnpm install --save-dev codeceptjs\n\n\n\n\nSetup\n\n\nInitialize CodeceptJS running:\n\n\ncodeceptjs init\n\n\n\n\nIt will create \ncodecept.json\n config in current directory (or provide path in the first argument).\n\n\nYou will be asked for tests location (they will be searched in current dir by default).\n\n\nOn next step you are asked to select \nHelpers\n. Helpers include actions which can be used in tests.\nWe recommend to start with \nWebDriverIO\n helper in order to write acceptance tests using webdriverio library and Selenium Server as test runner.\nIf you want to test AngularJS application, use Protractor helper, or if you are more familiar with official Selenium Webdriver JS library, choose it.\nNo matter what helper you've chosen they will be similar in use.\n\n\n? What helpers do you want to use?\n\u276f\u25c9 WebDriverIO\n \u25ef Protractor\n \u25ef SeleniumWebdriver\n \u25ef Nightmare\n \u25ef FileSystem\n\n\n\n\nThen you will be asked for an output directory. Logs, reports, and failure screenshots will be placed there.\n\n\n? Where should logs, screenshots, and reports to be stored? ./output\n\n\n\n\nIf you are going to extend test suite by writing custom steps you should probably agree to create \nsteps_file.js\n\n\n? Would you like to extend I object with custom steps? Yes\n? Where would you like to place custom steps? ./steps_file.js\n\n\n\n\nWebDriverIO helper will ask for additional configuration as well:\n\n\n? [WebDriverIO] Base url of site to be tested http://localhost\n? [WebDriverIO] Browser in which testing will be performed firefox\n\n\n\n\nIf you agree with defaults, finish the installation.\n\n\nDepending on a helper you've chosen you will be asked to install corresponding package manually in the end of init.\nIn case of webdriver you will need to run\n\n\n[sudo] npm install -g webdriverio\n\n\n\n\nfor global installation. In case CodeceptJS is installed locally, webdriverio can be installed locally as well.\nIn a similar way you may install \nprotractor\n or \nselenium-webdriver\n.\n\n\nCreating First Test\n\n\nTests can be easily created by running\n\n\ncodeceptjs gt\n\n\n\n\n(or \ngenerate test\n)\n\n\nProvide a test name and open generated file in your favorite JavaScript editor (with ES6 support).\n\n\nFeature('My First Test');\n\nScenario('test something', (I) =\n {\n\n});\n\n\n\n\nInside the scenario block you can write your first test scenario by using \nactions from WebDriverIO helper\n. Let's assume we have a web server on \nlocalhost\n is running and there is a \nWelcome\n text on the first page. The simplest test will look like this:\n\n\nFeature('My First Test');\n\nScenario('test something', (I) =\n {\n  I.amOnPage('/');\n  I.see('Welcome');\n});\n\n\n\n\nBefore running this test we should ensure that \nSelenium Web Server is running\n. Then we can execute tests with\n\n\ncodeceptjs run --steps\n\n\n\n\nsteps option will display test execution process in console\n\n\nIf everything is done right, you will see in console:\n\n\nMy First Test --\n  test something\n   \u2022 I am on page \n/\n\n   \u2022 I see \nWelcome\n\n \u2713 OK\n\n\n\n\nConfiguring IntelliSense (optional)\n\n\nIf you are using Visual Studio Code or other IDE that supports Typescript Definitions,\nyou can generate step definitions with\n\n\ncodeceptjs def\n\n\n\n\nNow you should include \n/// \nreference path=\"./steps.d.ts\" /\n into your test files to get\nmethod autocompletion while writing tests.\n\n\nCongrats! Your first test is running.\n\n\nWasn't so hard, right?", 
            "title": "Quickstart"
        }, 
        {
            "location": "/quickstart/#quickstart", 
            "text": "NodeJS v 4.2.0  and higher required to start.\nInstall  CodeceptJS  with NPM:  You can install it globally:  [sudo] npm install -g codeceptjs  or locally  npm install --save-dev codeceptjs", 
            "title": "QuickStart"
        }, 
        {
            "location": "/quickstart/#setup", 
            "text": "Initialize CodeceptJS running:  codeceptjs init  It will create  codecept.json  config in current directory (or provide path in the first argument).  You will be asked for tests location (they will be searched in current dir by default).  On next step you are asked to select  Helpers . Helpers include actions which can be used in tests.\nWe recommend to start with  WebDriverIO  helper in order to write acceptance tests using webdriverio library and Selenium Server as test runner.\nIf you want to test AngularJS application, use Protractor helper, or if you are more familiar with official Selenium Webdriver JS library, choose it.\nNo matter what helper you've chosen they will be similar in use.  ? What helpers do you want to use?\n\u276f\u25c9 WebDriverIO\n \u25ef Protractor\n \u25ef SeleniumWebdriver\n \u25ef Nightmare\n \u25ef FileSystem  Then you will be asked for an output directory. Logs, reports, and failure screenshots will be placed there.  ? Where should logs, screenshots, and reports to be stored? ./output  If you are going to extend test suite by writing custom steps you should probably agree to create  steps_file.js  ? Would you like to extend I object with custom steps? Yes\n? Where would you like to place custom steps? ./steps_file.js  WebDriverIO helper will ask for additional configuration as well:  ? [WebDriverIO] Base url of site to be tested http://localhost\n? [WebDriverIO] Browser in which testing will be performed firefox  If you agree with defaults, finish the installation.  Depending on a helper you've chosen you will be asked to install corresponding package manually in the end of init.\nIn case of webdriver you will need to run  [sudo] npm install -g webdriverio  for global installation. In case CodeceptJS is installed locally, webdriverio can be installed locally as well.\nIn a similar way you may install  protractor  or  selenium-webdriver .", 
            "title": "Setup"
        }, 
        {
            "location": "/quickstart/#creating-first-test", 
            "text": "Tests can be easily created by running  codeceptjs gt  (or  generate test )  Provide a test name and open generated file in your favorite JavaScript editor (with ES6 support).  Feature('My First Test');\n\nScenario('test something', (I) =  {\n\n});  Inside the scenario block you can write your first test scenario by using  actions from WebDriverIO helper . Let's assume we have a web server on  localhost  is running and there is a  Welcome  text on the first page. The simplest test will look like this:  Feature('My First Test');\n\nScenario('test something', (I) =  {\n  I.amOnPage('/');\n  I.see('Welcome');\n});  Before running this test we should ensure that  Selenium Web Server is running . Then we can execute tests with  codeceptjs run --steps  steps option will display test execution process in console  If everything is done right, you will see in console:  My First Test --\n  test something\n   \u2022 I am on page  / \n   \u2022 I see  Welcome \n \u2713 OK  Configuring IntelliSense (optional)  If you are using Visual Studio Code or other IDE that supports Typescript Definitions,\nyou can generate step definitions with  codeceptjs def  Now you should include  ///  reference path=\"./steps.d.ts\" /  into your test files to get\nmethod autocompletion while writing tests.", 
            "title": "Creating First Test"
        }, 
        {
            "location": "/quickstart/#congrats-your-first-test-is-running", 
            "text": "Wasn't so hard, right?", 
            "title": "Congrats! Your first test is running."
        }, 
        {
            "location": "/basics/", 
            "text": "Basics\n\n\nCodeceptJS is a modern end to end testing framework with a special BDD-style syntax. The test is written as a linear scenario of user's action on a site.\n\n\nFeature('CodeceptJS demo');\n\nScenario('check Welcome page on site', (I) =\n {\n  I.amOnPage('/');\n  I.see('Welcome');\n})\n\n\n\n\nTests are expected to be written in ECMAScript 6.\nEach test is described inside a \nScenario\n function with \nI\n object passed into it.\nI object is an \nactor\n, an abstraction for a testing user. I is a proxy object for currently enabled \nHelpers\n.\n\n\n  \nhelpers\n: {\n    \nWebDriverIO\n: {\n      \nurl\n: \nhttp://localhost\n,\n      \nbrowser\n: \nfirefox\n\n    }\n  }\n\n\n\n\nFor current config all methods of \nI\n will be taken from \nWebDriverIO\n helper.\nThis is done to allow easy switching of running backends so you could replace WebDriverIO with Protractor or Nightmare helpers.\n\n\nHow It Works\n\n\nTests are written in synchronous way. Test scenarios should be linear, so tests by themseleves should not include promises or callbacks as well.\nHowever, behind the scene \nall actions are wrapped in promises\n inside the \nI\n object.\n\nGlobal promise\n chain is initialized before each test and all \nI.*\n calls will be appended to it as well as setup and teardown.\n\n\nIf you want to get information from a running test you can use \nyield\n inside a \ngenerator function\n and special methods of helpers started with \ngrab\n prefix.\n\n\nScenario('try grabbers', function* (I) {\n  var title = yield I.grabTitle();\n});\n\n\n\n\nthen you can use those variables in assertions:\n\n\nvar title = yield I.grabTitle();\nvar assert = require('assert');\nassert.equal(title, 'CodeceptJS');\n\n\n\n\nPause\n\n\nTest execution can be paused in any place of a test with \npause()\n call.\nThis also launches interactive console where you can call actions of \nI\n object.\n\n\n\n\nYou can also use \npause()\n to check the web application in a browser. Press \nENTER\n to resume test execution.\n\n\nInteractive shell can be started outside test context by running\n\n\ncodeceptjs shell\n\n\n\n\nBefore\n\n\nCommon preparation steps like opening a web page, logging in a user, can be placed in \nBefore\n or \nBackground\n hook:\n\n\nFeature('CodeceptJS Demonstration');\n\nBefore((I) =\n { // or Background\n  I.amOnPage('/documentation');\n});\n\nScenario('test some forms', (I) =\n {\n  I.click('Create User');\n  I.see('User is valid');\n  I.dontSeeInCurrentUrl('/documentation');\n});\n\nScenario('test title', (I) =\n {\n  I.seeInTitle('Example application');\n});\n\n\n\n\nSame as \nBefore\n you can use \nAfter\n to run teardown for each scenario.\n\n\nBeforeSuite\n\n\nIf you need to run complex setup before all tests and teardown this afterwards you can use \nBeforeSuite\n and \nAfterSuite\n\nfunctions. Unlike Before and After hooks, \nBeforeSuite\n and \nAfterSuite\n dont have access to \nI\n object.\nYou can use them to execute some JavaScript code, which is expected to return a promise.\n\n\n HEAD\n[Here are some ideas] where to use BeforeSuite(https://github.com/Codeception/CodeceptJS/pull/231#issuecomment-249554933).\n=======\n\nHere are some ideas\n where to use BeforeSuite hooks.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmaster\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWithin\n\n\nTo specify the exact area on a page where actions can be performed you can use \nwithin\n function.\nEverything executed in its context will be narrowed to context specified by locator:\n\n\nI.amOnPage('https://github.com');\nwithin('.form-signup-home', function () {\n  I.fillField('user[login]', 'User');\n  I.fillField('user[email]', 'user@user.com');\n  I.fillField('user[password]', 'user@user.com');\n  I.click('button');\n});\nI.see('There were problems creating your account.');\n\n\n\n\nWhen running steps inside a within block will be shown with a shift:\n\n\n\n\nSkipping\n\n\nLike in Mocha you can use \nx\n and \nonly\n to skip tests or making a single test to run.\n\n\n\n\nxScenario\n - skips current test\n\n\nScenario.only\n - executes only the current test\n\n\n\n\nReporters\n\n\nCodeceptJS supports \nMocha Reporters\n.\nThey can be used with \n--reporter\n options.\nBy default a custom console reporter is enabled.\n\n\nWe are currently working on improving reporters support.\n\n\nBootstrap\n\n\nIn case you need to execute arbitrary code before the tests,\nyou can place it into your bootstrap file and provide a relative path to it in \ncodecept.json\n\n\nbootstrap\n: \n./run_server.js\n\n\n\n\n\nteardown\n\n\nIn case you need to execute arbitrary code after the tests have run,\nyou can place it into your teardown file and provide a relative path to it in \ncodecept.json\n\n\nteardown\n: \n./stop_server.js\n\n\n\n\n\n\n\ndone()", 
            "title": "Basics"
        }, 
        {
            "location": "/basics/#basics", 
            "text": "CodeceptJS is a modern end to end testing framework with a special BDD-style syntax. The test is written as a linear scenario of user's action on a site.  Feature('CodeceptJS demo');\n\nScenario('check Welcome page on site', (I) =  {\n  I.amOnPage('/');\n  I.see('Welcome');\n})  Tests are expected to be written in ECMAScript 6.\nEach test is described inside a  Scenario  function with  I  object passed into it.\nI object is an  actor , an abstraction for a testing user. I is a proxy object for currently enabled  Helpers .     helpers : {\n     WebDriverIO : {\n       url :  http://localhost ,\n       browser :  firefox \n    }\n  }  For current config all methods of  I  will be taken from  WebDriverIO  helper.\nThis is done to allow easy switching of running backends so you could replace WebDriverIO with Protractor or Nightmare helpers.", 
            "title": "Basics"
        }, 
        {
            "location": "/basics/#how-it-works", 
            "text": "Tests are written in synchronous way. Test scenarios should be linear, so tests by themseleves should not include promises or callbacks as well.\nHowever, behind the scene  all actions are wrapped in promises  inside the  I  object. Global promise  chain is initialized before each test and all  I.*  calls will be appended to it as well as setup and teardown.  If you want to get information from a running test you can use  yield  inside a  generator function  and special methods of helpers started with  grab  prefix.  Scenario('try grabbers', function* (I) {\n  var title = yield I.grabTitle();\n});  then you can use those variables in assertions:  var title = yield I.grabTitle();\nvar assert = require('assert');\nassert.equal(title, 'CodeceptJS');", 
            "title": "How It Works"
        }, 
        {
            "location": "/basics/#pause", 
            "text": "Test execution can be paused in any place of a test with  pause()  call.\nThis also launches interactive console where you can call actions of  I  object.   You can also use  pause()  to check the web application in a browser. Press  ENTER  to resume test execution.  Interactive shell can be started outside test context by running  codeceptjs shell", 
            "title": "Pause"
        }, 
        {
            "location": "/basics/#before", 
            "text": "Common preparation steps like opening a web page, logging in a user, can be placed in  Before  or  Background  hook:  Feature('CodeceptJS Demonstration');\n\nBefore((I) =  { // or Background\n  I.amOnPage('/documentation');\n});\n\nScenario('test some forms', (I) =  {\n  I.click('Create User');\n  I.see('User is valid');\n  I.dontSeeInCurrentUrl('/documentation');\n});\n\nScenario('test title', (I) =  {\n  I.seeInTitle('Example application');\n});  Same as  Before  you can use  After  to run teardown for each scenario.", 
            "title": "Before"
        }, 
        {
            "location": "/basics/#beforesuite", 
            "text": "If you need to run complex setup before all tests and teardown this afterwards you can use  BeforeSuite  and  AfterSuite \nfunctions. Unlike Before and After hooks,  BeforeSuite  and  AfterSuite  dont have access to  I  object.\nYou can use them to execute some JavaScript code, which is expected to return a promise.   HEAD\n[Here are some ideas] where to use BeforeSuite(https://github.com/Codeception/CodeceptJS/pull/231#issuecomment-249554933).\n======= Here are some ideas  where to use BeforeSuite hooks.         master", 
            "title": "BeforeSuite"
        }, 
        {
            "location": "/basics/#within", 
            "text": "To specify the exact area on a page where actions can be performed you can use  within  function.\nEverything executed in its context will be narrowed to context specified by locator:  I.amOnPage('https://github.com');\nwithin('.form-signup-home', function () {\n  I.fillField('user[login]', 'User');\n  I.fillField('user[email]', 'user@user.com');\n  I.fillField('user[password]', 'user@user.com');\n  I.click('button');\n});\nI.see('There were problems creating your account.');  When running steps inside a within block will be shown with a shift:", 
            "title": "Within"
        }, 
        {
            "location": "/basics/#skipping", 
            "text": "Like in Mocha you can use  x  and  only  to skip tests or making a single test to run.   xScenario  - skips current test  Scenario.only  - executes only the current test", 
            "title": "Skipping"
        }, 
        {
            "location": "/basics/#reporters", 
            "text": "CodeceptJS supports  Mocha Reporters .\nThey can be used with  --reporter  options.\nBy default a custom console reporter is enabled.  We are currently working on improving reporters support.", 
            "title": "Reporters"
        }, 
        {
            "location": "/basics/#bootstrap", 
            "text": "In case you need to execute arbitrary code before the tests,\nyou can place it into your bootstrap file and provide a relative path to it in  codecept.json  bootstrap :  ./run_server.js", 
            "title": "Bootstrap"
        }, 
        {
            "location": "/basics/#teardown", 
            "text": "In case you need to execute arbitrary code after the tests have run,\nyou can place it into your teardown file and provide a relative path to it in  codecept.json  teardown :  ./stop_server.js    done()", 
            "title": "teardown"
        }, 
        {
            "location": "/acceptance/", 
            "text": "Acceptance Testing\n\n\nHow does your client, manager, or tester, or any other non-technical person, know your web application is working? By opening the browser, accessing a site, clicking on links, filling in the forms, and actually seeing the content on a web page.\n\n\nAcceptance (also called End to End) tests can cover standard but complex scenarios from a user's perspective. With acceptance tests you can be confident that users, following all defined scenarios, won't get errors. We check \nnot just functionality of application but a user interface\n (UI) as well.\n\n\nBy default CodeceptJS uses \nWebDriverIO\n helper and \nSelenium\n to automate browser.\nHowever, you can also choose \nSeleniumWebdriver\n or \nProtractor\n helpers, driven by corresponding libraries.\nNo matter of helper and library you use for acceptance testing, CodeceptJS should execute same actions in similar manner.\n\n\nIn case of CodeceptJS you can be sure that in code it will be as easy as it sounds. You just describe a test scenario with JavaScript DSL and allow the framework to handle the rest.\n\n\nWithin web page you can locate elements, interact with them, and check that expected elements are present on a page. That is what a test look like.\nThat is what a test look like.\n\n\nI.amOnPage('/login');\nI.fillField('Username', 'john');\nI.fillField('Password', '123456');\nI.click('Login');\nI.see('Welcome, John');\n\n\n\n\nThis is how we can check that login form of a simple web application works. At first we opened \n/login\n page, then filled forms and in the end we saw the greetings text.\n\n\nLocating Element\n\n\nElement can be found by CSS or XPath locators. Practically every steps\nin WebDriverIO helper accept them both.\n\n\nI.seeElement('.user'); // element with CSS class user\nI.seeElement('//button(contains(., \npress me\n)]'); // button\n\n\n\n\nBy default CodeceptJS tries to guess the locator type.\nIn order to specify exact locator type you can pass a hash called \nstrict locator\n.\n\n\nI.seeElement({css: 'div.user'});\nI.seeElement({xpath: '//div[@class=user]'});\n\n\n\n\nStrict locators allow to specify additional locator types:\n\n\n// locate form element by name\nI.seeElement({name: 'password'});\n// locate element by text\nI.seeElement({text: 'press me'});\n// locate element by id\nI.seeElement({id: 'users'});\n\n\n\n\nClicking\n\n\nCodeceptJS provides a flexible syntax to specify an element to click.\n\n\nBy default CodeceptJS tries to find button or link with exact text on it\n\n\n// search for link or button\nI.click('Login');\n\n\n\n\nIf none found, CodeceptJS tries to find link or button containing that text. In case an image is clickable its \nalt\n attribute will be checked for text inclusion. Form buttons will also be searched by name.\n\n\nTo narrow down the results you can specify a context in second parameter.\n\n\nI.click('Login', '.nav'); // search only in .nav\nI.click('Login', {css: 'footer'}); // search only in footer\n\n\n\n\nTo skip the global search pass exact strict locator (or start locator with \n//\n or \n.\n or \n#\n).\nIn this case you are not limited to buttons and links. Any element found by that locator is clicked.\n\n\n// click element by CSS\nI.click('#signup');\n// click element located by name inside a form\nI.click({name: 'submit'}, '#user\nform');\n\n\n\n\nFilling Fields\n\n\nClicking the links is not what takes the most time during testing a web site. If your site consists only of links you can skip test automation. The most routine waste of time goes into the testing of forms. CodeceptJS provides several ways of doing that.\n\n\nLet's submit this sample form for a test:\n\n\nform method=\npost\n action=\n/update\n id=\nupdate_form\n\n     \nlabel for=\nuser_name\nName\n/label\n\n     \ninput type=\ntext\n name=\nuser[name]\n id=\nuser_name\n /\n\n     \nlabel for=\nuser_email\nEmail\n/label\n\n     \ninput type=\ntext\n name=\nuser[email]\n id=\nuser_email\n /\n\n     \nlabel for=\nuser_gender\nGender\n/label\n\n     \nselect id=\nuser_gender\n name=\nuser[gender]\n\n          \noption value=\nm\nMale\n/option\n\n          \noption value=\nf\nFemale\n/option\n\n     \n/select\n\n     \ninput type=\nsubmit\n name=\nsubmitButton\n value=\nUpdate\n /\n\n\n/form\n\n\n\n\n\nWe need to fill in all those fields and click \"Update\" button. CodeceptJS matches form elements by their label, name, or by CSS or XPath locators.\n\n\n// we are using label to match user_name field\nI.fillField('Name', 'Miles');\n// we can use input name\nI.fillField('user[email]','miles@davis.com');\n// select element by label, choose option by text\nI.selectOption('Gender','Male');\n// click 'Update' button, found by text\nI.click('Update');\n\n\n\n\nAlternative scenario:\n\n\n// we are using CSS\nI.fillField('#user_name', 'Miles');\nI.fillField('#user_email','miles@davis.com');\n// select element by label, option by value\nI.selectOption('#user_gender','m');\n// click 'Update' button, found by name\nI.click('submitButton', '#update_form');\n\n\n\n\nAssertions\n\n\nIn order to verify the expected behavior of a web application, web page connects should be checked.\nCodeceptJS provides built-in assertions for that. They start with \nsee\n (or \ndontSee\n) prefix, as they describe user's current vision.\n\n\nThe most general and common assertion is \nsee\n:\n\n\n// Just a visible text on a page\nI.see('Hello');\n// text inside .msg element\nI.see('Hello', '.msg');\n// opposite\nI.dontSee('Bye');\n\n\n\n\nYou should provide a text as first argument, and optionally a locator to narrow the search context.\n\n\nYou can check that specific element exists (or not) on a page, as it was described in \nLocating Element\n section.\n\n\nI.seeElement('.notice');\nI.dontSeeElement('.error');\n\n\n\n\nAdditional assertions:\n\n\nI.seeInCurrentUrl('/user/miles');\nI.seeInField('user[name]', 'Miles');\nI.seeInTitle('My Website');\n\n\n\n\nTo see all possible assertions see the helper's reference.\n\n\nGrabbing\n\n\nSometimes you need to retrieve a data from a page to use it in next steps of a scenario.\nImagine, application generates a password and you want to ensure that user can login using this password.\n\n\nI.fillField('email', 'miles@davis.com')\nI.click('Generate Password');\n$password = yield I.grabTextFrom('#password');\nI.click('Login');\nI.fillField('email', 'miles@davis.com');\nI.fillField('password', $password);\nI.click('Log in!');\n\n\n\n\ngrabTextFrom\n action is used here to retrieve text from an element. All actions starting with \ngrab\n prefix are expected to return data. In order to synchronize this step with a scenario you should pause test execution with \nyield\n keyword of ES6. To make it work your test should be written inside a generator function (notice \n*\n in its definition):\n\n\nScenario('use page title', function*(I) {\n  // ...\n  var password = yield I.grabTextFrom('#password');\n  I.fillField('password', password);\n});\n\n\n\n\nWaiting\n\n\nIn modern web applications rendering is happen on client side.\nSometimes that may cause delays. A test may fail while trying to click an element which has not appeared on a page yet.\nTo handle this cases \nwait*\n methods introduced.\n\n\nI.waitForElement('#agree_button', 30); // secs\n// clicks a button only when it is visible\nI.click('#agree_button');\n\n\n\n\nMore wait actions can be found in helper's reference.\n\n\n\n\ndone()\n\n\nCodeceptJS through helpers provides user friendly API to interact with a webpage. In this section we described using WebDriverIO helper which allows to control browser through Selenium WebDriver.", 
            "title": "Acceptance Testing"
        }, 
        {
            "location": "/acceptance/#acceptance-testing", 
            "text": "How does your client, manager, or tester, or any other non-technical person, know your web application is working? By opening the browser, accessing a site, clicking on links, filling in the forms, and actually seeing the content on a web page.  Acceptance (also called End to End) tests can cover standard but complex scenarios from a user's perspective. With acceptance tests you can be confident that users, following all defined scenarios, won't get errors. We check  not just functionality of application but a user interface  (UI) as well.  By default CodeceptJS uses  WebDriverIO  helper and  Selenium  to automate browser.\nHowever, you can also choose  SeleniumWebdriver  or  Protractor  helpers, driven by corresponding libraries.\nNo matter of helper and library you use for acceptance testing, CodeceptJS should execute same actions in similar manner.  In case of CodeceptJS you can be sure that in code it will be as easy as it sounds. You just describe a test scenario with JavaScript DSL and allow the framework to handle the rest.  Within web page you can locate elements, interact with them, and check that expected elements are present on a page. That is what a test look like.\nThat is what a test look like.  I.amOnPage('/login');\nI.fillField('Username', 'john');\nI.fillField('Password', '123456');\nI.click('Login');\nI.see('Welcome, John');  This is how we can check that login form of a simple web application works. At first we opened  /login  page, then filled forms and in the end we saw the greetings text.", 
            "title": "Acceptance Testing"
        }, 
        {
            "location": "/acceptance/#locating-element", 
            "text": "Element can be found by CSS or XPath locators. Practically every steps\nin WebDriverIO helper accept them both.  I.seeElement('.user'); // element with CSS class user\nI.seeElement('//button(contains(.,  press me )]'); // button  By default CodeceptJS tries to guess the locator type.\nIn order to specify exact locator type you can pass a hash called  strict locator .  I.seeElement({css: 'div.user'});\nI.seeElement({xpath: '//div[@class=user]'});  Strict locators allow to specify additional locator types:  // locate form element by name\nI.seeElement({name: 'password'});\n// locate element by text\nI.seeElement({text: 'press me'});\n// locate element by id\nI.seeElement({id: 'users'});", 
            "title": "Locating Element"
        }, 
        {
            "location": "/acceptance/#clicking", 
            "text": "CodeceptJS provides a flexible syntax to specify an element to click.  By default CodeceptJS tries to find button or link with exact text on it  // search for link or button\nI.click('Login');  If none found, CodeceptJS tries to find link or button containing that text. In case an image is clickable its  alt  attribute will be checked for text inclusion. Form buttons will also be searched by name.  To narrow down the results you can specify a context in second parameter.  I.click('Login', '.nav'); // search only in .nav\nI.click('Login', {css: 'footer'}); // search only in footer  To skip the global search pass exact strict locator (or start locator with  //  or  .  or  # ).\nIn this case you are not limited to buttons and links. Any element found by that locator is clicked.  // click element by CSS\nI.click('#signup');\n// click element located by name inside a form\nI.click({name: 'submit'}, '#user form');", 
            "title": "Clicking"
        }, 
        {
            "location": "/acceptance/#filling-fields", 
            "text": "Clicking the links is not what takes the most time during testing a web site. If your site consists only of links you can skip test automation. The most routine waste of time goes into the testing of forms. CodeceptJS provides several ways of doing that.  Let's submit this sample form for a test:  form method= post  action= /update  id= update_form \n      label for= user_name Name /label \n      input type= text  name= user[name]  id= user_name  / \n      label for= user_email Email /label \n      input type= text  name= user[email]  id= user_email  / \n      label for= user_gender Gender /label \n      select id= user_gender  name= user[gender] \n           option value= m Male /option \n           option value= f Female /option \n      /select \n      input type= submit  name= submitButton  value= Update  /  /form   We need to fill in all those fields and click \"Update\" button. CodeceptJS matches form elements by their label, name, or by CSS or XPath locators.  // we are using label to match user_name field\nI.fillField('Name', 'Miles');\n// we can use input name\nI.fillField('user[email]','miles@davis.com');\n// select element by label, choose option by text\nI.selectOption('Gender','Male');\n// click 'Update' button, found by text\nI.click('Update');  Alternative scenario:  // we are using CSS\nI.fillField('#user_name', 'Miles');\nI.fillField('#user_email','miles@davis.com');\n// select element by label, option by value\nI.selectOption('#user_gender','m');\n// click 'Update' button, found by name\nI.click('submitButton', '#update_form');", 
            "title": "Filling Fields"
        }, 
        {
            "location": "/acceptance/#assertions", 
            "text": "In order to verify the expected behavior of a web application, web page connects should be checked.\nCodeceptJS provides built-in assertions for that. They start with  see  (or  dontSee ) prefix, as they describe user's current vision.  The most general and common assertion is  see :  // Just a visible text on a page\nI.see('Hello');\n// text inside .msg element\nI.see('Hello', '.msg');\n// opposite\nI.dontSee('Bye');  You should provide a text as first argument, and optionally a locator to narrow the search context.  You can check that specific element exists (or not) on a page, as it was described in  Locating Element  section.  I.seeElement('.notice');\nI.dontSeeElement('.error');  Additional assertions:  I.seeInCurrentUrl('/user/miles');\nI.seeInField('user[name]', 'Miles');\nI.seeInTitle('My Website');  To see all possible assertions see the helper's reference.", 
            "title": "Assertions"
        }, 
        {
            "location": "/acceptance/#grabbing", 
            "text": "Sometimes you need to retrieve a data from a page to use it in next steps of a scenario.\nImagine, application generates a password and you want to ensure that user can login using this password.  I.fillField('email', 'miles@davis.com')\nI.click('Generate Password');\n$password = yield I.grabTextFrom('#password');\nI.click('Login');\nI.fillField('email', 'miles@davis.com');\nI.fillField('password', $password);\nI.click('Log in!');  grabTextFrom  action is used here to retrieve text from an element. All actions starting with  grab  prefix are expected to return data. In order to synchronize this step with a scenario you should pause test execution with  yield  keyword of ES6. To make it work your test should be written inside a generator function (notice  *  in its definition):  Scenario('use page title', function*(I) {\n  // ...\n  var password = yield I.grabTextFrom('#password');\n  I.fillField('password', password);\n});", 
            "title": "Grabbing"
        }, 
        {
            "location": "/acceptance/#waiting", 
            "text": "In modern web applications rendering is happen on client side.\nSometimes that may cause delays. A test may fail while trying to click an element which has not appeared on a page yet.\nTo handle this cases  wait*  methods introduced.  I.waitForElement('#agree_button', 30); // secs\n// clicks a button only when it is visible\nI.click('#agree_button');  More wait actions can be found in helper's reference.   done()  CodeceptJS through helpers provides user friendly API to interact with a webpage. In this section we described using WebDriverIO helper which allows to control browser through Selenium WebDriver.", 
            "title": "Waiting"
        }, 
        {
            "location": "/angular/", 
            "text": "AngularJS E2E Testing with CodeceptJS\n\n\nIntroduction\n\n\nCodeceptJS is an acceptance testing framework. In diversified world of JavaScript testing libraries it aims to create a unified high level API for end-to-end testing, powered by differnet backends.\nCodeceptJS allows you to write a test and switch in config execution drivers: will it be \nwedriverio\n, \nselenium-webdriver\n, or \nprotractor\n depends on you.\nThis way you aren't be bound to implementation, and your acceptance tests will work no matter of framework running them.\n\n\nAs you know, \nProtractor\n is an official tool for testing AngularJS applications.\nCodeceptJS should not be considerend as alternative to Protractor but a testing framework utilizing this powerful library.\n\n\n\n\nSo there is no magic in testing of AngularJS application in CodeceptJS.\nYou just execute regular Protractor commands, packed in a simple high-level API.\n\n\n\n\nAs an example we will use popular \nTodoMVC application\n.\nHow would we test creating a new todo item in CodeceptJS?\n\n\nScenario('create todo item', (I) =\n {\n  I.amOnPage('/');\n  I.dontSeeElement('#todo-count');\n  I.fillField({model: 'newTodo'}, 'Write a guide');\n  I.pressKey('Enter');\n  I.see('Write a guide', {repeater: \ntodo in todos\n});\n  I.see('1 item left', '#todo-count');\n});\n\n\n\n\nThe similar test written in native syntax of Protractor (inherited from selenium-webdriver) would look like this:\n\n\nit('should create todo item', (I) =\n {\n  browser.get(\nhttp://todomvc.com/examples/angularjs/#/\n);\n  expect(element(by.css(\n#todo-count\n)).isPresent()).toBeFalsy();\n  var inputField = element(by.model(\nnewTodo\n));\n  inputField.sendKeys(\nWrite a guide\n);\n  inputField.sendKeys(protractor.Key.ENTER);\n  var todos = element.all(by.repeater(\ntodo in todos\n));\n  expect(todos.last().getText()).toEqual(\nWrite a guide\n));\n  element(by.css(\n#todo-count\n)).getText()).toContain('1 items left');\n});\n\n\n\n\nComparing to the API proposed by CodeceptJS, this code looks a bit more complicated.\nBut what the more important, it's really really hard to read and follow its logic.\nReadability is the most crucial part in acceptance testing.\nYou should easily change tests when changes specification or design.\nProbably, only a person who writes Protractor tests in your company,\ncould do those changes, while CodeceptJS allows anyone to work with tests.\nContrary, CodeceptJS provides CodeceptJS provides scenario-driven approach, so test is just a step-by-step representation of real user actions.\nThis way you can easily read, and follow test scenario, and edit it when you need it to be changed.\n\n\nIn this way CodeceptJS is more similar to Cucumber, so if you run a test with \n--steps\n option you will see this output:\n\n\nTodoMvc --\n create todo item\n \u2022 I am on page \n/\n\n \u2022 I dont see element \n#todo-count\n\n \u2022 I fill field {\nmodel\n:\nnewTodo\n}, \nWrite a guide\n\n \u2022 I press key \nEnter\n\n \u2022 I see \nWrite a guide\n, {\nrepeater\n:\ntodo in todos\n}\n \u2022 I see \n1 item left\n, \n#todo-count\n\n \u2713 OK in 968ms\n\n\n\n\nUnlike Cucumber, CodeceptJS is not about writing test scenarios above for business rules.\nTo say it again, its \ngoal is to provide standard action steps you can use for testing applications\n.\nSurely, it can't cover 100% of cases but it aims for 90%, for others you can write your own steps inside a \ncustom Helper\n using API of Protractor\n\n\nSetting up CodeceptJS with Protractor\n\n\nTo start using CodeceptJS you will need to install it via NPM and initialize it in directory with tests.\n\n\nnpm install -g codeceptjs\ncodeceptjs init\n\n\n\n\nYou will be asked questions about initial configuration, make sure you select Protractor helper.\nIf you didn't have Protracotr library it \nwill be installed\n.\nPlease agree to extend steps, and use \nhttp://todomvc.com/examples/angularjs/\n as a url for Protractor helper.\n\n\nFor TodoMVC application you will have following config created in \ncodecept.json\n file:\n\n\n{\n  \ntests\n: \n./*_test.js\n,\n  \ntimeout\n: 10000,\n  \noutput\n: \n./output\n,\n  \nhelpers\n: {\n    \nProtractor\n: {\n      \nurl\n: \nhttp://todomvc.com/examples/angularjs/\n,\n      \ndriver\n: \nhosted\n,\n      \nbrowser\n: \nfirefox\n,\n      \nrootElement\n: \nbody\n\n    }\n  },\n  \ninclude\n: {\n    \nI\n: \n./steps_file.js\n\n  },\n  \nbootstrap\n: false,\n  \nmocha\n: {},\n  \nname\n: \ntodoangular\n\n}\n\n\n\n\nFirst test can be generated with \ngt\n command:\n\n\ncodeceptjs gt\n\n\n\n\nAfter that you can start writing your first CodeceptJS/Angular tests.\nPlease look into the reference of [Protractor helper])(http://codecept.io/helpers/Protractor/) for all available actions.\nYou can also run \nlist\n command to see methods of I:\n\n\ncodeceptjs list\n\n\n\n\nWriting First Test\n\n\nTest scenario should always use \nI\n object to execute commands.\nThis is important as all methods of \nI\n are running in global promise chain, this way CodeceptJS makes sure everything is executed in right order.\nAt first a page should be opened to proceed, we use \namOnPage\n command for that. As we already specified full URL to TodoMVC app,\nwe can pass relative path into it instead of absolute url:\n\n\nFeature('Todo MVC');\n\nScenario('create todo item', (I) =\n {\n  I.amOnPage('/');\n});\n\n\n\n\nAll scenarios should describe actions on site and assertions taken in the end. In CodeceptJS assertion commands have \nsee\n or \ndontSee\n prefix:\n\n\nFeature('Todo MVC');\n\nScenario('create todo item', (I) =\n {\n  I.amOnPage('/');\n  I.dontSeeElement('#todo-count');\n});\n\n\n\n\nA test can be executed with \nrun\n command, we recommend to use \n--steps\n options to follow step-by-step execution:\n\n\n$ codeceptjs run --steps\n\nCodeceptJS v0.3.2\nTest root is assumed to be /home/davert/demos/todoangular\nUsing the selenium server at http://localhost:4444/wd/hub\n\nTodoMvc --\n create todo item\n \u2022 I am on page \n/\n\n \u2022 I dont see element \n#todo-count\n\n\n\n\n\nRunning Several Scenarios\n\n\nBy writing a test in similar manner we will have a test shown in the beginning of this guide. Probably we would like not to finish with one test,\nbut have more, for testing editing of todo items, checking todo items, and more.\n\n\nLet's prepare our test for multiple scenarios. All test scenarios will need to open main page of application, so \namOnPage\n can be moved into the \nBefore\n hook:\nScenarios will probably deal with created todo items, so we can move logic of crating new todo into a function.\n\n\nFeature('TodoMvc');\n\nBefore((I) =\n {\n  I.amOnPage('/');\n});\n\nvar createTodo = function (I, name) {\n  I.fillField({model: 'newTodo'}, name);\n  I.pressKey('Enter');\n}\n\nScenario('create todo item', (I) =\n {\n  I.dontSeeElement('#todo-count');\n  createTodo(I, 'Write a guide');\n  I.see('Write a guide', {repeater: \ntodo in todos\n});\n  I.see('1 item left', '#todo-count');\n});\n\n\n\n\nand so we can add even more tests!\n\n\nScenario('edit todo', (I) =\n {\n  createTodo(I, 'write a review');\n  I.see('write a review', {repeater: \ntodo in todos\n});\n  I.doubleClick('write a review');\n  I.pressKey(['Control', 'a']);\n  I.pressKey('write old review');\n  I.pressKey('Enter');\n  I.see('write old review', {repeater: \ntodo in todos\n});\n});\n\nScenario('check todo item', (I) =\n {\n  createTodo(I, 'my new item');\n  I.see('1 item left', '#todo-count');\n  I.checkOption({model: 'todo.completed'});\n  I.see('0 items left', '#todo-count');\n});\n\n\n\n\nLocators\n\n\nLike you may have noticed, CodeceptJS doesn't use \nby.*\n locators similar to Protractor or Selenium Webdriver.\nInstead most of methods expect you to pass valid CSS or XPath. In case you don't want CodeceptJS to guess the type of locator,\nyou can specify them using so-called strict locators. This is an absolute analogy of \nby\n, so you can use angular specific locators (like models, repeaters, bindings, etc) in it:\n\n\n{css: 'button'}\n{repeater: \ntodo in todos\n}\n{binding: 'latest'}\n\n\n\n\nWhen we deal with clicks, CodeceptJS can take a text and search a web page for a valid clickable element with that text.\nSo links and buttons can be searched by their text.\n\n\nSame thing happens for form fields: they are searched by field names, labels, and so on.\n\n\nUsing such smart locators makes tests easy to write, however, searching an element by text is slower than using CSS|XPath and much slower than using strict locators.\n\n\nRefactoring\n\n\nIn previous examples, we've moved actions into \ncreateTodo\n function. Is there a more elegant way of refactoring?\nCan we have something like \nI.createTodo()\n to be used in code? Sure, we can do so by editing \nsteps_file.js\n created by init command.\n\n\n'use strict';\n// in this file you can append custom step methods to 'I' object\n\nmodule.exports = function() {\n  return actor({\n    createTodo: function(title) {\n      this.fillField({model: 'newTodo'}, title);\n      this.pressKey('Enter');\n    }\n  });\n}\n\n\n\n\nAnd that's all, method is available to use as \nI.createTodo(title)\n:\n\n\nScenario('create todo item', (I) =\n {\n  I.dontSeeElement('#todo-count');\n  I.createTodo('Write a guide');\n  I.see('Write a guide', {repeater: \ntodo in todos\n});\n  I.see('1 item left', '#todo-count');\n});\n\n\n\n\nTo learn more about refactoring options in CodeceptJS read \nPageObjects guide\n.\n\n\nExtending\n\n\nWhat if CodeceptJS doesn't provide some of Protractor functionality you actually need? Sure its API is to general,\nand this case is possible. If you don't know how to do something with CodeceptJS - revert back to Protractor syntax!\n\n\nCreate custom helper, define methods for it, and use it inside the I object. Your Helper can access \nbrowser\n from Protractor\nby accessing Protractor helper:\n\n\nlet browser = this.helpers['Protractor'].browser;\n\n\n\n\nor use global \nelement\n and \nby\n variables to locate elements:\n\n\nelement.all(by.repeater('result in memory'));\n\n\n\n\nThis way we recommend to implement all custom logic using low-level Protractor syntax and using it inside scenario tests.\nPlease see an \nexample of such helper\n.\n\n\ndone()\n\n\nAlmost ) This example is \navailable on GitHub\n.", 
            "title": "AngularJS Testing"
        }, 
        {
            "location": "/angular/#angularjs-e2e-testing-with-codeceptjs", 
            "text": "Introduction  CodeceptJS is an acceptance testing framework. In diversified world of JavaScript testing libraries it aims to create a unified high level API for end-to-end testing, powered by differnet backends.\nCodeceptJS allows you to write a test and switch in config execution drivers: will it be  wedriverio ,  selenium-webdriver , or  protractor  depends on you.\nThis way you aren't be bound to implementation, and your acceptance tests will work no matter of framework running them.  As you know,  Protractor  is an official tool for testing AngularJS applications.\nCodeceptJS should not be considerend as alternative to Protractor but a testing framework utilizing this powerful library.   So there is no magic in testing of AngularJS application in CodeceptJS.\nYou just execute regular Protractor commands, packed in a simple high-level API.   As an example we will use popular  TodoMVC application .\nHow would we test creating a new todo item in CodeceptJS?  Scenario('create todo item', (I) =  {\n  I.amOnPage('/');\n  I.dontSeeElement('#todo-count');\n  I.fillField({model: 'newTodo'}, 'Write a guide');\n  I.pressKey('Enter');\n  I.see('Write a guide', {repeater:  todo in todos });\n  I.see('1 item left', '#todo-count');\n});  The similar test written in native syntax of Protractor (inherited from selenium-webdriver) would look like this:  it('should create todo item', (I) =  {\n  browser.get( http://todomvc.com/examples/angularjs/#/ );\n  expect(element(by.css( #todo-count )).isPresent()).toBeFalsy();\n  var inputField = element(by.model( newTodo ));\n  inputField.sendKeys( Write a guide );\n  inputField.sendKeys(protractor.Key.ENTER);\n  var todos = element.all(by.repeater( todo in todos ));\n  expect(todos.last().getText()).toEqual( Write a guide ));\n  element(by.css( #todo-count )).getText()).toContain('1 items left');\n});  Comparing to the API proposed by CodeceptJS, this code looks a bit more complicated.\nBut what the more important, it's really really hard to read and follow its logic.\nReadability is the most crucial part in acceptance testing.\nYou should easily change tests when changes specification or design.\nProbably, only a person who writes Protractor tests in your company,\ncould do those changes, while CodeceptJS allows anyone to work with tests.\nContrary, CodeceptJS provides CodeceptJS provides scenario-driven approach, so test is just a step-by-step representation of real user actions.\nThis way you can easily read, and follow test scenario, and edit it when you need it to be changed.  In this way CodeceptJS is more similar to Cucumber, so if you run a test with  --steps  option you will see this output:  TodoMvc --\n create todo item\n \u2022 I am on page  / \n \u2022 I dont see element  #todo-count \n \u2022 I fill field { model : newTodo },  Write a guide \n \u2022 I press key  Enter \n \u2022 I see  Write a guide , { repeater : todo in todos }\n \u2022 I see  1 item left ,  #todo-count \n \u2713 OK in 968ms  Unlike Cucumber, CodeceptJS is not about writing test scenarios above for business rules.\nTo say it again, its  goal is to provide standard action steps you can use for testing applications .\nSurely, it can't cover 100% of cases but it aims for 90%, for others you can write your own steps inside a  custom Helper  using API of Protractor  Setting up CodeceptJS with Protractor  To start using CodeceptJS you will need to install it via NPM and initialize it in directory with tests.  npm install -g codeceptjs\ncodeceptjs init  You will be asked questions about initial configuration, make sure you select Protractor helper.\nIf you didn't have Protracotr library it  will be installed .\nPlease agree to extend steps, and use  http://todomvc.com/examples/angularjs/  as a url for Protractor helper.  For TodoMVC application you will have following config created in  codecept.json  file:  {\n   tests :  ./*_test.js ,\n   timeout : 10000,\n   output :  ./output ,\n   helpers : {\n     Protractor : {\n       url :  http://todomvc.com/examples/angularjs/ ,\n       driver :  hosted ,\n       browser :  firefox ,\n       rootElement :  body \n    }\n  },\n   include : {\n     I :  ./steps_file.js \n  },\n   bootstrap : false,\n   mocha : {},\n   name :  todoangular \n}  First test can be generated with  gt  command:  codeceptjs gt  After that you can start writing your first CodeceptJS/Angular tests.\nPlease look into the reference of [Protractor helper])(http://codecept.io/helpers/Protractor/) for all available actions.\nYou can also run  list  command to see methods of I:  codeceptjs list  Writing First Test  Test scenario should always use  I  object to execute commands.\nThis is important as all methods of  I  are running in global promise chain, this way CodeceptJS makes sure everything is executed in right order.\nAt first a page should be opened to proceed, we use  amOnPage  command for that. As we already specified full URL to TodoMVC app,\nwe can pass relative path into it instead of absolute url:  Feature('Todo MVC');\n\nScenario('create todo item', (I) =  {\n  I.amOnPage('/');\n});  All scenarios should describe actions on site and assertions taken in the end. In CodeceptJS assertion commands have  see  or  dontSee  prefix:  Feature('Todo MVC');\n\nScenario('create todo item', (I) =  {\n  I.amOnPage('/');\n  I.dontSeeElement('#todo-count');\n});  A test can be executed with  run  command, we recommend to use  --steps  options to follow step-by-step execution:  $ codeceptjs run --steps\n\nCodeceptJS v0.3.2\nTest root is assumed to be /home/davert/demos/todoangular\nUsing the selenium server at http://localhost:4444/wd/hub\n\nTodoMvc --\n create todo item\n \u2022 I am on page  / \n \u2022 I dont see element  #todo-count   Running Several Scenarios  By writing a test in similar manner we will have a test shown in the beginning of this guide. Probably we would like not to finish with one test,\nbut have more, for testing editing of todo items, checking todo items, and more.  Let's prepare our test for multiple scenarios. All test scenarios will need to open main page of application, so  amOnPage  can be moved into the  Before  hook:\nScenarios will probably deal with created todo items, so we can move logic of crating new todo into a function.  Feature('TodoMvc');\n\nBefore((I) =  {\n  I.amOnPage('/');\n});\n\nvar createTodo = function (I, name) {\n  I.fillField({model: 'newTodo'}, name);\n  I.pressKey('Enter');\n}\n\nScenario('create todo item', (I) =  {\n  I.dontSeeElement('#todo-count');\n  createTodo(I, 'Write a guide');\n  I.see('Write a guide', {repeater:  todo in todos });\n  I.see('1 item left', '#todo-count');\n});  and so we can add even more tests!  Scenario('edit todo', (I) =  {\n  createTodo(I, 'write a review');\n  I.see('write a review', {repeater:  todo in todos });\n  I.doubleClick('write a review');\n  I.pressKey(['Control', 'a']);\n  I.pressKey('write old review');\n  I.pressKey('Enter');\n  I.see('write old review', {repeater:  todo in todos });\n});\n\nScenario('check todo item', (I) =  {\n  createTodo(I, 'my new item');\n  I.see('1 item left', '#todo-count');\n  I.checkOption({model: 'todo.completed'});\n  I.see('0 items left', '#todo-count');\n});  Locators  Like you may have noticed, CodeceptJS doesn't use  by.*  locators similar to Protractor or Selenium Webdriver.\nInstead most of methods expect you to pass valid CSS or XPath. In case you don't want CodeceptJS to guess the type of locator,\nyou can specify them using so-called strict locators. This is an absolute analogy of  by , so you can use angular specific locators (like models, repeaters, bindings, etc) in it:  {css: 'button'}\n{repeater:  todo in todos }\n{binding: 'latest'}  When we deal with clicks, CodeceptJS can take a text and search a web page for a valid clickable element with that text.\nSo links and buttons can be searched by their text.  Same thing happens for form fields: they are searched by field names, labels, and so on.  Using such smart locators makes tests easy to write, however, searching an element by text is slower than using CSS|XPath and much slower than using strict locators.  Refactoring  In previous examples, we've moved actions into  createTodo  function. Is there a more elegant way of refactoring?\nCan we have something like  I.createTodo()  to be used in code? Sure, we can do so by editing  steps_file.js  created by init command.  'use strict';\n// in this file you can append custom step methods to 'I' object\n\nmodule.exports = function() {\n  return actor({\n    createTodo: function(title) {\n      this.fillField({model: 'newTodo'}, title);\n      this.pressKey('Enter');\n    }\n  });\n}  And that's all, method is available to use as  I.createTodo(title) :  Scenario('create todo item', (I) =  {\n  I.dontSeeElement('#todo-count');\n  I.createTodo('Write a guide');\n  I.see('Write a guide', {repeater:  todo in todos });\n  I.see('1 item left', '#todo-count');\n});  To learn more about refactoring options in CodeceptJS read  PageObjects guide .  Extending  What if CodeceptJS doesn't provide some of Protractor functionality you actually need? Sure its API is to general,\nand this case is possible. If you don't know how to do something with CodeceptJS - revert back to Protractor syntax!  Create custom helper, define methods for it, and use it inside the I object. Your Helper can access  browser  from Protractor\nby accessing Protractor helper:  let browser = this.helpers['Protractor'].browser;  or use global  element  and  by  variables to locate elements:  element.all(by.repeater('result in memory'));  This way we recommend to implement all custom logic using low-level Protractor syntax and using it inside scenario tests.\nPlease see an  example of such helper .  done()  Almost ) This example is  available on GitHub .", 
            "title": "AngularJS E2E Testing with CodeceptJS"
        }, 
        {
            "location": "/nightmare/", 
            "text": "Blazing Fast Tests with Nightmare\n\n\nSelenium WebDriver is considered to be standard for end to end testing of web applications.\nDespite its popularity it have its drawbacks, it requires a real browser and Selenium server to control it.\nThis hardens setting it up testing environment for CI server and slows down test execution.\n\n\nIs there a sane alternative to Selenium?\n\n\nYes, how about \nNightmareJS\n?\n\n\nIt is modern Electron based testing framework which allows to execute tests in headless mode as well as in window mode for debug purposes.\nThis makes Nightmare very useful, much more handy than PhantomJS. Nightmare is in active development and has nice API for writing acceptance tests.\nUnfortunately, as all other JavaScript testing frameworks it has its own very custom API.\nWhat if you choose it for a project and suddenly you realize that you need something more powerful, like Selenium?\nYes, that might be a problem if you are not using CodeceptJS.\nThe one idea behind CodeceptJS is to unify different testing backends under one API, so you could easily write tests the same way no matter what engines you use: webdriverio, Protractor, or Nightmare.\n\n\nCompare a test written using Nightmare API:\n\n\nnightmare\n  .goto('http://yahoo.com')\n  .type('form[action*=\n/search\n] [name=p]', 'github nightmare')\n  .click('form[action*=\n/search\n] [type=submit]')\n  .wait('#main')\n  .evaluate(function () {\n    return document.querySelector('#main .searchCenterMiddle li a').href\n  })\n\n\n\n\nwith a similar CodeceptJS test:\n\n\n  I.amOnPage('http://yahoo.com');\n  I.fillField('p', 'github nightmare');\n  I.click('Search Web');\n  I.waitForElement('#main');\n  I.seeElement('#main .searchCenterMiddle li a');\n  I.seeElement(\n//a[contains(@href,'github.com/segmentio/nightmare')]\n);\n  I.see('segmentio/nightmare','#main li a');\n\n\n\n\nNightmareJS support only CSS locators for web elements, while CodeceptJS improves it to use XPath as well.\nThis is how form can be located by labels, and buttons by text in examples above. It is done by injecting\nclient-side scrips (for element location) to every loaded page. Also all events like click, doubleClick, keyPress are \nsimulated\n by JavaScript,\nthis makes testing less relevant, as they are not native to operating systems.\n\n\nHow Fast Is Nightmare JS?\n\n\nLet's execute the test above within WebDriverIO using headless Firefox + Selenium Server packed in Docker container.\n\n\ndocker run -d -p 4444:4444 selenium/standalone-firefox:2.53.0\ncodeceptjs run yahoo_test.js --steps\n\n\n\n\nThis provides use with output:\n\n\n Yahoo basic test\n \n WebDriverIO._before\n \u2022 I am on page \nhttp://yahoo.com\n\n \u2022 I fill field \np\n, \ngithub nightmare\n\n \u2022 I click \nSearch Web\n\n \u2022 I wait for element \n#main\n, 2\n \u2022 I see element \n#main .searchCenterMiddle li a\n\n \u2022 I see \nsegmentio/nightmare\n, \nli a\n\n \u2713 OK in 17591ms\n\n\n\n\nWhen we switch helper to Nightmare:\n\n\n Yahoo basic test\n \n Nightmare._before\n \u2022 I am on page \nhttp://yahoo.com\n\n \u2022 I fill field \np\n, \ngithub nightmare\n\n \u2022 I click \nSearch Web\n\n \u2022 I wait for element \n#main\n, 2\n \u2022 I see element \n#main .searchCenterMiddle li a\n\n \u2022 I see \nsegmentio/nightmare\n, \nli a\n\n \u2713 OK in 5490ms\n\n\n\n\nAs you see the Nightmare test was almost \n3 times faster\n than Selenium test.\nSure, this can't be taken as a valuable benchmark but more like a proof of concept.\n\n\nSetup\n\n\nTo start you need CodeceptJS with nightmare and nightmare-upload packages installed.\n\n\nnpm install -g codeceptjs nightmare nightmare-upload\n\n\n\n\nAnd a basic project initialized\n\n\ncodeceptjs init\n\n\n\n\nYou will be asked for a Helper to use, you should select Nightmare and provide url of a website you are testing.\nSetup process is explained on \nQuickStart page\n.\n\n\n(If you already have CodeceptJS project, just install nightmare globally or locally and enable it in config)\n\n\nConfiguring Nightmare\n\n\nTo enable Nightmare tests you should enable \nNightmare\n helper in \ncodecept.json\n config:\n\n\n{ // ..\n  \nhelpers\n: {\n    \nNightmare\n: {\n      \nurl\n: \nhttp://localhost\n,\n      \nshow\n: false\n    }\n  }\n  // ..\n}\n\n\n\n\nTurn on the \nshow\n option if you want to follow test progress in a window. This is very useful for debugging.\nAll other options can be taken from \nNightmareJS API\n.\n\n\nOption \nwaitForAction\n defines how long to wait after a click, doubleClick or pressKey action is performed.\nTest execution may happen much faster than the response is rendered, so make sure you set a proper delay value.\nBy default CodeceptJS waits for 500ms.\n\n\nOpening a Web Page\n\n\nNightmare provides you with more control to browser engine than Selenium does.\nThis allows you to use headers in your tests. For instance, CodeceptJS provides \nhaveHeader\n method\nto set default headers for all your HTTP requests:\n\n\nI.haveHeader('x-tested-with', 'codeceptjs');\n\n\n\n\nWhen opening a web page you can set headers as well. \namOnPage\n methods can take headers as second parameter:\n\n\n// use basic http auth\nI.amOnPage('/admin', [{'Authorization': 'Basic '+token}]);\n\n\n\n\nAs a small bonus: all \nconsole.log\n calls on a page will be also shown in \n--debug\n mode.\n\n\nManipulating Web Page\n\n\nNightmare helper is supposed to work in the same manner as WebDriverIO, SeleniumWebdriverJS or Protractor.\nThis means that all CodeceptJS actions like \nclick\n, \nfillField\n, \nselectOption\n and others are supposed to work in the very same manner.\nThey are expressive and flexible to accept CSS, XPath, names, values, or strict locators. Follow the helper reference for detailed description.\n\n\nAssertions start with \nsee\n prefix. You can check text on a page, elements on page and others.\n\n\nExtending Nightmare Helper\n\n\nCodeceptJS allows you to define and connect own helpers. If some functionality of\nNightmare helper is missing you can easily create \nExtendedNightmare\n helper by running:\n\n\ncodecepjs gh\n\n\n\n\nLearn more about \nHelpers\n.\n\n\nNightmare instance can be accessed by custom helper:\n\n\n// returns current nightmare instance\nthis.helpers['Nightmare'].browser;\n\n\n\n\nThis way you can call \nnative Nightmare commands\n.\n\n\nIt is important to understand that Nightmare executes JavaScript on client and on server side.\nIf you need to find an element you should search for it using client side script, but if you want\nto do an assertion you should return a data to server side.\n\n\nNightmare provides \nevaulate\n method to execute client-side JavaScript. CodeceptJS registers \ncodeceptjs\n\nobject globally on client side with \nfindElement\n and \nfindElements\n methods in it. They return IDs of matched elements\nso you can access them in next calls to \nevaluate\n:\n\n\n// inside a custom helper class\nseeAttributeContains(locator, attribute, expectedValue) {\n  // let's use chai assertion library\n  let assert = require('chai').assert;\n  // get nightmare instance\n  let browser = this.helpers['Nightmare'].browser;\n  // find an element by CSS or XPath:\n  return this.helpers['Nightmare']._locate(locator).then(function(els) {\n    // we received an array with IDs of matched elements\n    // now let's execute client-side script to get attribute for the first element\n    return browser.evaluate(function(el, attribute) {\n      // this is executed inside a web page!\n      return codeceptjs.fetchElement(el).getAttribute(attribute);\n    }, els[0], attribute); // function + its params\n  }).then(function(attributeValue) {\n    // get attribute value and back to server side\n    // execute an assertion\n    assert.include(attributeValye, expectedValue);\n  });\n}\n\n\n\n\nIt can be used in tests like:\n\n\nI.seeAttributeContains('#main img', 'src', '/cat.jpg');\n\n\n\n\nThis sample assertion used \n_locate\n helper method which searched for elements\nby CSS/XPath or a strict locator. Then \nbrowser.evaluate\n method was called to\nuse locate found elements on a page and return attribute from the first of them.\n\n\ndone()", 
            "title": "Nightmare Testing"
        }, 
        {
            "location": "/nightmare/#blazing-fast-tests-with-nightmare", 
            "text": "Selenium WebDriver is considered to be standard for end to end testing of web applications.\nDespite its popularity it have its drawbacks, it requires a real browser and Selenium server to control it.\nThis hardens setting it up testing environment for CI server and slows down test execution.  Is there a sane alternative to Selenium?  Yes, how about  NightmareJS ?  It is modern Electron based testing framework which allows to execute tests in headless mode as well as in window mode for debug purposes.\nThis makes Nightmare very useful, much more handy than PhantomJS. Nightmare is in active development and has nice API for writing acceptance tests.\nUnfortunately, as all other JavaScript testing frameworks it has its own very custom API.\nWhat if you choose it for a project and suddenly you realize that you need something more powerful, like Selenium?\nYes, that might be a problem if you are not using CodeceptJS.\nThe one idea behind CodeceptJS is to unify different testing backends under one API, so you could easily write tests the same way no matter what engines you use: webdriverio, Protractor, or Nightmare.  Compare a test written using Nightmare API:  nightmare\n  .goto('http://yahoo.com')\n  .type('form[action*= /search ] [name=p]', 'github nightmare')\n  .click('form[action*= /search ] [type=submit]')\n  .wait('#main')\n  .evaluate(function () {\n    return document.querySelector('#main .searchCenterMiddle li a').href\n  })  with a similar CodeceptJS test:    I.amOnPage('http://yahoo.com');\n  I.fillField('p', 'github nightmare');\n  I.click('Search Web');\n  I.waitForElement('#main');\n  I.seeElement('#main .searchCenterMiddle li a');\n  I.seeElement( //a[contains(@href,'github.com/segmentio/nightmare')] );\n  I.see('segmentio/nightmare','#main li a');  NightmareJS support only CSS locators for web elements, while CodeceptJS improves it to use XPath as well.\nThis is how form can be located by labels, and buttons by text in examples above. It is done by injecting\nclient-side scrips (for element location) to every loaded page. Also all events like click, doubleClick, keyPress are  simulated  by JavaScript,\nthis makes testing less relevant, as they are not native to operating systems.", 
            "title": "Blazing Fast Tests with Nightmare"
        }, 
        {
            "location": "/nightmare/#how-fast-is-nightmare-js", 
            "text": "Let's execute the test above within WebDriverIO using headless Firefox + Selenium Server packed in Docker container.  docker run -d -p 4444:4444 selenium/standalone-firefox:2.53.0\ncodeceptjs run yahoo_test.js --steps  This provides use with output:   Yahoo basic test\n   WebDriverIO._before\n \u2022 I am on page  http://yahoo.com \n \u2022 I fill field  p ,  github nightmare \n \u2022 I click  Search Web \n \u2022 I wait for element  #main , 2\n \u2022 I see element  #main .searchCenterMiddle li a \n \u2022 I see  segmentio/nightmare ,  li a \n \u2713 OK in 17591ms  When we switch helper to Nightmare:   Yahoo basic test\n   Nightmare._before\n \u2022 I am on page  http://yahoo.com \n \u2022 I fill field  p ,  github nightmare \n \u2022 I click  Search Web \n \u2022 I wait for element  #main , 2\n \u2022 I see element  #main .searchCenterMiddle li a \n \u2022 I see  segmentio/nightmare ,  li a \n \u2713 OK in 5490ms  As you see the Nightmare test was almost  3 times faster  than Selenium test.\nSure, this can't be taken as a valuable benchmark but more like a proof of concept.", 
            "title": "How Fast Is Nightmare JS?"
        }, 
        {
            "location": "/nightmare/#setup", 
            "text": "To start you need CodeceptJS with nightmare and nightmare-upload packages installed.  npm install -g codeceptjs nightmare nightmare-upload  And a basic project initialized  codeceptjs init  You will be asked for a Helper to use, you should select Nightmare and provide url of a website you are testing.\nSetup process is explained on  QuickStart page .  (If you already have CodeceptJS project, just install nightmare globally or locally and enable it in config)", 
            "title": "Setup"
        }, 
        {
            "location": "/nightmare/#configuring-nightmare", 
            "text": "To enable Nightmare tests you should enable  Nightmare  helper in  codecept.json  config:  { // ..\n   helpers : {\n     Nightmare : {\n       url :  http://localhost ,\n       show : false\n    }\n  }\n  // ..\n}  Turn on the  show  option if you want to follow test progress in a window. This is very useful for debugging.\nAll other options can be taken from  NightmareJS API .  Option  waitForAction  defines how long to wait after a click, doubleClick or pressKey action is performed.\nTest execution may happen much faster than the response is rendered, so make sure you set a proper delay value.\nBy default CodeceptJS waits for 500ms.", 
            "title": "Configuring Nightmare"
        }, 
        {
            "location": "/nightmare/#opening-a-web-page", 
            "text": "Nightmare provides you with more control to browser engine than Selenium does.\nThis allows you to use headers in your tests. For instance, CodeceptJS provides  haveHeader  method\nto set default headers for all your HTTP requests:  I.haveHeader('x-tested-with', 'codeceptjs');  When opening a web page you can set headers as well.  amOnPage  methods can take headers as second parameter:  // use basic http auth\nI.amOnPage('/admin', [{'Authorization': 'Basic '+token}]);  As a small bonus: all  console.log  calls on a page will be also shown in  --debug  mode.", 
            "title": "Opening a Web Page"
        }, 
        {
            "location": "/nightmare/#manipulating-web-page", 
            "text": "Nightmare helper is supposed to work in the same manner as WebDriverIO, SeleniumWebdriverJS or Protractor.\nThis means that all CodeceptJS actions like  click ,  fillField ,  selectOption  and others are supposed to work in the very same manner.\nThey are expressive and flexible to accept CSS, XPath, names, values, or strict locators. Follow the helper reference for detailed description.  Assertions start with  see  prefix. You can check text on a page, elements on page and others.", 
            "title": "Manipulating Web Page"
        }, 
        {
            "location": "/nightmare/#extending-nightmare-helper", 
            "text": "CodeceptJS allows you to define and connect own helpers. If some functionality of\nNightmare helper is missing you can easily create  ExtendedNightmare  helper by running:  codecepjs gh  Learn more about  Helpers .  Nightmare instance can be accessed by custom helper:  // returns current nightmare instance\nthis.helpers['Nightmare'].browser;  This way you can call  native Nightmare commands .  It is important to understand that Nightmare executes JavaScript on client and on server side.\nIf you need to find an element you should search for it using client side script, but if you want\nto do an assertion you should return a data to server side.  Nightmare provides  evaulate  method to execute client-side JavaScript. CodeceptJS registers  codeceptjs \nobject globally on client side with  findElement  and  findElements  methods in it. They return IDs of matched elements\nso you can access them in next calls to  evaluate :  // inside a custom helper class\nseeAttributeContains(locator, attribute, expectedValue) {\n  // let's use chai assertion library\n  let assert = require('chai').assert;\n  // get nightmare instance\n  let browser = this.helpers['Nightmare'].browser;\n  // find an element by CSS or XPath:\n  return this.helpers['Nightmare']._locate(locator).then(function(els) {\n    // we received an array with IDs of matched elements\n    // now let's execute client-side script to get attribute for the first element\n    return browser.evaluate(function(el, attribute) {\n      // this is executed inside a web page!\n      return codeceptjs.fetchElement(el).getAttribute(attribute);\n    }, els[0], attribute); // function + its params\n  }).then(function(attributeValue) {\n    // get attribute value and back to server side\n    // execute an assertion\n    assert.include(attributeValye, expectedValue);\n  });\n}  It can be used in tests like:  I.seeAttributeContains('#main img', 'src', '/cat.jpg');  This sample assertion used  _locate  helper method which searched for elements\nby CSS/XPath or a strict locator. Then  browser.evaluate  method was called to\nuse locate found elements on a page and return attribute from the first of them.", 
            "title": "Extending Nightmare Helper"
        }, 
        {
            "location": "/nightmare/#done", 
            "text": "", 
            "title": "done()"
        }, 
        {
            "location": "/helpers/", 
            "text": "Helpers\n\n\nHelpers is a core concept of CodeceptJS. Helper is a wrapper around various libraries providing unified interface around them.\nMethods of Helper class will be available in tests in \nI\n object. This abstracts test scenarios from the implementation and allows easy switching between backends.\nFunctionality of CodeceptJS should be extended by writing a custom helpers.\n\n\nYou can either access core Helpers (and underlying libraries) or create a new from scratch.\n\n\nDevelopment\n\n\nHelpers can be created by running a generator command:\n\n\ncodeceptjs gh\n\n\n\n\n(or \ngenerate helper\n)\n\n\nHelpers are ES6 classes inherited from \ncorresponding abstract class\n.\nGenerated Helper will be added to \ncodecept.json\n config. It should look like this:\n\n\n'use strict';\n\nlet Helper = codecept_helper;\n\nclass MyHelper extends Helper {\n\n  // before/after hooks\n  _before() {\n    // remove if not used\n  }\n\n  _after() {\n    // remove if not used\n  }\n\n  // add custom methods here\n  // If you need to access other helpers\n  // use: this.helpers['helperName']\n\n}\n\nmodule.exports = MyHelper;\n\n\n\n\nAll methods except those starting from \n_\n will be added to \nI\n object and treated as test actions.\nEvery method should return a value in order to be appended into promise chain.\n\n\nAfter writing your own custom helpers here you can always update CodeceptJS TypeScript Type Definitions running:\n\n\ncodeceptjs def .\n\n\n\n\nThis way, if your tests are written with TypeScript, your IDE will be able to leverage features like autocomplete and so on.\n\n\nWebDriverIO Example\n\n\nNext example demonstrates how to use WebDriverIO library to create your own test action.\nMethod \nseeAuthentication\n will use \nclient\n instance of WebDriverIO to get access to cookies.\nStandard NodeJS assertion library will be used (you can use any).\n\n\n'use strict';\nlet Helper = codecept_helper;\n\n// use any assertion library you like\nlet assert = require('assert');\n\nclass MyHelper extends Helper {\n  /**\n   * checks that authentication cookie is set\n   */\n  seeAuthentication() {\n    // access current client of WebDriverIO helper\n    let client = this.helpers['WebDriverIO'].browser;\n\n    // get all cookies according to http://webdriver.io/api/protocol/cookie.html\n    // any helper method should return a value in order to be added to promise chain\n    return client.cookie(function(err, res) {\n      // get values\n      let cookies = res.value;\n      for (let k in cookies) {\n        // check for a cookie\n        if (cookies[k].name != 'logged_in') continue;\n        assert.equal(cookies[k].value, 'yes');\n        return;\n      }\n      assert.fail(cookies, 'logged_in', \nAuth cookie not set\n);\n    });\n  }\n}\n\n\n\n\nProtractor Example\n\n\nProtractor example demonstrates usage of global \nelement\n and \nby\n objects.\nHowever \nbrowser\n should be accessed from a helper instance via \nthis.helpers['Protractor']\n;\nWe also use \nchai-as-promised\n library to have nice assertions with promises.\n\n\n'use strict';\nlet Helper = codecept_helper;\n\n// use any assertion library you like\nvar chai = require('chai');\nvar chaiAsPromised = require('chai-as-promised');\nchai.use(chaiAsPromised);\nvar expect = chai.expect;\n\nclass MyHelper extends Helper {\n  /**\n   * checks that authentication cookie is set\n   */\n  seeInHistory(historyPosition, value) {\n    // access browser instance from Protractor helper\n    this.helpers['Protractor'].browser.refresh();\n\n    // you can use `element` as well as in protractor\n    var history = element.all(by.repeater('result in memory'));\n\n    // use chai as promised for better assertions\n    // end your method with `return` to handle promises\n    return expect(history.get(historyPosition).getText()).to.eventually.equal(value);\n  }\n}\n\n\n\n\nInitialization\n\n\nHelpers can be configured in \ncodecept.json\n and config values are passed into constructor.\nBy default config values will be stored in \nthis.config\n. You can redefine constructor to provide custom initialization and customization.\n\n\nconstructor(config) {\n  config.defaultValue = '42';\n  super(config);\n}\n\n\n\n\nHooks\n\n\nHelpers may contain several hooks you can use to handle events of a test.\nImplement corresponding methods to them.\n\n\n\n\n_init\n - before all tests\n\n\n_before\n - before a test\n\n\n_beforeStep\n - before each step\n\n\n_afterStep\n - after each step\n\n\n_beforeSuite\n - before each suite \n\n\n_afterSuite\n - after each suite \n\n\n\n\nEach implemented method should return a value as they will be added to global promise chain as well.\n\n\ndone()", 
            "title": "Helpers"
        }, 
        {
            "location": "/helpers/#helpers", 
            "text": "Helpers is a core concept of CodeceptJS. Helper is a wrapper around various libraries providing unified interface around them.\nMethods of Helper class will be available in tests in  I  object. This abstracts test scenarios from the implementation and allows easy switching between backends.\nFunctionality of CodeceptJS should be extended by writing a custom helpers.  You can either access core Helpers (and underlying libraries) or create a new from scratch.", 
            "title": "Helpers"
        }, 
        {
            "location": "/helpers/#development", 
            "text": "Helpers can be created by running a generator command:  codeceptjs gh  (or  generate helper )  Helpers are ES6 classes inherited from  corresponding abstract class .\nGenerated Helper will be added to  codecept.json  config. It should look like this:  'use strict';\n\nlet Helper = codecept_helper;\n\nclass MyHelper extends Helper {\n\n  // before/after hooks\n  _before() {\n    // remove if not used\n  }\n\n  _after() {\n    // remove if not used\n  }\n\n  // add custom methods here\n  // If you need to access other helpers\n  // use: this.helpers['helperName']\n\n}\n\nmodule.exports = MyHelper;  All methods except those starting from  _  will be added to  I  object and treated as test actions.\nEvery method should return a value in order to be appended into promise chain.  After writing your own custom helpers here you can always update CodeceptJS TypeScript Type Definitions running:  codeceptjs def .  This way, if your tests are written with TypeScript, your IDE will be able to leverage features like autocomplete and so on.", 
            "title": "Development"
        }, 
        {
            "location": "/helpers/#webdriverio-example", 
            "text": "Next example demonstrates how to use WebDriverIO library to create your own test action.\nMethod  seeAuthentication  will use  client  instance of WebDriverIO to get access to cookies.\nStandard NodeJS assertion library will be used (you can use any).  'use strict';\nlet Helper = codecept_helper;\n\n// use any assertion library you like\nlet assert = require('assert');\n\nclass MyHelper extends Helper {\n  /**\n   * checks that authentication cookie is set\n   */\n  seeAuthentication() {\n    // access current client of WebDriverIO helper\n    let client = this.helpers['WebDriverIO'].browser;\n\n    // get all cookies according to http://webdriver.io/api/protocol/cookie.html\n    // any helper method should return a value in order to be added to promise chain\n    return client.cookie(function(err, res) {\n      // get values\n      let cookies = res.value;\n      for (let k in cookies) {\n        // check for a cookie\n        if (cookies[k].name != 'logged_in') continue;\n        assert.equal(cookies[k].value, 'yes');\n        return;\n      }\n      assert.fail(cookies, 'logged_in',  Auth cookie not set );\n    });\n  }\n}", 
            "title": "WebDriverIO Example"
        }, 
        {
            "location": "/helpers/#protractor-example", 
            "text": "Protractor example demonstrates usage of global  element  and  by  objects.\nHowever  browser  should be accessed from a helper instance via  this.helpers['Protractor'] ;\nWe also use  chai-as-promised  library to have nice assertions with promises.  'use strict';\nlet Helper = codecept_helper;\n\n// use any assertion library you like\nvar chai = require('chai');\nvar chaiAsPromised = require('chai-as-promised');\nchai.use(chaiAsPromised);\nvar expect = chai.expect;\n\nclass MyHelper extends Helper {\n  /**\n   * checks that authentication cookie is set\n   */\n  seeInHistory(historyPosition, value) {\n    // access browser instance from Protractor helper\n    this.helpers['Protractor'].browser.refresh();\n\n    // you can use `element` as well as in protractor\n    var history = element.all(by.repeater('result in memory'));\n\n    // use chai as promised for better assertions\n    // end your method with `return` to handle promises\n    return expect(history.get(historyPosition).getText()).to.eventually.equal(value);\n  }\n}", 
            "title": "Protractor Example"
        }, 
        {
            "location": "/helpers/#initialization", 
            "text": "Helpers can be configured in  codecept.json  and config values are passed into constructor.\nBy default config values will be stored in  this.config . You can redefine constructor to provide custom initialization and customization.  constructor(config) {\n  config.defaultValue = '42';\n  super(config);\n}", 
            "title": "Initialization"
        }, 
        {
            "location": "/helpers/#hooks", 
            "text": "Helpers may contain several hooks you can use to handle events of a test.\nImplement corresponding methods to them.   _init  - before all tests  _before  - before a test  _beforeStep  - before each step  _afterStep  - after each step  _beforeSuite  - before each suite   _afterSuite  - after each suite    Each implemented method should return a value as they will be added to global promise chain as well.  done()", 
            "title": "Hooks"
        }, 
        {
            "location": "/pageobjects/", 
            "text": "PageObjects\n\n\nUI of your web application has interaction areas which can be shared across different tests.\nTo avoid code duplication you can put common locators and methods into one place.\n\n\nPageObjects\n\n\nIn case an application has different pages (login, admin, etc) you should use a page object.\nCodeceptJS can generate a template for it with next command\n\n\ncodeceptjs gpo\n\n\n\n\n(or generate pageobject)\n\n\nThis will create a sample template for a page object and include it into \ncodecept.json\n config.\n\n\n'use strict';\nlet I;\n\nmodule.exports = {\n\n  _init() {\n    I = require('codeceptjs/actor')();\n  }\n\n  // insert your locators and methods here\n}\n\n\n\n\nAs you see, \nI\n object is available there so you can use it as you do in tests.\nGeneral page object for a login page may look like this:\n\n\n'use strict';\nlet I;\n\nmodule.exports = {\n\n  _init() {\n    I = require('codeceptjs/actor')();\n  },\n\n  // setting locators\n  fields: {\n    email: '#user_basic_email',\n    password: '#user_basic_password'\n  },\n  submitButton: {css: '#new_user_basic input[type=submit]'},\n\n  // introducing methods\n  sendForm(email, password) {\n    I.fillField(this.fields.email, email);\n    I.fillField(this.fields.password, password);\n    I.click(this.submitButton);\n  }\n}\n\n\n\n\nYou can include this pageobject in test by its name (defined in \ncodecept.json\n). In case you created a \nloginPage\n object\nit should be added to list of test arguments to be included in test:\n\n\nScenario('login', (I, loginPage) =\n {\n  loginPage.sendForm('john@doe.com','123456');\n  I.see('Hello, John');\n});\n\n\n\n\nPage Fragments\n\n\nIn a similar manner CodeceptJS allows you to generate \nPageFragments\n and any other are abstraction\nby running \ngo\n command with \n--kind\n (or \n-t\n) option:\n\n\ncodeceptjs go --kind fragment\n\n\n\n\nPage Fragments represent autonomous parts of a page, like modal boxes, components, widgets.\nTechnically they are the same as PageObject but conceptually they are a bit different.\nFor instance, it is recommended that Page Fragment to include a root locator of a component.\nMethods of page fragment can use \nwithin\n block to narrow scope to a root locator:\n\n\nlet I;\n// fragments/modal.js\nmodule.exports = {\n\n  _init() {\n    I = require('codeceptjs/actor')();\n  },\n\n  root: '#modal',\n\n  // we are clicking \nAccept: inside a popup window\n  accept() {\n    within(this.root, function() {\n      I.click('Accept');\n    });\n  }\n}\n\n\n\n\nStepObjects\n\n\nStepObjects represent complex actions which involve usage of multiple web pages. For instance, creating users in backend, chaning permissions, etc.\nStepObject can be created similarly to PageObjects or PageFragments:\n\n\ncodeceptjs go --kind step\n\n\n\n\nTechnically they are the same as PageObjects but with no locators inside them. StepObjects can inject PageObjects and use multiple POs to make a complex scenarios:\n\n\nlet I, userPage, permissionPage;\nmodule.exports = {\n\n  _init() {\n    I = require('codeceptjs/actor')();\n    userPage = require('../pages/user');\n    userPage._init();\n    permissionPage = require('../pages/permissions');\n    permissionPage._init();\n\n  },\n\n  createUser(name) {\n    // action composed from actions of page objects\n    userPage.open();\n    userPage.create(name);\n    permissionPage.activate(name);\n  }\n\n};\n\n\n\n\nActor\n\n\nLogin example above can be reworked so the method \nlogin\n would be available in \nI\n object itself.\nThis is recommended if most of tests require user authentication and for not to require \nloginPage\n every time.\n\n\nAt initialization you were asked to create custom steps file. If you accepted this option you may use \ncustom_steps.js\n file to extend \nI\n.\nSee how \nlogin\n method can be added to \nI\n:\n\n\n'use strict';\n// in this file you can append custom step methods to 'I' object\n\nmodule.exports = function() {\n  return require('./lib/actor')({\n\n    login: function(email, password) {\n      this.fillField('Email', email);\n      this.fillField('Password', password);\n      this.click('Submit');\n    }\n  });\n}\n\n\n\n\nPlease notice that instead of \nI\n you should use \nthis\n in current context.\n\n\ndone()", 
            "title": "Page Objects"
        }, 
        {
            "location": "/pageobjects/#pageobjects", 
            "text": "UI of your web application has interaction areas which can be shared across different tests.\nTo avoid code duplication you can put common locators and methods into one place.", 
            "title": "PageObjects"
        }, 
        {
            "location": "/pageobjects/#pageobjects_1", 
            "text": "In case an application has different pages (login, admin, etc) you should use a page object.\nCodeceptJS can generate a template for it with next command  codeceptjs gpo  (or generate pageobject)  This will create a sample template for a page object and include it into  codecept.json  config.  'use strict';\nlet I;\n\nmodule.exports = {\n\n  _init() {\n    I = require('codeceptjs/actor')();\n  }\n\n  // insert your locators and methods here\n}  As you see,  I  object is available there so you can use it as you do in tests.\nGeneral page object for a login page may look like this:  'use strict';\nlet I;\n\nmodule.exports = {\n\n  _init() {\n    I = require('codeceptjs/actor')();\n  },\n\n  // setting locators\n  fields: {\n    email: '#user_basic_email',\n    password: '#user_basic_password'\n  },\n  submitButton: {css: '#new_user_basic input[type=submit]'},\n\n  // introducing methods\n  sendForm(email, password) {\n    I.fillField(this.fields.email, email);\n    I.fillField(this.fields.password, password);\n    I.click(this.submitButton);\n  }\n}  You can include this pageobject in test by its name (defined in  codecept.json ). In case you created a  loginPage  object\nit should be added to list of test arguments to be included in test:  Scenario('login', (I, loginPage) =  {\n  loginPage.sendForm('john@doe.com','123456');\n  I.see('Hello, John');\n});", 
            "title": "PageObjects"
        }, 
        {
            "location": "/pageobjects/#page-fragments", 
            "text": "In a similar manner CodeceptJS allows you to generate  PageFragments  and any other are abstraction\nby running  go  command with  --kind  (or  -t ) option:  codeceptjs go --kind fragment  Page Fragments represent autonomous parts of a page, like modal boxes, components, widgets.\nTechnically they are the same as PageObject but conceptually they are a bit different.\nFor instance, it is recommended that Page Fragment to include a root locator of a component.\nMethods of page fragment can use  within  block to narrow scope to a root locator:  let I;\n// fragments/modal.js\nmodule.exports = {\n\n  _init() {\n    I = require('codeceptjs/actor')();\n  },\n\n  root: '#modal',\n\n  // we are clicking  Accept: inside a popup window\n  accept() {\n    within(this.root, function() {\n      I.click('Accept');\n    });\n  }\n}", 
            "title": "Page Fragments"
        }, 
        {
            "location": "/pageobjects/#stepobjects", 
            "text": "StepObjects represent complex actions which involve usage of multiple web pages. For instance, creating users in backend, chaning permissions, etc.\nStepObject can be created similarly to PageObjects or PageFragments:  codeceptjs go --kind step  Technically they are the same as PageObjects but with no locators inside them. StepObjects can inject PageObjects and use multiple POs to make a complex scenarios:  let I, userPage, permissionPage;\nmodule.exports = {\n\n  _init() {\n    I = require('codeceptjs/actor')();\n    userPage = require('../pages/user');\n    userPage._init();\n    permissionPage = require('../pages/permissions');\n    permissionPage._init();\n\n  },\n\n  createUser(name) {\n    // action composed from actions of page objects\n    userPage.open();\n    userPage.create(name);\n    permissionPage.activate(name);\n  }\n\n};", 
            "title": "StepObjects"
        }, 
        {
            "location": "/pageobjects/#actor", 
            "text": "Login example above can be reworked so the method  login  would be available in  I  object itself.\nThis is recommended if most of tests require user authentication and for not to require  loginPage  every time.  At initialization you were asked to create custom steps file. If you accepted this option you may use  custom_steps.js  file to extend  I .\nSee how  login  method can be added to  I :  'use strict';\n// in this file you can append custom step methods to 'I' object\n\nmodule.exports = function() {\n  return require('./lib/actor')({\n\n    login: function(email, password) {\n      this.fillField('Email', email);\n      this.fillField('Password', password);\n      this.click('Submit');\n    }\n  });\n}  Please notice that instead of  I  you should use  this  in current context.  done()", 
            "title": "Actor"
        }, 
        {
            "location": "/helpers/WebDriverIO/", 
            "text": "WebDriverIO\n\n\nWebDriverIO helper which wraps \nwebdriverio\n library to\nmanipulate browser using Selenium WebDriver or PhantomJS.\n\n\nSelenium Installation\n\n\n\n\nDownload \nSelenium Server\n\n\nLaunch the daemon: \njava -jar selenium-server-standalone-2.xx.xxx.jar\n\n\n\n\nPhantomJS Installation\n\n\nPhantomJS is a headless alternative to Selenium Server that implements the WebDriver protocol.\nIt allows you to run Selenium tests on a server without a GUI installed.\n\n\n\n\nDownload \nPhantomJS\n\n\nRun PhantomJS in WebDriver mode: \nphantomjs --webdriver=4444\n\n\n\n\nConfiguration\n\n\nThis helper should be configured in codecept.json\n\n\n\n\nurl\n - base url of website to be tested\n\n\nbrowser\n - browser in which perform testing\n\n\nrestart\n - restart browser between tests (default: true), if set to false cookies will be cleaned but browser window will be kept.\n\n\nwindowSize\n: (optional) default window size. Set to \nmaximize\n or a dimension in the format \n640x480\n.\n\n\nwaitForTimeout\n: (optional) sets default wait time in \nms\n for all \nwait*\n functions. 1000 by default;\n\n\ndesiredCapabilities\n: Selenium capabilities\n\n\n\n\nAdditional configuration params can be used from \nhttp://webdriver.io/guide/getstarted/configuration.html\n\n\nConnect through proxy\n\n\nCodeceptJS also provides flexible options when you want to execute tests to Selenium servers through proxy. You will\nneed to update the \nhelpers.WebDriverIO.desiredCapabilities.proxy\n key.\n\n\n{\n    \nhelpers\n: {\n        \nWebDriverIO\n: {\n            \ndesiredCapabilities\n: {\n                \nproxy\n: {\n                    \nproxyType\n: \nmanual|pac\n,\n                    \nproxyAutoconfigUrl\n: \nURL TO PAC FILE\n,\n                    \nhttpProxy\n: \nPROXY SERVER\n,\n                    \nsslProxy\n: \nPROXY SERVER\n,\n                    \nftpProxy\n: \nPROXY SERVER\n,\n                    \nsocksProxy\n: \nPROXY SERVER\n,\n                    \nsocksUsername\n: \nUSERNAME\n,\n                    \nsocksPassword\n: \nPASSWORD\n,\n                    \nnoProxy\n: \nBYPASS ADDRESSES\n\n                }\n            }\n        }\n    }\n}\n\n\n\n\nFor example,\n\n\n{\n    \nhelpers\n: {\n        \nWebDriverIO\n: {\n            \ndesiredCapabilities\n: {\n                \nproxy\n: {\n                    \nproxyType\n: \nmanual\n,\n                    \nhttpProxy\n: \nhttp://corporate.proxy:8080\n,\n                    \nsocksUsername\n: \ncodeceptjs\n,\n                    \nsocksPassword\n: \nsecret\n,\n                    \nnoProxy\n: \n127.0.0.1,localhost\n\n                }\n            }\n        }\n    }\n}\n\n\n\n\nPlease refer to \nSelenium - Proxy Object\n for more information.\n\n\nCloud Providers\n\n\nWebDriverIO makes it possible to execute tests against services like \nSauce Labs\n \nBrowserStack\n \nTestingBot\n\nCheck out their documentation on \navailable parameters\n\n\nConnecting to \nBrowserStack\n and \nSauce Labs\n is simple. All you need to do\nis set the \nuser\n and \nkey\n parameters. WebDriverIO authomatically know which\nservice provider to connect to.\n\n\n{\n    \nhelpers\n:{\n        \nWebDriverIO\n: {\n            \nurl\n: \nYOUR_DESIERED_HOST\n,\n            \nuser\n: \nYOUR_BROWSERSTACK_USER\n,\n            \nkey\n: \nYOUR_BROWSERSTACK_KEY\n,\n            \ndesiredCapabilities\n: {\n                \nbrowserName\n: \nchrome\n,\n\n                // only set this if you're using BrowserStackLocal to test a local domain\n                // \nbrowserstack.local\n: true,\n\n                // set this option to tell browserstack to provide addition debugging info\n                // \nbrowserstack.debug\n: true,\n            }\n        }\n    }\n}\n\n\n\n\nMultiremote Capabilities\n\n\nThis is a work in progress but you can control two browsers at a time right out of the box.\nIndividual control is something that is planned for a later version.\n\n\nHere is the \nwebdriverio docs\n on the subject\n\n\n{\n    \nhelpers\n: {\n        \nWebDriverIO\n: {\n            \nmultiremote\n: {\n                \nMyChrome\n: {\n                    \ndesiredCapabilities\n: {\n                        \nbrowserName\n: \nchrome\n\n                     }\n                },\n                \nMyFirefox\n: {\n                   \ndesiredCapabilities\n: {\n                       \nbrowserName\n: \nfirefox\n\n                   }\n                }\n            }\n        }\n    }\n}\n\n\n\n\nAccess From Helpers\n\n\nReceive a WebDriverIO client from a custom helper by accessing \nbrowser\n property:\n\n\nthis.helpers['WebDriverIO'].browser\n\n\n\n\nParameters\n\n\n\n\nconfig\n  \n\n\n\n\n_locate\n\n\nGet elements by different locator types, including strict locator\nShould be used in custom helpers:\n\n\nthis.helpers['WebDriverIO']._locate({name: 'password'}).then //...\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\n\n\n_locateCheckable\n\n\nFind a checkbox by providing human readable text:\n\n\nthis.helpers['WebDriverIO']._locateCheckable('I agree with terms and conditions').then // ...\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\n\n\n_locateClickable\n\n\nFind a clickable element by providing human readable text:\n\n\nthis.helpers['WebDriverIO']._locateClickable('Next page').then // ...\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\n\n\n_locateFields\n\n\nFind field elements by providing human readable text:\n\n\nthis.helpers['WebDriverIO']._locateFields('Your email').then // ...\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\n\n\nacceptPopup\n\n\nAccepts the active JavaScript native popup window, as created by window.alert|window.confirm|window.prompt.\nDon't confuse popups with modal windows, as created by \nvarious libraries\n.\n\n\namOnPage\n\n\nOpens a web page in a browser. Requires relative or absolute url.\nIf url starts with \n/\n, opens a web page of a site defined in \nurl\n config parameter.\n\n\nI.amOnPage('/'); // opens main page of website\nI.amOnPage('https://github.com'); // opens github\nI.amOnPage('/login'); // opens a login page\n\n\n\n\nParameters\n\n\n\n\nurl\n  url path or global url\n\n\n\n\nappendField\n\n\nAppends text to a input field or textarea.\nField is located by name, label, CSS or XPath\n\n\nI.appendField('#myTextField', 'appended');\n\n\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\nvalue\n  text value\n\n\n\n\nattachFile\n\n\nAttaches a file to element located by label, name, CSS or XPath\nPath to file is relative current codecept directory (where codecept.json is located).\nFile will be uploaded to remove system (if tests are running remotely).\n\n\nI.attachFile('Avatar', 'data/avatar.jpg');\nI.attachFile('form input[name=avatar]', 'data/avatar.jpg');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  field located by label|name|CSS|XPath|strict locator\n\n\npathToFile\n  local file path relative to codecept.json config file\n\n\n\n\ncancelPopup\n\n\nDismisses the active JavaScript popup, as created by window.alert|window.confirm|window.prompt.\n\n\ncheckOption\n\n\nSelects a checkbox or radio button.\nElement is located by label or name or CSS or XPath.\n\n\nThe second parameter is a context (CSS or XPath locator) to narrow the search.\n\n\nI.checkOption('#agree');\nI.checkOption('I Agree to Terms and Conditions');\nI.checkOption('agree', '//form');\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\n-   \nfield\n  checkbox located by label\n\n\nname\n\n\nCSS\n\n\n\n\n\n\n\n\n\n\nclearCookie\n\n\nClears a cookie by name,\nif none provided clears all cookies\n\n\nI.clearCookie();\nI.clearCookie('test');\n\n\n\n\nParameters\n\n\n\n\ncookie\n  (optional)\n\n\n\n\nclearField\n\n\nClears a \ntextarea\n or text \ninput\n element's value.\n\n\nI.clearField('#email');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  field located by label|name|CSS|XPath|strict locator\n\n\n\n\nclick\n\n\nPerform a click on a link or a button, given by a locator.\nIf a fuzzy locator is given, the page will be searched for a button, link, or image matching the locator string.\nFor buttons, the \"value\" attribute, \"name\" attribute, and inner text are searched. For links, the link text is searched.\nFor images, the \"alt\" attribute and inner text of any parent links are searched.\n\n\nThe second parameter is a context (CSS or XPath locator) to narrow the search.\n\n\n// simple link\nI.click('Logout');\n// button of form\nI.click('Submit');\n// CSS button\nI.click('#form input[type=submit]');\n// XPath\nI.click('//form/*[@type=submit]');\n// link in context\nI.click('Logout', '#nav');\n// using strict locator\nI.click({css: 'nav a.login'});\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\n-   \nlocator\n  clickable link or button located by text, or any element located by CSS\n\n\nXPath\n\n\nstrict locator\n\n\n\n\n\n\n\n\n\n\ndontSee\n\n\nOpposite to \nsee\n. Checks that a text is not present on a page.\nUse context parameter to narrow down the search.\n\n\nI.dontSee('Login'); // assume we are already logged in\n\n\n\n\nParameters\n\n\n\n\ntext\n  is not present\n\n\ncontext\n  (optional) element located by CSS|XPath|strict locator in which to perfrom search\n\n\n\n\ndontSeeCheckboxIsChecked\n\n\nVerifies that the specified checkbox is not checked.\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\n\n\ndontSeeCookie\n\n\nChecks that cookie with given name does not exist.\n\n\nParameters\n\n\n\n\nname\n  \n\n\n\n\ndontSeeCurrentUrlEquals\n\n\nChecks that current url is not equal to provided one.\nIf a relative url provided, a configured url will be prepended to it.\n\n\nParameters\n\n\n\n\nurl\n  \n\n\n\n\ndontSeeElement\n\n\nOpposite to \nseeElement\n. Checks that element is not visible\n\n\nParameters\n\n\n\n\nlocator\n  located by CSS|XPath|Strict locator\n\n\n\n\ndontSeeElementInDOM\n\n\nOpposite to \nseeElementInDOM\n. Checks that element is not on page.\n\n\nParameters\n\n\n\n\nlocator\n  located by CSS|XPath|Strict locator\n\n\n\n\ndontSeeInCurrentUrl\n\n\nChecks that current url does not contain a provided fragment.\n\n\nParameters\n\n\n\n\nurl\n  \n\n\n\n\ndontSeeInField\n\n\nChecks that value of input field or textare doesn't equal to given value\nOpposite to \nseeInField\n.\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\nvalue\n  is not expected to be a field value\n\n\n\n\ndontSeeInSource\n\n\nChecks that the current page contains the given string in its raw source code\n\n\nParameters\n\n\n\n\ntext\n  \n\n\n\n\ndontSeeInTitle\n\n\nChecks that title does not contain text.\n\n\nParameters\n\n\n\n\ntext\n  \n\n\n\n\ndoubleClick\n\n\nPerforms a double-click on an element matched by link|button|label|CSS or XPath.\nContext can be specified as second parameter to narrow search.\n\n\nI.doubleClick('Edit');\nI.doubleClick('Edit', '.actions');\nI.doubleClick({css: 'button.accept'});\nI.doubleClick('.btn.edit');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\ncontext\n  \n\n\n\n\ndragAndDrop\n\n\nDrag an item to a destination element.\n\n\nI.dragAndDrop('#dragHandle', '#container');\n\n\n\n\nParameters\n\n\n\n\nsrcElement\n  \n\n\ndestElement\n  \n\n\n\n\nexecuteAsyncScript\n\n\nExecutes async script on page.\nProvided function should execute a passed callback (as first argument) to signal it is finished.\n\n\nParameters\n\n\n\n\nfn\n  \n\n\n\n\nexecuteScript\n\n\nExecutes sync script on a page.\nPass arguments to function as additional parameters.\nWill return execution result to a test.\nIn this case you should use generator and yield to receive results.\n\n\nParameters\n\n\n\n\nfn\n  \n\n\n\n\nfillField\n\n\nFills a text field or textarea, after clearing its value, with the given string.\nField is located by name, label, CSS, or XPath.\n\n\n// by label\nI.fillField('Email', 'hello@world.com');\n// by name\nI.fillField('password', '123456');\n// by CSS\nI.fillField('form#login input[name=username]', 'John');\n// or by strict locator\nI.fillField({css: 'form#login input[name=username]'}, 'John');\n\n\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\nvalue\n  \n\n\n\n\ngrabAttributeFrom\n\n\nRetrieves an attribute from an element located by CSS or XPath and returns it to test.\nResumes test execution, so \nshould be used inside a generator with \nyield\n operator.\n\n\nlet hint = yield I.grabAttributeFrom('#tooltip', 'title');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  element located by CSS|XPath|strict locator\n\n\nattr\n  \n\n\n\n\ngrabCookie\n\n\nGets a cookie object by name\nResumes test execution, so \nshould be used inside a generator with \nyield\n operator.\n\n\nlet cookie = I.grabCookie('auth');\nassert(cookie.value, '123456');\n\n\n\n\nParameters\n\n\n\n\nname\n  \n\n\n\n\ngrabHTMLFrom\n\n\nRetrieves the innerHTML from an element located by CSS or XPath and returns it to test.\nResumes test execution, so \nshould be used inside a generator with \nyield\n operator.\n\n\nlet postHTML = yield I.grabHTMLFrom('#post');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\n\n\ngrabTextFrom\n\n\nRetrieves a text from an element located by CSS or XPath and returns it to test.\nResumes test execution, so \nshould be used inside a generator with \nyield\n operator.\n\n\nlet pin = yield I.grabTextFrom('#pin');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  element located by CSS|XPath|strict locator\n\n\n\n\ngrabTitle\n\n\nRetrieves a page title and returns it to test.\nResumes test execution, so \nshould be used inside a generator with \nyield\n operator.\n\n\nlet title = yield I.grabTitle();\n\n\n\n\ngrabValueFrom\n\n\nRetrieves a value from a form element located by CSS or XPath and returns it to test.\nResumes test execution, so \nshould be used inside a generator with \nyield\n operator.\n\n\nlet email = yield I.grabValueFrom('input[name=email]');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  field located by label|name|CSS|XPath|strict locator\n\n\n\n\nmoveCursorTo\n\n\nMoves cursor to element matched by locator.\nExtra shift can be set with offsetX and offsetY options\n\n\nI.moveCursorTo('.tooltip');\nI.moveCursorTo('#submit', 5,5);\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\noffsetX\n  \n\n\noffsetY\n  \n\n\n\n\npressKey\n\n\nPresses a key on a focused element.\nSpeical keys like 'Enter', 'Control', \netc\n\nwill be replaced with corresponding unicode.\nIf modifier key is used (Control, Command, Alt, Shift) in array, it will be released afterwards.\n\n\nI.pressKey('Enter');\nI.pressKey(['Control','a']);\n\n\n\n\nParameters\n\n\n\n\nkey\n  To make combinations with modifier and mouse clicks (like Ctrl+Click) press a modifier, click, then release it.\njs\n    I.pressKey('Control');\n    I.click('#someelement');\n    I.pressKey('Control');\n\n\n\n\nresizeWindow\n\n\nResize the current window to provided width and height.\nFirst parameter can be set to \nmaximize\n\n\nParameters\n\n\n\n\nwidth\n  or \nmaximize\n\n\nheight\n  \n\n\n\n\nrightClick\n\n\nPerforms right click on an element matched by CSS or XPath.\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\n\n\nsaveScreenshot\n\n\nSaves a screenshot to ouput folder (set in codecept.json).\nFilename is relative to output folder.\n\n\nI.saveScreenshot('debug.png');\n\n\n\n\nParameters\n\n\n\n\nfileName\n  \n\n\n\n\nscrollTo\n\n\nScrolls to element matched by locator.\nExtra shift can be set with offsetX and offsetY options\n\n\nI.scrollTo('footer');\nI.scrollTo('#submit', 5,5);\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\noffsetX\n  \n\n\noffsetY\n  \n\n\n\n\nsee\n\n\nChecks that a page contains a visible text.\nUse context parameter to narrow down the search.\n\n\nI.see('Welcome'); // text welcome on a page\nI.see('Welcome', '.content'); // text inside .content div\nI.see('Register', {css: 'form.register'}); // use strict locator\n\n\n\n\nParameters\n\n\n\n\ntext\n  expected on page\n\n\ncontext\n  (optional) element located by CSS|Xpath|strict locator in which to search for text\n\n\n\n\nseeCheckboxIsChecked\n\n\nVerifies that the specified checkbox is checked.\n\n\nI.seeCheckboxIsChecked('Agree');\nI.seeCheckboxIsChecked('#agree'); // I suppose user agreed to terms\nI.seeCheckboxIsChecked({css: '#signup_form input[type=checkbox]'});\n\n\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\n\n\nseeCookie\n\n\nChecks that cookie with given name exists.\n\n\nI.seeCookie('Auth');\n\n\n\n\nParameters\n\n\n\n\nname\n  \n\n\n\n\nseeCurrentUrlEquals\n\n\nChecks that current url is equal to provided one.\nIf a relative url provided, a configured url will be prepended to it.\nSo both examples will work:\n\n\nI.seeCurrentUrlEquals('/register');\nI.seeCurrentUrlEquals('http://my.site.com/register');\n\n\n\n\nParameters\n\n\n\n\nurl\n  \n\n\n\n\nseeElement\n\n\nChecks that a given Element is visible\nElement is located by CSS or XPath.\n\n\nI.seeElement('#modal');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  located by CSS|XPath|strict locator\n\n\n\n\nseeElementInDOM\n\n\nChecks that a given Element is present in the DOM\nElement is located by CSS or XPath.\n\n\nI.seeElementInDOM('#modal');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  located by CSS|XPath|strict locator\n\n\n\n\nseeInCurrentUrl\n\n\nChecks that current url contains a provided fragment.\n\n\nI.seeInCurrentUrl('/register'); // we are on registration page\n\n\n\n\nParameters\n\n\n\n\nurl\n  \n\n\n\n\nseeInField\n\n\nChecks that the given input field or textarea equals to given value.\nFor fuzzy locators, fields are matched by label text, the \"name\" attribute, CSS, and XPath.\n\n\nI.seeInField('Username', 'davert');\nI.seeInField({css: 'form textarea'},'Type your comment here');\nI.seeInField('form input[type=hidden]','hidden_value');\nI.seeInField('#searchform input','Search');\n\n\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\nvalue\n  \n\n\n\n\nseeInPopup\n\n\nChecks that the active JavaScript popup, as created by \nwindow.alert|window.confirm|window.prompt\n, contains the given string.\n\n\nParameters\n\n\n\n\ntext\n  \n\n\n\n\nseeInSource\n\n\nChecks that the current page contains the given string in its raw source code.\n\n\nI.seeInSource('\nh1\nGreen eggs \namp; ham\n/h1\n');\n\n\n\n\nParameters\n\n\n\n\ntext\n  \n\n\n\n\nseeInTitle\n\n\nChecks that title contains text.\n\n\nParameters\n\n\n\n\ntext\n  \n\n\n\n\nseeNumberOfElements\n\n\nasserts that an element appears a given number of times in the DOM\nElement is located by label or name or CSS or XPath.\n\n\nI.seeNumberOfElements('#submitBtn', 1);\n\n\n\n\nParameters\n\n\n\n\nselector\n  \n\n\nnum\n  \n\n\n\n\nselectOption\n\n\nSelects an option in a drop-down select.\nField is searched by label | name | CSS | XPath.\nOption is selected by visible text or by value.\n\n\nI.selectOption('Choose Plan', 'Monthly'); // select by label\nI.selectOption('subscription', 'Monthly'); // match option by text\nI.selectOption('subscription', '0'); // or by value\nI.selectOption('//form/select[@name=account]','Premium');\nI.selectOption('form select[name=account]', 'Premium');\nI.selectOption({css: 'form select[name=account]'}, 'Premium');\n\n\n\n\nProvide an array for the second argument to select multiple options.\n\n\nI.selectOption('Which OS do you use?', ['Android', 'iOS']);\n\n\n\n\nParameters\n\n\n\n\nselect\n  field located by label|name|CSS|XPath|strict locator\n\n\noption\n  \n\n\n\n\nsetCookie\n\n\nSets a cookie\n\n\nI.setCookie({name: 'auth', value: true});\n\n\n\n\nParameters\n\n\n\n\ncookie\n  Uses Selenium's JSON \ncookie format\n.\n\n\n\n\nswitchTo\n\n\nSwitches frame or in case of null locator reverts to parent.\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\n\n\nwait\n\n\nPauses execution for a number of seconds.\n\n\nI.wait(2); // wait 2 secs\n\n\n\n\nParameters\n\n\n\n\nsec\n  \n\n\n\n\nwaitForElement\n\n\nWaits for element to be present on page (by default waits for 1sec).\nElement can be located by CSS or XPath.\n\n\nI.waitForElement('.btn.continue');\nI.waitForElement('.btn.continue', 5); // wait for 5 secs\n\n\n\n\nParameters\n\n\n\n\nlocator\n  element located by CSS|XPath|strict locator\n\n\nsec\n  time seconds to wait, 1 by default\n\n\n\n\nwaitForEnabled\n\n\nWaits for element to become enabled (by default waits for 1sec).\nElement can be located by CSS or XPath.\n\n\nParameters\n\n\n\n\nlocator\n  element located by CSS|XPath|strict locator\n\n\nsec\n  time seconds to wait, 1 by default\n\n\n\n\nwaitForText\n\n\nWaits for a text to appear (by default waits for 1sec).\nElement can be located by CSS or XPath.\nNarrow down search results by providing context.\n\n\nI.waitForText('Thank you, form has been submitted');\nI.waitForText('Thank you, form has been submitted', 5, '#modal');\n\n\n\n\nParameters\n\n\n\n\ntext\n  to wait for\n\n\nsec\n  seconds to wait\n\n\ncontext\n  element located by CSS|XPath|strict locator\n\n\n\n\nwaitForVisible\n\n\nWaits for an element to become visible on a page (by default waits for 1sec).\nElement can be located by CSS or XPath.\n\n\nI.waitForVisible('#popup');\n\n\n\nParameters\n\n\n\n\nlocator\n  element located by CSS|XPath|strict locator\n\n\nsec\n  time seconds to wait, 1 by default\n\n\n\n\nwaitToHide\n\n\nWaits for an element to become invisible on a page (by default waits for 1sec).\nElement can be located by CSS or XPath.\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\nsec\n  \n\n\n\n\nwaitUntil\n\n\nWaits for a function to return true (waits for 1sec by default).\n\n\nParameters\n\n\n\n\nfn\n  \n\n\nsec", 
            "title": "WebDriverIO"
        }, 
        {
            "location": "/helpers/WebDriverIO/#webdriverio", 
            "text": "WebDriverIO helper which wraps  webdriverio  library to\nmanipulate browser using Selenium WebDriver or PhantomJS.  Selenium Installation   Download  Selenium Server  Launch the daemon:  java -jar selenium-server-standalone-2.xx.xxx.jar   PhantomJS Installation  PhantomJS is a headless alternative to Selenium Server that implements the WebDriver protocol.\nIt allows you to run Selenium tests on a server without a GUI installed.   Download  PhantomJS  Run PhantomJS in WebDriver mode:  phantomjs --webdriver=4444   Configuration  This helper should be configured in codecept.json   url  - base url of website to be tested  browser  - browser in which perform testing  restart  - restart browser between tests (default: true), if set to false cookies will be cleaned but browser window will be kept.  windowSize : (optional) default window size. Set to  maximize  or a dimension in the format  640x480 .  waitForTimeout : (optional) sets default wait time in  ms  for all  wait*  functions. 1000 by default;  desiredCapabilities : Selenium capabilities   Additional configuration params can be used from  http://webdriver.io/guide/getstarted/configuration.html  Connect through proxy  CodeceptJS also provides flexible options when you want to execute tests to Selenium servers through proxy. You will\nneed to update the  helpers.WebDriverIO.desiredCapabilities.proxy  key.  {\n     helpers : {\n         WebDriverIO : {\n             desiredCapabilities : {\n                 proxy : {\n                     proxyType :  manual|pac ,\n                     proxyAutoconfigUrl :  URL TO PAC FILE ,\n                     httpProxy :  PROXY SERVER ,\n                     sslProxy :  PROXY SERVER ,\n                     ftpProxy :  PROXY SERVER ,\n                     socksProxy :  PROXY SERVER ,\n                     socksUsername :  USERNAME ,\n                     socksPassword :  PASSWORD ,\n                     noProxy :  BYPASS ADDRESSES \n                }\n            }\n        }\n    }\n}  For example,  {\n     helpers : {\n         WebDriverIO : {\n             desiredCapabilities : {\n                 proxy : {\n                     proxyType :  manual ,\n                     httpProxy :  http://corporate.proxy:8080 ,\n                     socksUsername :  codeceptjs ,\n                     socksPassword :  secret ,\n                     noProxy :  127.0.0.1,localhost \n                }\n            }\n        }\n    }\n}  Please refer to  Selenium - Proxy Object  for more information.  Cloud Providers  WebDriverIO makes it possible to execute tests against services like  Sauce Labs   BrowserStack   TestingBot \nCheck out their documentation on  available parameters  Connecting to  BrowserStack  and  Sauce Labs  is simple. All you need to do\nis set the  user  and  key  parameters. WebDriverIO authomatically know which\nservice provider to connect to.  {\n     helpers :{\n         WebDriverIO : {\n             url :  YOUR_DESIERED_HOST ,\n             user :  YOUR_BROWSERSTACK_USER ,\n             key :  YOUR_BROWSERSTACK_KEY ,\n             desiredCapabilities : {\n                 browserName :  chrome ,\n\n                // only set this if you're using BrowserStackLocal to test a local domain\n                //  browserstack.local : true,\n\n                // set this option to tell browserstack to provide addition debugging info\n                //  browserstack.debug : true,\n            }\n        }\n    }\n}  Multiremote Capabilities  This is a work in progress but you can control two browsers at a time right out of the box.\nIndividual control is something that is planned for a later version.  Here is the  webdriverio docs  on the subject  {\n     helpers : {\n         WebDriverIO : {\n             multiremote : {\n                 MyChrome : {\n                     desiredCapabilities : {\n                         browserName :  chrome \n                     }\n                },\n                 MyFirefox : {\n                    desiredCapabilities : {\n                        browserName :  firefox \n                   }\n                }\n            }\n        }\n    }\n}", 
            "title": "WebDriverIO"
        }, 
        {
            "location": "/helpers/WebDriverIO/#access-from-helpers", 
            "text": "Receive a WebDriverIO client from a custom helper by accessing  browser  property:  this.helpers['WebDriverIO'].browser  Parameters   config", 
            "title": "Access From Helpers"
        }, 
        {
            "location": "/helpers/WebDriverIO/#_locate", 
            "text": "Get elements by different locator types, including strict locator\nShould be used in custom helpers:  this.helpers['WebDriverIO']._locate({name: 'password'}).then //...  Parameters   locator", 
            "title": "_locate"
        }, 
        {
            "location": "/helpers/WebDriverIO/#_locatecheckable", 
            "text": "Find a checkbox by providing human readable text:  this.helpers['WebDriverIO']._locateCheckable('I agree with terms and conditions').then // ...  Parameters   locator", 
            "title": "_locateCheckable"
        }, 
        {
            "location": "/helpers/WebDriverIO/#_locateclickable", 
            "text": "Find a clickable element by providing human readable text:  this.helpers['WebDriverIO']._locateClickable('Next page').then // ...  Parameters   locator", 
            "title": "_locateClickable"
        }, 
        {
            "location": "/helpers/WebDriverIO/#_locatefields", 
            "text": "Find field elements by providing human readable text:  this.helpers['WebDriverIO']._locateFields('Your email').then // ...  Parameters   locator", 
            "title": "_locateFields"
        }, 
        {
            "location": "/helpers/WebDriverIO/#acceptpopup", 
            "text": "Accepts the active JavaScript native popup window, as created by window.alert|window.confirm|window.prompt.\nDon't confuse popups with modal windows, as created by  various libraries .", 
            "title": "acceptPopup"
        }, 
        {
            "location": "/helpers/WebDriverIO/#amonpage", 
            "text": "Opens a web page in a browser. Requires relative or absolute url.\nIf url starts with  / , opens a web page of a site defined in  url  config parameter.  I.amOnPage('/'); // opens main page of website\nI.amOnPage('https://github.com'); // opens github\nI.amOnPage('/login'); // opens a login page  Parameters   url   url path or global url", 
            "title": "amOnPage"
        }, 
        {
            "location": "/helpers/WebDriverIO/#appendfield", 
            "text": "Appends text to a input field or textarea.\nField is located by name, label, CSS or XPath  I.appendField('#myTextField', 'appended');  Parameters   field   located by label|name|CSS|XPath|strict locator  value   text value", 
            "title": "appendField"
        }, 
        {
            "location": "/helpers/WebDriverIO/#attachfile", 
            "text": "Attaches a file to element located by label, name, CSS or XPath\nPath to file is relative current codecept directory (where codecept.json is located).\nFile will be uploaded to remove system (if tests are running remotely).  I.attachFile('Avatar', 'data/avatar.jpg');\nI.attachFile('form input[name=avatar]', 'data/avatar.jpg');  Parameters   locator   field located by label|name|CSS|XPath|strict locator  pathToFile   local file path relative to codecept.json config file", 
            "title": "attachFile"
        }, 
        {
            "location": "/helpers/WebDriverIO/#cancelpopup", 
            "text": "Dismisses the active JavaScript popup, as created by window.alert|window.confirm|window.prompt.", 
            "title": "cancelPopup"
        }, 
        {
            "location": "/helpers/WebDriverIO/#checkoption", 
            "text": "Selects a checkbox or radio button.\nElement is located by label or name or CSS or XPath.  The second parameter is a context (CSS or XPath locator) to narrow the search.  I.checkOption('#agree');\nI.checkOption('I Agree to Terms and Conditions');\nI.checkOption('agree', '//form');  Parameters     -    field   checkbox located by label  name  CSS", 
            "title": "checkOption"
        }, 
        {
            "location": "/helpers/WebDriverIO/#clearcookie", 
            "text": "Clears a cookie by name,\nif none provided clears all cookies  I.clearCookie();\nI.clearCookie('test');  Parameters   cookie   (optional)", 
            "title": "clearCookie"
        }, 
        {
            "location": "/helpers/WebDriverIO/#clearfield", 
            "text": "Clears a  textarea  or text  input  element's value.  I.clearField('#email');  Parameters   locator   field located by label|name|CSS|XPath|strict locator", 
            "title": "clearField"
        }, 
        {
            "location": "/helpers/WebDriverIO/#click", 
            "text": "Perform a click on a link or a button, given by a locator.\nIf a fuzzy locator is given, the page will be searched for a button, link, or image matching the locator string.\nFor buttons, the \"value\" attribute, \"name\" attribute, and inner text are searched. For links, the link text is searched.\nFor images, the \"alt\" attribute and inner text of any parent links are searched.  The second parameter is a context (CSS or XPath locator) to narrow the search.  // simple link\nI.click('Logout');\n// button of form\nI.click('Submit');\n// CSS button\nI.click('#form input[type=submit]');\n// XPath\nI.click('//form/*[@type=submit]');\n// link in context\nI.click('Logout', '#nav');\n// using strict locator\nI.click({css: 'nav a.login'});  Parameters     -    locator   clickable link or button located by text, or any element located by CSS  XPath  strict locator", 
            "title": "click"
        }, 
        {
            "location": "/helpers/WebDriverIO/#dontsee", 
            "text": "Opposite to  see . Checks that a text is not present on a page.\nUse context parameter to narrow down the search.  I.dontSee('Login'); // assume we are already logged in  Parameters   text   is not present  context   (optional) element located by CSS|XPath|strict locator in which to perfrom search", 
            "title": "dontSee"
        }, 
        {
            "location": "/helpers/WebDriverIO/#dontseecheckboxischecked", 
            "text": "Verifies that the specified checkbox is not checked.  Parameters   field   located by label|name|CSS|XPath|strict locator", 
            "title": "dontSeeCheckboxIsChecked"
        }, 
        {
            "location": "/helpers/WebDriverIO/#dontseecookie", 
            "text": "Checks that cookie with given name does not exist.  Parameters   name", 
            "title": "dontSeeCookie"
        }, 
        {
            "location": "/helpers/WebDriverIO/#dontseecurrenturlequals", 
            "text": "Checks that current url is not equal to provided one.\nIf a relative url provided, a configured url will be prepended to it.  Parameters   url", 
            "title": "dontSeeCurrentUrlEquals"
        }, 
        {
            "location": "/helpers/WebDriverIO/#dontseeelement", 
            "text": "Opposite to  seeElement . Checks that element is not visible  Parameters   locator   located by CSS|XPath|Strict locator", 
            "title": "dontSeeElement"
        }, 
        {
            "location": "/helpers/WebDriverIO/#dontseeelementindom", 
            "text": "Opposite to  seeElementInDOM . Checks that element is not on page.  Parameters   locator   located by CSS|XPath|Strict locator", 
            "title": "dontSeeElementInDOM"
        }, 
        {
            "location": "/helpers/WebDriverIO/#dontseeincurrenturl", 
            "text": "Checks that current url does not contain a provided fragment.  Parameters   url", 
            "title": "dontSeeInCurrentUrl"
        }, 
        {
            "location": "/helpers/WebDriverIO/#dontseeinfield", 
            "text": "Checks that value of input field or textare doesn't equal to given value\nOpposite to  seeInField .  Parameters   field   located by label|name|CSS|XPath|strict locator  value   is not expected to be a field value", 
            "title": "dontSeeInField"
        }, 
        {
            "location": "/helpers/WebDriverIO/#dontseeinsource", 
            "text": "Checks that the current page contains the given string in its raw source code  Parameters   text", 
            "title": "dontSeeInSource"
        }, 
        {
            "location": "/helpers/WebDriverIO/#dontseeintitle", 
            "text": "Checks that title does not contain text.  Parameters   text", 
            "title": "dontSeeInTitle"
        }, 
        {
            "location": "/helpers/WebDriverIO/#doubleclick", 
            "text": "Performs a double-click on an element matched by link|button|label|CSS or XPath.\nContext can be specified as second parameter to narrow search.  I.doubleClick('Edit');\nI.doubleClick('Edit', '.actions');\nI.doubleClick({css: 'button.accept'});\nI.doubleClick('.btn.edit');  Parameters   locator     context", 
            "title": "doubleClick"
        }, 
        {
            "location": "/helpers/WebDriverIO/#draganddrop", 
            "text": "Drag an item to a destination element.  I.dragAndDrop('#dragHandle', '#container');  Parameters   srcElement     destElement", 
            "title": "dragAndDrop"
        }, 
        {
            "location": "/helpers/WebDriverIO/#executeasyncscript", 
            "text": "Executes async script on page.\nProvided function should execute a passed callback (as first argument) to signal it is finished.  Parameters   fn", 
            "title": "executeAsyncScript"
        }, 
        {
            "location": "/helpers/WebDriverIO/#executescript", 
            "text": "Executes sync script on a page.\nPass arguments to function as additional parameters.\nWill return execution result to a test.\nIn this case you should use generator and yield to receive results.  Parameters   fn", 
            "title": "executeScript"
        }, 
        {
            "location": "/helpers/WebDriverIO/#fillfield", 
            "text": "Fills a text field or textarea, after clearing its value, with the given string.\nField is located by name, label, CSS, or XPath.  // by label\nI.fillField('Email', 'hello@world.com');\n// by name\nI.fillField('password', '123456');\n// by CSS\nI.fillField('form#login input[name=username]', 'John');\n// or by strict locator\nI.fillField({css: 'form#login input[name=username]'}, 'John');  Parameters   field   located by label|name|CSS|XPath|strict locator  value", 
            "title": "fillField"
        }, 
        {
            "location": "/helpers/WebDriverIO/#grabattributefrom", 
            "text": "Retrieves an attribute from an element located by CSS or XPath and returns it to test.\nResumes test execution, so  should be used inside a generator with  yield  operator.  let hint = yield I.grabAttributeFrom('#tooltip', 'title');  Parameters   locator   element located by CSS|XPath|strict locator  attr", 
            "title": "grabAttributeFrom"
        }, 
        {
            "location": "/helpers/WebDriverIO/#grabcookie", 
            "text": "Gets a cookie object by name\nResumes test execution, so  should be used inside a generator with  yield  operator.  let cookie = I.grabCookie('auth');\nassert(cookie.value, '123456');  Parameters   name", 
            "title": "grabCookie"
        }, 
        {
            "location": "/helpers/WebDriverIO/#grabhtmlfrom", 
            "text": "Retrieves the innerHTML from an element located by CSS or XPath and returns it to test.\nResumes test execution, so  should be used inside a generator with  yield  operator.  let postHTML = yield I.grabHTMLFrom('#post');  Parameters   locator", 
            "title": "grabHTMLFrom"
        }, 
        {
            "location": "/helpers/WebDriverIO/#grabtextfrom", 
            "text": "Retrieves a text from an element located by CSS or XPath and returns it to test.\nResumes test execution, so  should be used inside a generator with  yield  operator.  let pin = yield I.grabTextFrom('#pin');  Parameters   locator   element located by CSS|XPath|strict locator", 
            "title": "grabTextFrom"
        }, 
        {
            "location": "/helpers/WebDriverIO/#grabtitle", 
            "text": "Retrieves a page title and returns it to test.\nResumes test execution, so  should be used inside a generator with  yield  operator.  let title = yield I.grabTitle();", 
            "title": "grabTitle"
        }, 
        {
            "location": "/helpers/WebDriverIO/#grabvaluefrom", 
            "text": "Retrieves a value from a form element located by CSS or XPath and returns it to test.\nResumes test execution, so  should be used inside a generator with  yield  operator.  let email = yield I.grabValueFrom('input[name=email]');  Parameters   locator   field located by label|name|CSS|XPath|strict locator", 
            "title": "grabValueFrom"
        }, 
        {
            "location": "/helpers/WebDriverIO/#movecursorto", 
            "text": "Moves cursor to element matched by locator.\nExtra shift can be set with offsetX and offsetY options  I.moveCursorTo('.tooltip');\nI.moveCursorTo('#submit', 5,5);  Parameters   locator     offsetX     offsetY", 
            "title": "moveCursorTo"
        }, 
        {
            "location": "/helpers/WebDriverIO/#presskey", 
            "text": "Presses a key on a focused element.\nSpeical keys like 'Enter', 'Control',  etc \nwill be replaced with corresponding unicode.\nIf modifier key is used (Control, Command, Alt, Shift) in array, it will be released afterwards.  I.pressKey('Enter');\nI.pressKey(['Control','a']);  Parameters   key   To make combinations with modifier and mouse clicks (like Ctrl+Click) press a modifier, click, then release it. js\n    I.pressKey('Control');\n    I.click('#someelement');\n    I.pressKey('Control');", 
            "title": "pressKey"
        }, 
        {
            "location": "/helpers/WebDriverIO/#resizewindow", 
            "text": "Resize the current window to provided width and height.\nFirst parameter can be set to  maximize  Parameters   width   or  maximize  height", 
            "title": "resizeWindow"
        }, 
        {
            "location": "/helpers/WebDriverIO/#rightclick", 
            "text": "Performs right click on an element matched by CSS or XPath.  Parameters   locator", 
            "title": "rightClick"
        }, 
        {
            "location": "/helpers/WebDriverIO/#savescreenshot", 
            "text": "Saves a screenshot to ouput folder (set in codecept.json).\nFilename is relative to output folder.  I.saveScreenshot('debug.png');  Parameters   fileName", 
            "title": "saveScreenshot"
        }, 
        {
            "location": "/helpers/WebDriverIO/#scrollto", 
            "text": "Scrolls to element matched by locator.\nExtra shift can be set with offsetX and offsetY options  I.scrollTo('footer');\nI.scrollTo('#submit', 5,5);  Parameters   locator     offsetX     offsetY", 
            "title": "scrollTo"
        }, 
        {
            "location": "/helpers/WebDriverIO/#see", 
            "text": "Checks that a page contains a visible text.\nUse context parameter to narrow down the search.  I.see('Welcome'); // text welcome on a page\nI.see('Welcome', '.content'); // text inside .content div\nI.see('Register', {css: 'form.register'}); // use strict locator  Parameters   text   expected on page  context   (optional) element located by CSS|Xpath|strict locator in which to search for text", 
            "title": "see"
        }, 
        {
            "location": "/helpers/WebDriverIO/#seecheckboxischecked", 
            "text": "Verifies that the specified checkbox is checked.  I.seeCheckboxIsChecked('Agree');\nI.seeCheckboxIsChecked('#agree'); // I suppose user agreed to terms\nI.seeCheckboxIsChecked({css: '#signup_form input[type=checkbox]'});  Parameters   field   located by label|name|CSS|XPath|strict locator", 
            "title": "seeCheckboxIsChecked"
        }, 
        {
            "location": "/helpers/WebDriverIO/#seecookie", 
            "text": "Checks that cookie with given name exists.  I.seeCookie('Auth');  Parameters   name", 
            "title": "seeCookie"
        }, 
        {
            "location": "/helpers/WebDriverIO/#seecurrenturlequals", 
            "text": "Checks that current url is equal to provided one.\nIf a relative url provided, a configured url will be prepended to it.\nSo both examples will work:  I.seeCurrentUrlEquals('/register');\nI.seeCurrentUrlEquals('http://my.site.com/register');  Parameters   url", 
            "title": "seeCurrentUrlEquals"
        }, 
        {
            "location": "/helpers/WebDriverIO/#seeelement", 
            "text": "Checks that a given Element is visible\nElement is located by CSS or XPath.  I.seeElement('#modal');  Parameters   locator   located by CSS|XPath|strict locator", 
            "title": "seeElement"
        }, 
        {
            "location": "/helpers/WebDriverIO/#seeelementindom", 
            "text": "Checks that a given Element is present in the DOM\nElement is located by CSS or XPath.  I.seeElementInDOM('#modal');  Parameters   locator   located by CSS|XPath|strict locator", 
            "title": "seeElementInDOM"
        }, 
        {
            "location": "/helpers/WebDriverIO/#seeincurrenturl", 
            "text": "Checks that current url contains a provided fragment.  I.seeInCurrentUrl('/register'); // we are on registration page  Parameters   url", 
            "title": "seeInCurrentUrl"
        }, 
        {
            "location": "/helpers/WebDriverIO/#seeinfield", 
            "text": "Checks that the given input field or textarea equals to given value.\nFor fuzzy locators, fields are matched by label text, the \"name\" attribute, CSS, and XPath.  I.seeInField('Username', 'davert');\nI.seeInField({css: 'form textarea'},'Type your comment here');\nI.seeInField('form input[type=hidden]','hidden_value');\nI.seeInField('#searchform input','Search');  Parameters   field   located by label|name|CSS|XPath|strict locator  value", 
            "title": "seeInField"
        }, 
        {
            "location": "/helpers/WebDriverIO/#seeinpopup", 
            "text": "Checks that the active JavaScript popup, as created by  window.alert|window.confirm|window.prompt , contains the given string.  Parameters   text", 
            "title": "seeInPopup"
        }, 
        {
            "location": "/helpers/WebDriverIO/#seeinsource", 
            "text": "Checks that the current page contains the given string in its raw source code.  I.seeInSource(' h1 Green eggs  amp; ham /h1 ');  Parameters   text", 
            "title": "seeInSource"
        }, 
        {
            "location": "/helpers/WebDriverIO/#seeintitle", 
            "text": "Checks that title contains text.  Parameters   text", 
            "title": "seeInTitle"
        }, 
        {
            "location": "/helpers/WebDriverIO/#seenumberofelements", 
            "text": "asserts that an element appears a given number of times in the DOM\nElement is located by label or name or CSS or XPath.  I.seeNumberOfElements('#submitBtn', 1);  Parameters   selector     num", 
            "title": "seeNumberOfElements"
        }, 
        {
            "location": "/helpers/WebDriverIO/#selectoption", 
            "text": "Selects an option in a drop-down select.\nField is searched by label | name | CSS | XPath.\nOption is selected by visible text or by value.  I.selectOption('Choose Plan', 'Monthly'); // select by label\nI.selectOption('subscription', 'Monthly'); // match option by text\nI.selectOption('subscription', '0'); // or by value\nI.selectOption('//form/select[@name=account]','Premium');\nI.selectOption('form select[name=account]', 'Premium');\nI.selectOption({css: 'form select[name=account]'}, 'Premium');  Provide an array for the second argument to select multiple options.  I.selectOption('Which OS do you use?', ['Android', 'iOS']);  Parameters   select   field located by label|name|CSS|XPath|strict locator  option", 
            "title": "selectOption"
        }, 
        {
            "location": "/helpers/WebDriverIO/#setcookie", 
            "text": "Sets a cookie  I.setCookie({name: 'auth', value: true});  Parameters   cookie   Uses Selenium's JSON  cookie format .", 
            "title": "setCookie"
        }, 
        {
            "location": "/helpers/WebDriverIO/#switchto", 
            "text": "Switches frame or in case of null locator reverts to parent.  Parameters   locator", 
            "title": "switchTo"
        }, 
        {
            "location": "/helpers/WebDriverIO/#wait", 
            "text": "Pauses execution for a number of seconds.  I.wait(2); // wait 2 secs  Parameters   sec", 
            "title": "wait"
        }, 
        {
            "location": "/helpers/WebDriverIO/#waitforelement", 
            "text": "Waits for element to be present on page (by default waits for 1sec).\nElement can be located by CSS or XPath.  I.waitForElement('.btn.continue');\nI.waitForElement('.btn.continue', 5); // wait for 5 secs  Parameters   locator   element located by CSS|XPath|strict locator  sec   time seconds to wait, 1 by default", 
            "title": "waitForElement"
        }, 
        {
            "location": "/helpers/WebDriverIO/#waitforenabled", 
            "text": "Waits for element to become enabled (by default waits for 1sec).\nElement can be located by CSS or XPath.  Parameters   locator   element located by CSS|XPath|strict locator  sec   time seconds to wait, 1 by default", 
            "title": "waitForEnabled"
        }, 
        {
            "location": "/helpers/WebDriverIO/#waitfortext", 
            "text": "Waits for a text to appear (by default waits for 1sec).\nElement can be located by CSS or XPath.\nNarrow down search results by providing context.  I.waitForText('Thank you, form has been submitted');\nI.waitForText('Thank you, form has been submitted', 5, '#modal');  Parameters   text   to wait for  sec   seconds to wait  context   element located by CSS|XPath|strict locator", 
            "title": "waitForText"
        }, 
        {
            "location": "/helpers/WebDriverIO/#waitforvisible", 
            "text": "Waits for an element to become visible on a page (by default waits for 1sec).\nElement can be located by CSS or XPath.  I.waitForVisible('#popup');  Parameters   locator   element located by CSS|XPath|strict locator  sec   time seconds to wait, 1 by default", 
            "title": "waitForVisible"
        }, 
        {
            "location": "/helpers/WebDriverIO/#waittohide", 
            "text": "Waits for an element to become invisible on a page (by default waits for 1sec).\nElement can be located by CSS or XPath.  Parameters   locator     sec", 
            "title": "waitToHide"
        }, 
        {
            "location": "/helpers/WebDriverIO/#waituntil", 
            "text": "Waits for a function to return true (waits for 1sec by default).  Parameters   fn     sec", 
            "title": "waitUntil"
        }, 
        {
            "location": "/helpers/Protractor/", 
            "text": "Protractor\n\n\nProtractor helper is based on \nProtractor library\n and used for testing AngularJS applications.\n\n\nSelenium Installation\n\n\n\n\nDownload \nSelenium Server\n\n\nLaunch the daemon: \njava -jar selenium-server-standalone-2.xx.xxx.jar\n\n\n\n\nPhantomJS Installation\n\n\nPhantomJS is a headless alternative to Selenium Server that implements the WebDriver protocol.\nIt allows you to run Selenium tests on a server without a GUI installed.\n\n\n\n\nDownload \nPhantomJS\n\n\nRun PhantomJS in WebDriver mode: \nphantomjs --webdriver=4444\n\n\n\n\nConfiguration\n\n\nThis helper should be configured in codecept.json\n\n\n\n\nurl\n - base url of website to be tested\n\n\nbrowser\n - browser in which perform testing\n\n\ndriver\n - which protrator driver to use (local, direct, session, hosted, sauce, browserstack). By default set to 'hosted' which requires selenium server to be started.\n\n\nrestart\n - restart browser between tests (default: true), if set to false cookies will be cleaned but browser window will be kept.\n\n\nseleniumAddress\n - Selenium address to connect (default: \nhttp://localhost:4444/wd/hub\n)\n\n\nrootElement\n - Root element of AngularJS application (default: body)\n\n\ncapabilities\n: {} - list of \nDesired Capabilities\n\n\nproxy\n: set proxy settings\n\n\n\n\nother options are the same as in \nProtractor config\n.\n\n\nAccess From Helpers\n\n\nReceive a WebDriverIO client from a custom helper by accessing \nbrowser\n property:\n\n\nthis.helpers['Protractor'].browser\n\n\n\n\nParameters\n\n\n\n\nconfig\n  \n\n\n\n\n_locate\n\n\nGet elements by different locator types, including strict locator\nShould be used in custom helpers:\n\n\nthis.helpers['Protractor']._locate({model: 'newTodo'}).then //...\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\n\n\namInsideAngularApp\n\n\nEnters Angular mode (switched on by default)\nShould be used after \"amOutsideAngularApp\"\n\n\namOutsideAngularApp\n\n\nSwitch to non-Angular mode,\nstart using WebDriver instead of Protractor in this session\n\n\nhaveModule\n\n\nInjects Angular module.\n\n\nI.haveModule('modName', function() {\n  angular.module('modName', []).value('foo', 'bar');\n});\n\n\n\n\nParameters\n\n\n\n\nmodName\n  \n\n\nfn\n  \n\n\n\n\nmoveTo\n\n\nMoves to url\n\n\nParameters\n\n\n\n\npath\n  \n\n\n\n\nrefresh\n\n\nReloads page\n\n\nresetModule\n\n\nRemoves mocked Angular module. If modName not specified - clears all mock modules.\n\n\nI.resetModule(); // clears all\nI.resetModule('modName');\n\n\n\n\nParameters\n\n\n\n\nmodName\n  \n\n\n\n\nwaitForClickable\n\n\nWaits for element to become clickable for number of seconds.\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\nsec\n  \n\n\n\n\nwaitForElement\n\n\nWaits for element to be present on page (by default waits for 1sec).\nElement can be located by CSS or XPath.\n\n\nI.waitForElement('.btn.continue');\nI.waitForElement('.btn.continue', 5); // wait for 5 secs\n\n\n\n\nParameters\n\n\n\n\nlocator\n  element located by CSS|XPath|strict locator\n\n\nsec\n  time seconds to wait, 1 by default\n\n\n\n\nwaitForText\n\n\nWaits for a text to appear (by default waits for 1sec).\nElement can be located by CSS or XPath.\nNarrow down search results by providing context.\n\n\nI.waitForText('Thank you, form has been submitted');\nI.waitForText('Thank you, form has been submitted', 5, '#modal');\n\n\n\n\nParameters\n\n\n\n\ntext\n  to wait for\n\n\nsec\n  seconds to wait\n\n\ncontext\n  element located by CSS|XPath|strict locator\n\n\n\n\nwaitForVisible\n\n\nWaits for an element to become visible on a page (by default waits for 1sec).\nElement can be located by CSS or XPath.\n\n\nI.waitForVisible('#popup');\n\n\n\nParameters\n\n\n\n\nlocator\n  element located by CSS|XPath|strict locator\n\n\nsec\n  time seconds to wait, 1 by default\n\n\n\n\namOnPage\n\n\nOpens a web page in a browser. Requires relative or absolute url.\nIf url starts with \n/\n, opens a web page of a site defined in \nurl\n config parameter.\n\n\nI.amOnPage('/'); // opens main page of website\nI.amOnPage('https://github.com'); // opens github\nI.amOnPage('/login'); // opens a login page\n\n\n\n\nParameters\n\n\n\n\nurl\n  url path or global url\n\n\n\n\nappendField\n\n\nAppends text to a input field or textarea.\nField is located by name, label, CSS or XPath\n\n\nI.appendField('#myTextField', 'appended');\n\n\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\nvalue\n  text value\n\n\n\n\nattachFile\n\n\nAttaches a file to element located by label, name, CSS or XPath\nPath to file is relative current codecept directory (where codecept.json is located).\nFile will be uploaded to remove system (if tests are running remotely).\n\n\nI.attachFile('Avatar', 'data/avatar.jpg');\nI.attachFile('form input[name=avatar]', 'data/avatar.jpg');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  field located by label|name|CSS|XPath|strict locator\n\n\npathToFile\n  local file path relative to codecept.json config file\n\n\n\n\ncheckOption\n\n\nSelects a checkbox or radio button.\nElement is located by label or name or CSS or XPath.\n\n\nThe second parameter is a context (CSS or XPath locator) to narrow the search.\n\n\nI.checkOption('#agree');\nI.checkOption('I Agree to Terms and Conditions');\nI.checkOption('agree', '//form');\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\n-   \nfield\n  checkbox located by label\n\n\nname\n\n\nCSS\n\n\n\n\n\n\n\n\n\n\nclearCookie\n\n\nClears a cookie by name,\nif none provided clears all cookies\n\n\nI.clearCookie();\nI.clearCookie('test');\n\n\n\n\nParameters\n\n\n\n\ncookie\n  (optional)\n\n\n\n\nclick\n\n\nPerform a click on a link or a button, given by a locator.\nIf a fuzzy locator is given, the page will be searched for a button, link, or image matching the locator string.\nFor buttons, the \"value\" attribute, \"name\" attribute, and inner text are searched. For links, the link text is searched.\nFor images, the \"alt\" attribute and inner text of any parent links are searched.\n\n\nThe second parameter is a context (CSS or XPath locator) to narrow the search.\n\n\n// simple link\nI.click('Logout');\n// button of form\nI.click('Submit');\n// CSS button\nI.click('#form input[type=submit]');\n// XPath\nI.click('//form/*[@type=submit]');\n// link in context\nI.click('Logout', '#nav');\n// using strict locator\nI.click({css: 'nav a.login'});\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\n-   \nlocator\n  clickable link or button located by text, or any element located by CSS\n\n\nXPath\n\n\nstrict locator\n\n\n\n\n\n\n\n\n\n\ndontSee\n\n\nOpposite to \nsee\n. Checks that a text is not present on a page.\nUse context parameter to narrow down the search.\n\n\nI.dontSee('Login'); // assume we are already logged in\n\n\n\n\nParameters\n\n\n\n\ntext\n  is not present\n\n\ncontext\n  (optional) element located by CSS|XPath|strict locator in which to perfrom search\n\n\n\n\ndontSeeCheckboxIsChecked\n\n\nVerifies that the specified checkbox is not checked.\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\n\n\ndontSeeCookie\n\n\nChecks that cookie with given name does not exist.\n\n\nParameters\n\n\n\n\nname\n  \n\n\n\n\ndontSeeCurrentUrlEquals\n\n\nChecks that current url is not equal to provided one.\nIf a relative url provided, a configured url will be prepended to it.\n\n\nParameters\n\n\n\n\nurl\n  \n\n\n\n\ndontSeeElement\n\n\nOpposite to \nseeElement\n. Checks that element is not visible\n\n\nParameters\n\n\n\n\nlocator\n  located by CSS|XPath|Strict locator\n\n\n\n\ndontSeeInCurrentUrl\n\n\nChecks that current url does not contain a provided fragment.\n\n\nParameters\n\n\n\n\nurl\n  \n\n\n\n\ndontSeeInField\n\n\nChecks that value of input field or textare doesn't equal to given value\nOpposite to \nseeInField\n.\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\nvalue\n  is not expected to be a field value\n\n\n\n\ndontSeeInSource\n\n\nChecks that the current page contains the given string in its raw source code\n\n\nParameters\n\n\n\n\ntext\n  \n\n\n\n\ndontSeeInTitle\n\n\nChecks that title does not contain text.\n\n\nParameters\n\n\n\n\ntext\n  \n\n\n\n\nexecuteAsyncScript\n\n\nExecutes async script on page.\nProvided function should execute a passed callback (as first argument) to signal it is finished.\n\n\nParameters\n\n\n\n\nfn\n  \n\n\n\n\nexecuteScript\n\n\nExecutes sync script on a page.\nPass arguments to function as additional parameters.\nWill return execution result to a test.\nIn this case you should use generator and yield to receive results.\n\n\nParameters\n\n\n\n\nfn\n  \n\n\n\n\nfillField\n\n\nFills a text field or textarea, after clearing its value, with the given string.\nField is located by name, label, CSS, or XPath.\n\n\n// by label\nI.fillField('Email', 'hello@world.com');\n// by name\nI.fillField('password', '123456');\n// by CSS\nI.fillField('form#login input[name=username]', 'John');\n// or by strict locator\nI.fillField({css: 'form#login input[name=username]'}, 'John');\n\n\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\nvalue\n  \n\n\n\n\ngrabAttributeFrom\n\n\nRetrieves an attribute from an element located by CSS or XPath and returns it to test.\nResumes test execution, so \nshould be used inside a generator with \nyield\n operator.\n\n\nlet hint = yield I.grabAttributeFrom('#tooltip', 'title');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  element located by CSS|XPath|strict locator\n\n\nattr\n  \n\n\n\n\ngrabCookie\n\n\nGets a cookie object by name\nResumes test execution, so \nshould be used inside a generator with \nyield\n operator.\n\n\nlet cookie = I.grabCookie('auth');\nassert(cookie.value, '123456');\n\n\n\n\nParameters\n\n\n\n\nname\n  \n\n\n\n\ngrabTextFrom\n\n\nRetrieves a text from an element located by CSS or XPath and returns it to test.\nResumes test execution, so \nshould be used inside a generator with \nyield\n operator.\n\n\nlet pin = yield I.grabTextFrom('#pin');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  element located by CSS|XPath|strict locator\n\n\n\n\ngrabTitle\n\n\nRetrieves a page title and returns it to test.\nResumes test execution, so \nshould be used inside a generator with \nyield\n operator.\n\n\nlet title = yield I.grabTitle();\n\n\n\n\ngrabValueFrom\n\n\nRetrieves a value from a form element located by CSS or XPath and returns it to test.\nResumes test execution, so \nshould be used inside a generator with \nyield\n operator.\n\n\nlet email = yield I.grabValueFrom('input[name=email]');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  field located by label|name|CSS|XPath|strict locator\n\n\n\n\npressKey\n\n\nPresses a key on a focused element.\nSpeical keys like 'Enter', 'Control', \netc\n\nwill be replaced with corresponding unicode.\nIf modifier key is used (Control, Command, Alt, Shift) in array, it will be released afterwards.\n\n\nI.pressKey('Enter');\nI.pressKey(['Control','a']);\n\n\n\n\nParameters\n\n\n\n\nkey\n  \n\n\n\n\nresizeWindow\n\n\nResize the current window to provided width and height.\nFirst parameter can be set to \nmaximize\n\n\nParameters\n\n\n\n\nwidth\n  or \nmaximize\n\n\nheight\n  \n\n\n\n\nsaveScreenshot\n\n\nSaves a screenshot to ouput folder (set in codecept.json).\nFilename is relative to output folder.\n\n\nI.saveScreenshot('debug.png');\n\n\n\n\nParameters\n\n\n\n\nfileName\n  \n\n\n\n\nsee\n\n\nChecks that a page contains a visible text.\nUse context parameter to narrow down the search.\n\n\nI.see('Welcome'); // text welcome on a page\nI.see('Welcome', '.content'); // text inside .content div\nI.see('Register', {css: 'form.register'}); // use strict locator\n\n\n\n\nParameters\n\n\n\n\ntext\n  expected on page\n\n\ncontext\n  (optional) element located by CSS|Xpath|strict locator in which to search for text\n\n\n\n\nseeCheckboxIsChecked\n\n\nVerifies that the specified checkbox is checked.\n\n\nI.seeCheckboxIsChecked('Agree');\nI.seeCheckboxIsChecked('#agree'); // I suppose user agreed to terms\nI.seeCheckboxIsChecked({css: '#signup_form input[type=checkbox]'});\n\n\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\n\n\nseeCookie\n\n\nChecks that cookie with given name exists.\n\n\nI.seeCookie('Auth');\n\n\n\n\nParameters\n\n\n\n\nname\n  \n\n\n\n\nseeCurrentUrlEquals\n\n\nChecks that current url is equal to provided one.\nIf a relative url provided, a configured url will be prepended to it.\nSo both examples will work:\n\n\nI.seeCurrentUrlEquals('/register');\nI.seeCurrentUrlEquals('http://my.site.com/register');\n\n\n\n\nParameters\n\n\n\n\nurl\n  \n\n\n\n\nseeElement\n\n\nChecks that a given Element is visible\nElement is located by CSS or XPath.\n\n\nI.seeElement('#modal');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  located by CSS|XPath|strict locator\n\n\n\n\nseeInCurrentUrl\n\n\nChecks that current url contains a provided fragment.\n\n\nI.seeInCurrentUrl('/register'); // we are on registration page\n\n\n\n\nParameters\n\n\n\n\nurl\n  \n\n\n\n\nseeInField\n\n\nChecks that the given input field or textarea equals to given value.\nFor fuzzy locators, fields are matched by label text, the \"name\" attribute, CSS, and XPath.\n\n\nI.seeInField('Username', 'davert');\nI.seeInField({css: 'form textarea'},'Type your comment here');\nI.seeInField('form input[type=hidden]','hidden_value');\nI.seeInField('#searchform input','Search');\n\n\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\nvalue\n  \n\n\n\n\nseeInSource\n\n\nChecks that the current page contains the given string in its raw source code.\n\n\nI.seeInSource('\nh1\nGreen eggs \namp; ham\n/h1\n');\n\n\n\n\nParameters\n\n\n\n\ntext\n  \n\n\n\n\nseeInTitle\n\n\nChecks that title contains text.\n\n\nParameters\n\n\n\n\ntext\n  \n\n\n\n\nselectOption\n\n\nSelects an option in a drop-down select.\nField is searched by label | name | CSS | XPath.\nOption is selected by visible text or by value.\n\n\nI.selectOption('Choose Plan', 'Monthly'); // select by label\nI.selectOption('subscription', 'Monthly'); // match option by text\nI.selectOption('subscription', '0'); // or by value\nI.selectOption('//form/select[@name=account]','Premium');\nI.selectOption('form select[name=account]', 'Premium');\nI.selectOption({css: 'form select[name=account]'}, 'Premium');\n\n\n\n\nProvide an array for the second argument to select multiple options.\n\n\nI.selectOption('Which OS do you use?', ['Android', 'iOS']);\n\n\n\n\nParameters\n\n\n\n\nselect\n  field located by label|name|CSS|XPath|strict locator\n\n\noption\n  \n\n\n\n\nsetCookie\n\n\nSets a cookie\n\n\nI.setCookie({name: 'auth', value: true});\n\n\n\n\nParameters\n\n\n\n\ncookie", 
            "title": "Protractor"
        }, 
        {
            "location": "/helpers/Protractor/#protractor", 
            "text": "Protractor helper is based on  Protractor library  and used for testing AngularJS applications.  Selenium Installation   Download  Selenium Server  Launch the daemon:  java -jar selenium-server-standalone-2.xx.xxx.jar   PhantomJS Installation  PhantomJS is a headless alternative to Selenium Server that implements the WebDriver protocol.\nIt allows you to run Selenium tests on a server without a GUI installed.   Download  PhantomJS  Run PhantomJS in WebDriver mode:  phantomjs --webdriver=4444   Configuration  This helper should be configured in codecept.json   url  - base url of website to be tested  browser  - browser in which perform testing  driver  - which protrator driver to use (local, direct, session, hosted, sauce, browserstack). By default set to 'hosted' which requires selenium server to be started.  restart  - restart browser between tests (default: true), if set to false cookies will be cleaned but browser window will be kept.  seleniumAddress  - Selenium address to connect (default:  http://localhost:4444/wd/hub )  rootElement  - Root element of AngularJS application (default: body)  capabilities : {} - list of  Desired Capabilities  proxy : set proxy settings   other options are the same as in  Protractor config .", 
            "title": "Protractor"
        }, 
        {
            "location": "/helpers/Protractor/#access-from-helpers", 
            "text": "Receive a WebDriverIO client from a custom helper by accessing  browser  property:  this.helpers['Protractor'].browser  Parameters   config", 
            "title": "Access From Helpers"
        }, 
        {
            "location": "/helpers/Protractor/#_locate", 
            "text": "Get elements by different locator types, including strict locator\nShould be used in custom helpers:  this.helpers['Protractor']._locate({model: 'newTodo'}).then //...  Parameters   locator", 
            "title": "_locate"
        }, 
        {
            "location": "/helpers/Protractor/#aminsideangularapp", 
            "text": "Enters Angular mode (switched on by default)\nShould be used after \"amOutsideAngularApp\"", 
            "title": "amInsideAngularApp"
        }, 
        {
            "location": "/helpers/Protractor/#amoutsideangularapp", 
            "text": "Switch to non-Angular mode,\nstart using WebDriver instead of Protractor in this session", 
            "title": "amOutsideAngularApp"
        }, 
        {
            "location": "/helpers/Protractor/#havemodule", 
            "text": "Injects Angular module.  I.haveModule('modName', function() {\n  angular.module('modName', []).value('foo', 'bar');\n});  Parameters   modName     fn", 
            "title": "haveModule"
        }, 
        {
            "location": "/helpers/Protractor/#moveto", 
            "text": "Moves to url  Parameters   path", 
            "title": "moveTo"
        }, 
        {
            "location": "/helpers/Protractor/#refresh", 
            "text": "Reloads page", 
            "title": "refresh"
        }, 
        {
            "location": "/helpers/Protractor/#resetmodule", 
            "text": "Removes mocked Angular module. If modName not specified - clears all mock modules.  I.resetModule(); // clears all\nI.resetModule('modName');  Parameters   modName", 
            "title": "resetModule"
        }, 
        {
            "location": "/helpers/Protractor/#waitforclickable", 
            "text": "Waits for element to become clickable for number of seconds.  Parameters   locator     sec", 
            "title": "waitForClickable"
        }, 
        {
            "location": "/helpers/Protractor/#waitforelement", 
            "text": "Waits for element to be present on page (by default waits for 1sec).\nElement can be located by CSS or XPath.  I.waitForElement('.btn.continue');\nI.waitForElement('.btn.continue', 5); // wait for 5 secs  Parameters   locator   element located by CSS|XPath|strict locator  sec   time seconds to wait, 1 by default", 
            "title": "waitForElement"
        }, 
        {
            "location": "/helpers/Protractor/#waitfortext", 
            "text": "Waits for a text to appear (by default waits for 1sec).\nElement can be located by CSS or XPath.\nNarrow down search results by providing context.  I.waitForText('Thank you, form has been submitted');\nI.waitForText('Thank you, form has been submitted', 5, '#modal');  Parameters   text   to wait for  sec   seconds to wait  context   element located by CSS|XPath|strict locator", 
            "title": "waitForText"
        }, 
        {
            "location": "/helpers/Protractor/#waitforvisible", 
            "text": "Waits for an element to become visible on a page (by default waits for 1sec).\nElement can be located by CSS or XPath.  I.waitForVisible('#popup');  Parameters   locator   element located by CSS|XPath|strict locator  sec   time seconds to wait, 1 by default", 
            "title": "waitForVisible"
        }, 
        {
            "location": "/helpers/Protractor/#amonpage", 
            "text": "Opens a web page in a browser. Requires relative or absolute url.\nIf url starts with  / , opens a web page of a site defined in  url  config parameter.  I.amOnPage('/'); // opens main page of website\nI.amOnPage('https://github.com'); // opens github\nI.amOnPage('/login'); // opens a login page  Parameters   url   url path or global url", 
            "title": "amOnPage"
        }, 
        {
            "location": "/helpers/Protractor/#appendfield", 
            "text": "Appends text to a input field or textarea.\nField is located by name, label, CSS or XPath  I.appendField('#myTextField', 'appended');  Parameters   field   located by label|name|CSS|XPath|strict locator  value   text value", 
            "title": "appendField"
        }, 
        {
            "location": "/helpers/Protractor/#attachfile", 
            "text": "Attaches a file to element located by label, name, CSS or XPath\nPath to file is relative current codecept directory (where codecept.json is located).\nFile will be uploaded to remove system (if tests are running remotely).  I.attachFile('Avatar', 'data/avatar.jpg');\nI.attachFile('form input[name=avatar]', 'data/avatar.jpg');  Parameters   locator   field located by label|name|CSS|XPath|strict locator  pathToFile   local file path relative to codecept.json config file", 
            "title": "attachFile"
        }, 
        {
            "location": "/helpers/Protractor/#checkoption", 
            "text": "Selects a checkbox or radio button.\nElement is located by label or name or CSS or XPath.  The second parameter is a context (CSS or XPath locator) to narrow the search.  I.checkOption('#agree');\nI.checkOption('I Agree to Terms and Conditions');\nI.checkOption('agree', '//form');  Parameters     -    field   checkbox located by label  name  CSS", 
            "title": "checkOption"
        }, 
        {
            "location": "/helpers/Protractor/#clearcookie", 
            "text": "Clears a cookie by name,\nif none provided clears all cookies  I.clearCookie();\nI.clearCookie('test');  Parameters   cookie   (optional)", 
            "title": "clearCookie"
        }, 
        {
            "location": "/helpers/Protractor/#click", 
            "text": "Perform a click on a link or a button, given by a locator.\nIf a fuzzy locator is given, the page will be searched for a button, link, or image matching the locator string.\nFor buttons, the \"value\" attribute, \"name\" attribute, and inner text are searched. For links, the link text is searched.\nFor images, the \"alt\" attribute and inner text of any parent links are searched.  The second parameter is a context (CSS or XPath locator) to narrow the search.  // simple link\nI.click('Logout');\n// button of form\nI.click('Submit');\n// CSS button\nI.click('#form input[type=submit]');\n// XPath\nI.click('//form/*[@type=submit]');\n// link in context\nI.click('Logout', '#nav');\n// using strict locator\nI.click({css: 'nav a.login'});  Parameters     -    locator   clickable link or button located by text, or any element located by CSS  XPath  strict locator", 
            "title": "click"
        }, 
        {
            "location": "/helpers/Protractor/#dontsee", 
            "text": "Opposite to  see . Checks that a text is not present on a page.\nUse context parameter to narrow down the search.  I.dontSee('Login'); // assume we are already logged in  Parameters   text   is not present  context   (optional) element located by CSS|XPath|strict locator in which to perfrom search", 
            "title": "dontSee"
        }, 
        {
            "location": "/helpers/Protractor/#dontseecheckboxischecked", 
            "text": "Verifies that the specified checkbox is not checked.  Parameters   field   located by label|name|CSS|XPath|strict locator", 
            "title": "dontSeeCheckboxIsChecked"
        }, 
        {
            "location": "/helpers/Protractor/#dontseecookie", 
            "text": "Checks that cookie with given name does not exist.  Parameters   name", 
            "title": "dontSeeCookie"
        }, 
        {
            "location": "/helpers/Protractor/#dontseecurrenturlequals", 
            "text": "Checks that current url is not equal to provided one.\nIf a relative url provided, a configured url will be prepended to it.  Parameters   url", 
            "title": "dontSeeCurrentUrlEquals"
        }, 
        {
            "location": "/helpers/Protractor/#dontseeelement", 
            "text": "Opposite to  seeElement . Checks that element is not visible  Parameters   locator   located by CSS|XPath|Strict locator", 
            "title": "dontSeeElement"
        }, 
        {
            "location": "/helpers/Protractor/#dontseeincurrenturl", 
            "text": "Checks that current url does not contain a provided fragment.  Parameters   url", 
            "title": "dontSeeInCurrentUrl"
        }, 
        {
            "location": "/helpers/Protractor/#dontseeinfield", 
            "text": "Checks that value of input field or textare doesn't equal to given value\nOpposite to  seeInField .  Parameters   field   located by label|name|CSS|XPath|strict locator  value   is not expected to be a field value", 
            "title": "dontSeeInField"
        }, 
        {
            "location": "/helpers/Protractor/#dontseeinsource", 
            "text": "Checks that the current page contains the given string in its raw source code  Parameters   text", 
            "title": "dontSeeInSource"
        }, 
        {
            "location": "/helpers/Protractor/#dontseeintitle", 
            "text": "Checks that title does not contain text.  Parameters   text", 
            "title": "dontSeeInTitle"
        }, 
        {
            "location": "/helpers/Protractor/#executeasyncscript", 
            "text": "Executes async script on page.\nProvided function should execute a passed callback (as first argument) to signal it is finished.  Parameters   fn", 
            "title": "executeAsyncScript"
        }, 
        {
            "location": "/helpers/Protractor/#executescript", 
            "text": "Executes sync script on a page.\nPass arguments to function as additional parameters.\nWill return execution result to a test.\nIn this case you should use generator and yield to receive results.  Parameters   fn", 
            "title": "executeScript"
        }, 
        {
            "location": "/helpers/Protractor/#fillfield", 
            "text": "Fills a text field or textarea, after clearing its value, with the given string.\nField is located by name, label, CSS, or XPath.  // by label\nI.fillField('Email', 'hello@world.com');\n// by name\nI.fillField('password', '123456');\n// by CSS\nI.fillField('form#login input[name=username]', 'John');\n// or by strict locator\nI.fillField({css: 'form#login input[name=username]'}, 'John');  Parameters   field   located by label|name|CSS|XPath|strict locator  value", 
            "title": "fillField"
        }, 
        {
            "location": "/helpers/Protractor/#grabattributefrom", 
            "text": "Retrieves an attribute from an element located by CSS or XPath and returns it to test.\nResumes test execution, so  should be used inside a generator with  yield  operator.  let hint = yield I.grabAttributeFrom('#tooltip', 'title');  Parameters   locator   element located by CSS|XPath|strict locator  attr", 
            "title": "grabAttributeFrom"
        }, 
        {
            "location": "/helpers/Protractor/#grabcookie", 
            "text": "Gets a cookie object by name\nResumes test execution, so  should be used inside a generator with  yield  operator.  let cookie = I.grabCookie('auth');\nassert(cookie.value, '123456');  Parameters   name", 
            "title": "grabCookie"
        }, 
        {
            "location": "/helpers/Protractor/#grabtextfrom", 
            "text": "Retrieves a text from an element located by CSS or XPath and returns it to test.\nResumes test execution, so  should be used inside a generator with  yield  operator.  let pin = yield I.grabTextFrom('#pin');  Parameters   locator   element located by CSS|XPath|strict locator", 
            "title": "grabTextFrom"
        }, 
        {
            "location": "/helpers/Protractor/#grabtitle", 
            "text": "Retrieves a page title and returns it to test.\nResumes test execution, so  should be used inside a generator with  yield  operator.  let title = yield I.grabTitle();", 
            "title": "grabTitle"
        }, 
        {
            "location": "/helpers/Protractor/#grabvaluefrom", 
            "text": "Retrieves a value from a form element located by CSS or XPath and returns it to test.\nResumes test execution, so  should be used inside a generator with  yield  operator.  let email = yield I.grabValueFrom('input[name=email]');  Parameters   locator   field located by label|name|CSS|XPath|strict locator", 
            "title": "grabValueFrom"
        }, 
        {
            "location": "/helpers/Protractor/#presskey", 
            "text": "Presses a key on a focused element.\nSpeical keys like 'Enter', 'Control',  etc \nwill be replaced with corresponding unicode.\nIf modifier key is used (Control, Command, Alt, Shift) in array, it will be released afterwards.  I.pressKey('Enter');\nI.pressKey(['Control','a']);  Parameters   key", 
            "title": "pressKey"
        }, 
        {
            "location": "/helpers/Protractor/#resizewindow", 
            "text": "Resize the current window to provided width and height.\nFirst parameter can be set to  maximize  Parameters   width   or  maximize  height", 
            "title": "resizeWindow"
        }, 
        {
            "location": "/helpers/Protractor/#savescreenshot", 
            "text": "Saves a screenshot to ouput folder (set in codecept.json).\nFilename is relative to output folder.  I.saveScreenshot('debug.png');  Parameters   fileName", 
            "title": "saveScreenshot"
        }, 
        {
            "location": "/helpers/Protractor/#see", 
            "text": "Checks that a page contains a visible text.\nUse context parameter to narrow down the search.  I.see('Welcome'); // text welcome on a page\nI.see('Welcome', '.content'); // text inside .content div\nI.see('Register', {css: 'form.register'}); // use strict locator  Parameters   text   expected on page  context   (optional) element located by CSS|Xpath|strict locator in which to search for text", 
            "title": "see"
        }, 
        {
            "location": "/helpers/Protractor/#seecheckboxischecked", 
            "text": "Verifies that the specified checkbox is checked.  I.seeCheckboxIsChecked('Agree');\nI.seeCheckboxIsChecked('#agree'); // I suppose user agreed to terms\nI.seeCheckboxIsChecked({css: '#signup_form input[type=checkbox]'});  Parameters   field   located by label|name|CSS|XPath|strict locator", 
            "title": "seeCheckboxIsChecked"
        }, 
        {
            "location": "/helpers/Protractor/#seecookie", 
            "text": "Checks that cookie with given name exists.  I.seeCookie('Auth');  Parameters   name", 
            "title": "seeCookie"
        }, 
        {
            "location": "/helpers/Protractor/#seecurrenturlequals", 
            "text": "Checks that current url is equal to provided one.\nIf a relative url provided, a configured url will be prepended to it.\nSo both examples will work:  I.seeCurrentUrlEquals('/register');\nI.seeCurrentUrlEquals('http://my.site.com/register');  Parameters   url", 
            "title": "seeCurrentUrlEquals"
        }, 
        {
            "location": "/helpers/Protractor/#seeelement", 
            "text": "Checks that a given Element is visible\nElement is located by CSS or XPath.  I.seeElement('#modal');  Parameters   locator   located by CSS|XPath|strict locator", 
            "title": "seeElement"
        }, 
        {
            "location": "/helpers/Protractor/#seeincurrenturl", 
            "text": "Checks that current url contains a provided fragment.  I.seeInCurrentUrl('/register'); // we are on registration page  Parameters   url", 
            "title": "seeInCurrentUrl"
        }, 
        {
            "location": "/helpers/Protractor/#seeinfield", 
            "text": "Checks that the given input field or textarea equals to given value.\nFor fuzzy locators, fields are matched by label text, the \"name\" attribute, CSS, and XPath.  I.seeInField('Username', 'davert');\nI.seeInField({css: 'form textarea'},'Type your comment here');\nI.seeInField('form input[type=hidden]','hidden_value');\nI.seeInField('#searchform input','Search');  Parameters   field   located by label|name|CSS|XPath|strict locator  value", 
            "title": "seeInField"
        }, 
        {
            "location": "/helpers/Protractor/#seeinsource", 
            "text": "Checks that the current page contains the given string in its raw source code.  I.seeInSource(' h1 Green eggs  amp; ham /h1 ');  Parameters   text", 
            "title": "seeInSource"
        }, 
        {
            "location": "/helpers/Protractor/#seeintitle", 
            "text": "Checks that title contains text.  Parameters   text", 
            "title": "seeInTitle"
        }, 
        {
            "location": "/helpers/Protractor/#selectoption", 
            "text": "Selects an option in a drop-down select.\nField is searched by label | name | CSS | XPath.\nOption is selected by visible text or by value.  I.selectOption('Choose Plan', 'Monthly'); // select by label\nI.selectOption('subscription', 'Monthly'); // match option by text\nI.selectOption('subscription', '0'); // or by value\nI.selectOption('//form/select[@name=account]','Premium');\nI.selectOption('form select[name=account]', 'Premium');\nI.selectOption({css: 'form select[name=account]'}, 'Premium');  Provide an array for the second argument to select multiple options.  I.selectOption('Which OS do you use?', ['Android', 'iOS']);  Parameters   select   field located by label|name|CSS|XPath|strict locator  option", 
            "title": "selectOption"
        }, 
        {
            "location": "/helpers/Protractor/#setcookie", 
            "text": "Sets a cookie  I.setCookie({name: 'auth', value: true});  Parameters   cookie", 
            "title": "setCookie"
        }, 
        {
            "location": "/helpers/SeleniumWebdriver/", 
            "text": "SeleniumWebdriver\n\n\nSeleniumWebdriver helper is based on the official \nSelenium Webdriver JS\n\nlibrary. It implements common web api methods (amOnPage, click, see).\n\n\nSelenium Installation\n\n\n\n\nDownload \nSelenium Server\n\n\nLaunch the daemon: \njava -jar selenium-server-standalone-2.xx.xxx.jar\n\n\n\n\nPhantomJS Installation\n\n\nPhantomJS is a headless alternative to Selenium Server that implements \nthe WebDriver protocol\n.\nIt allows you to run Selenium tests on a server without a GUI installed.\n\n\n\n\nDownload \nPhantomJS\n\n\nRun PhantomJS in WebDriver mode: \nphantomjs --webdriver=4444\n\n\n\n\nConfiguration\n\n\nThis helper should be configured in codecept.json\n\n\n\n\nurl\n - base url of website to be tested\n\n\nbrowser\n - browser in which perform testing\n\n\ndriver\n - which protrator driver to use (local, direct, session, hosted, sauce, browserstack). By default set to 'hosted' which requires selenium server to be started.\n\n\nrestart\n - restart browser between tests (default: true), if set to false cookies will be cleaned but browser window will be kept.\n\n\nseleniumAddress\n - Selenium address to connect (default: \nhttp://localhost:4444/wd/hub\n)\n\n\nwaitForTimeout\n: (optional) sets default wait time in \nms\n for all \nwait*\n functions. 1000 by default;\n\n\ncapabilities\n: {} - list of \nDesired Capabilities\n\n\n\n\nAccess From Helpers\n\n\nReceive a WebDriverIO client from a custom helper by accessing \nbrowser\n property:\n\n\nthis.helpers['Protractor'].browser\n\n\n\n\nParameters\n\n\n\n\nconfig\n  \n\n\n\n\n_locate\n\n\nGet elements by different locator types, including strict locator\nShould be used in custom helpers:\n\n\nthis.helpers['SeleniumWebdriver']._locate({name: 'password'}).then //...\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\n\n\namOnPage\n\n\nOpens a web page in a browser. Requires relative or absolute url.\nIf url starts with \n/\n, opens a web page of a site defined in \nurl\n config parameter.\n\n\nI.amOnPage('/'); // opens main page of website\nI.amOnPage('https://github.com'); // opens github\nI.amOnPage('/login'); // opens a login page\n\n\n\n\nParameters\n\n\n\n\nurl\n  url path or global url\n\n\n\n\nappendField\n\n\nAppends text to a input field or textarea.\nField is located by name, label, CSS or XPath\n\n\nI.appendField('#myTextField', 'appended');\n\n\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\nvalue\n  text value\n\n\n\n\nattachFile\n\n\nAttaches a file to element located by label, name, CSS or XPath\nPath to file is relative current codecept directory (where codecept.json is located).\nFile will be uploaded to remove system (if tests are running remotely).\n\n\nI.attachFile('Avatar', 'data/avatar.jpg');\nI.attachFile('form input[name=avatar]', 'data/avatar.jpg');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  field located by label|name|CSS|XPath|strict locator\n\n\npathToFile\n  local file path relative to codecept.json config file\n\n\n\n\ncheckOption\n\n\nSelects a checkbox or radio button.\nElement is located by label or name or CSS or XPath.\n\n\nThe second parameter is a context (CSS or XPath locator) to narrow the search.\n\n\nI.checkOption('#agree');\nI.checkOption('I Agree to Terms and Conditions');\nI.checkOption('agree', '//form');\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\n-   \nfield\n  checkbox located by label\n\n\nname\n\n\nCSS\n\n\n\n\n\n\n\n\n\n\nclearCookie\n\n\nClears a cookie by name,\nif none provided clears all cookies\n\n\nI.clearCookie();\nI.clearCookie('test');\n\n\n\n\nParameters\n\n\n\n\ncookie\n  (optional)\n\n\n\n\nclick\n\n\nPerform a click on a link or a button, given by a locator.\nIf a fuzzy locator is given, the page will be searched for a button, link, or image matching the locator string.\nFor buttons, the \"value\" attribute, \"name\" attribute, and inner text are searched. For links, the link text is searched.\nFor images, the \"alt\" attribute and inner text of any parent links are searched.\n\n\nThe second parameter is a context (CSS or XPath locator) to narrow the search.\n\n\n// simple link\nI.click('Logout');\n// button of form\nI.click('Submit');\n// CSS button\nI.click('#form input[type=submit]');\n// XPath\nI.click('//form/*[@type=submit]');\n// link in context\nI.click('Logout', '#nav');\n// using strict locator\nI.click({css: 'nav a.login'});\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\n-   \nlocator\n  clickable link or button located by text, or any element located by CSS\n\n\nXPath\n\n\nstrict locator\n\n\n\n\n\n\n\n\n\n\ndontSee\n\n\nOpposite to \nsee\n. Checks that a text is not present on a page.\nUse context parameter to narrow down the search.\n\n\nI.dontSee('Login'); // assume we are already logged in\n\n\n\n\nParameters\n\n\n\n\ntext\n  is not present\n\n\ncontext\n  (optional) element located by CSS|XPath|strict locator in which to perfrom search\n\n\n\n\ndontSeeCheckboxIsChecked\n\n\nVerifies that the specified checkbox is not checked.\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\n\n\ndontSeeCookie\n\n\nChecks that cookie with given name does not exist.\n\n\nParameters\n\n\n\n\nname\n  \n\n\n\n\ndontSeeCurrentUrlEquals\n\n\nChecks that current url is not equal to provided one.\nIf a relative url provided, a configured url will be prepended to it.\n\n\nParameters\n\n\n\n\nurl\n  \n\n\n\n\ndontSeeElement\n\n\nOpposite to \nseeElement\n. Checks that element is not visible\n\n\nParameters\n\n\n\n\nlocator\n  located by CSS|XPath|Strict locator\n\n\n\n\ndontSeeElementInDOM\n\n\nOpposite to \nseeElementInDOM\n. Checks that element is not on page.\n\n\nParameters\n\n\n\n\nlocator\n  located by CSS|XPath|Strict locator\n\n\n\n\ndontSeeInCurrentUrl\n\n\nChecks that current url does not contain a provided fragment.\n\n\nParameters\n\n\n\n\nurl\n  \n\n\n\n\ndontSeeInField\n\n\nChecks that value of input field or textare doesn't equal to given value\nOpposite to \nseeInField\n.\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\nvalue\n  is not expected to be a field value\n\n\n\n\ndontSeeInSource\n\n\nChecks that the current page contains the given string in its raw source code\n\n\nParameters\n\n\n\n\ntext\n  \n\n\n\n\ndontSeeInTitle\n\n\nChecks that title does not contain text.\n\n\nParameters\n\n\n\n\ntext\n  \n\n\n\n\ndoubleClick\n\n\nPerforms a double-click on an element matched by link|button|label|CSS or XPath.\nContext can be specified as second parameter to narrow search.\n\n\nI.doubleClick('Edit');\nI.doubleClick('Edit', '.actions');\nI.doubleClick({css: 'button.accept'});\nI.doubleClick('.btn.edit');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\ncontext\n  \n\n\n\n\nexecuteAsyncScript\n\n\nExecutes async script on page.\nProvided function should execute a passed callback (as first argument) to signal it is finished.\n\n\nParameters\n\n\n\n\nfn\n  \n\n\n\n\nexecuteScript\n\n\nExecutes sync script on a page.\nPass arguments to function as additional parameters.\nWill return execution result to a test.\nIn this case you should use generator and yield to receive results.\n\n\nParameters\n\n\n\n\nfn\n  \n\n\n\n\nfillField\n\n\nFills a text field or textarea, after clearing its value, with the given string.\nField is located by name, label, CSS, or XPath.\n\n\n// by label\nI.fillField('Email', 'hello@world.com');\n// by name\nI.fillField('password', '123456');\n// by CSS\nI.fillField('form#login input[name=username]', 'John');\n// or by strict locator\nI.fillField({css: 'form#login input[name=username]'}, 'John');\n\n\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\nvalue\n  \n\n\n\n\ngrabAttributeFrom\n\n\nRetrieves an attribute from an element located by CSS or XPath and returns it to test.\nResumes test execution, so \nshould be used inside a generator with \nyield\n operator.\n\n\nlet hint = yield I.grabAttributeFrom('#tooltip', 'title');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  element located by CSS|XPath|strict locator\n\n\nattr\n  \n\n\n\n\ngrabCookie\n\n\nGets a cookie object by name\nResumes test execution, so \nshould be used inside a generator with \nyield\n operator.\n\n\nlet cookie = I.grabCookie('auth');\nassert(cookie.value, '123456');\n\n\n\n\nParameters\n\n\n\n\nname\n  Returns cookie in JSON \nformat\n.\n\n\n\n\ngrabTextFrom\n\n\nRetrieves a text from an element located by CSS or XPath and returns it to test.\nResumes test execution, so \nshould be used inside a generator with \nyield\n operator.\n\n\nlet pin = yield I.grabTextFrom('#pin');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  element located by CSS|XPath|strict locator\n\n\n\n\ngrabTitle\n\n\nRetrieves a page title and returns it to test.\nResumes test execution, so \nshould be used inside a generator with \nyield\n operator.\n\n\nlet title = yield I.grabTitle();\n\n\n\n\ngrabValueFrom\n\n\nRetrieves a value from a form element located by CSS or XPath and returns it to test.\nResumes test execution, so \nshould be used inside a generator with \nyield\n operator.\n\n\nlet email = yield I.grabValueFrom('input[name=email]');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  field located by label|name|CSS|XPath|strict locator\n\n\n\n\npressKey\n\n\nPresses a key on a focused element.\nSpeical keys like 'Enter', 'Control', \netc\n\nwill be replaced with corresponding unicode.\nIf modifier key is used (Control, Command, Alt, Shift) in array, it will be released afterwards.\n\n\nI.pressKey('Enter');\nI.pressKey(['Control','a']);\n\n\n\n\nParameters\n\n\n\n\nkey\n  \n\n\n\n\nresizeWindow\n\n\nResize the current window to provided width and height.\nFirst parameter can be set to \nmaximize\n\n\nParameters\n\n\n\n\nwidth\n  or \nmaximize\n\n\nheight\n  \n\n\n\n\nsaveScreenshot\n\n\nSaves a screenshot to ouput folder (set in codecept.json).\nFilename is relative to output folder.\n\n\nI.saveScreenshot('debug.png');\n\n\n\n\nParameters\n\n\n\n\nfileName\n  \n\n\n\n\nsee\n\n\nChecks that a page contains a visible text.\nUse context parameter to narrow down the search.\n\n\nI.see('Welcome'); // text welcome on a page\nI.see('Welcome', '.content'); // text inside .content div\nI.see('Register', {css: 'form.register'}); // use strict locator\n\n\n\n\nParameters\n\n\n\n\ntext\n  expected on page\n\n\ncontext\n  (optional) element located by CSS|Xpath|strict locator in which to search for text\n\n\n\n\nseeCheckboxIsChecked\n\n\nVerifies that the specified checkbox is checked.\n\n\nI.seeCheckboxIsChecked('Agree');\nI.seeCheckboxIsChecked('#agree'); // I suppose user agreed to terms\nI.seeCheckboxIsChecked({css: '#signup_form input[type=checkbox]'});\n\n\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\n\n\nseeCookie\n\n\nChecks that cookie with given name exists.\n\n\nI.seeCookie('Auth');\n\n\n\n\nParameters\n\n\n\n\nname\n  \n\n\n\n\nseeCurrentUrlEquals\n\n\nChecks that current url is equal to provided one.\nIf a relative url provided, a configured url will be prepended to it.\nSo both examples will work:\n\n\nI.seeCurrentUrlEquals('/register');\nI.seeCurrentUrlEquals('http://my.site.com/register');\n\n\n\n\nParameters\n\n\n\n\nurl\n  \n\n\n\n\nseeElement\n\n\nChecks that a given Element is visible\nElement is located by CSS or XPath.\n\n\nI.seeElement('#modal');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  located by CSS|XPath|strict locator\n\n\n\n\nseeElementInDOM\n\n\nChecks that a given Element is present in the DOM\nElement is located by CSS or XPath.\n\n\nI.seeElementInDOM('#modal');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  located by CSS|XPath|strict locator\n\n\n\n\nseeInCurrentUrl\n\n\nChecks that current url contains a provided fragment.\n\n\nI.seeInCurrentUrl('/register'); // we are on registration page\n\n\n\n\nParameters\n\n\n\n\nurl\n  \n\n\n\n\nseeInField\n\n\nChecks that the given input field or textarea equals to given value.\nFor fuzzy locators, fields are matched by label text, the \"name\" attribute, CSS, and XPath.\n\n\nI.seeInField('Username', 'davert');\nI.seeInField({css: 'form textarea'},'Type your comment here');\nI.seeInField('form input[type=hidden]','hidden_value');\nI.seeInField('#searchform input','Search');\n\n\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\nvalue\n  \n\n\n\n\nseeInSource\n\n\nChecks that the current page contains the given string in its raw source code.\n\n\nI.seeInSource('\nh1\nGreen eggs \namp; ham\n/h1\n');\n\n\n\n\nParameters\n\n\n\n\ntext\n  \n\n\n\n\nseeInTitle\n\n\nChecks that title contains text.\n\n\nParameters\n\n\n\n\ntext\n  \n\n\n\n\nselectOption\n\n\nSelects an option in a drop-down select.\nField is searched by label | name | CSS | XPath.\nOption is selected by visible text or by value.\n\n\nI.selectOption('Choose Plan', 'Monthly'); // select by label\nI.selectOption('subscription', 'Monthly'); // match option by text\nI.selectOption('subscription', '0'); // or by value\nI.selectOption('//form/select[@name=account]','Premium');\nI.selectOption('form select[name=account]', 'Premium');\nI.selectOption({css: 'form select[name=account]'}, 'Premium');\n\n\n\n\nProvide an array for the second argument to select multiple options.\n\n\nI.selectOption('Which OS do you use?', ['Android', 'iOS']);\n\n\n\n\nParameters\n\n\n\n\nselect\n  field located by label|name|CSS|XPath|strict locator\n\n\noption\n  \n\n\n\n\nsetCookie\n\n\nSets a cookie\n\n\nI.setCookie({name: 'auth', value: true});\n\n\n\n\nParameters\n\n\n\n\ncookie\n  \n\n\n\n\nwait\n\n\nPauses execution for a number of seconds.\n\n\nI.wait(2); // wait 2 secs\n\n\n\n\nParameters\n\n\n\n\nsec\n  \n\n\n\n\nwaitForElement\n\n\nWaits for element to be present on page (by default waits for 1sec).\nElement can be located by CSS or XPath.\n\n\nI.waitForElement('.btn.continue');\nI.waitForElement('.btn.continue', 5); // wait for 5 secs\n\n\n\n\nParameters\n\n\n\n\nlocator\n  element located by CSS|XPath|strict locator\n\n\nsec\n  time seconds to wait, 1 by default\n\n\n\n\nwaitForText\n\n\nWaits for a text to appear (by default waits for 1sec).\nElement can be located by CSS or XPath.\nNarrow down search results by providing context.\n\n\nI.waitForText('Thank you, form has been submitted');\nI.waitForText('Thank you, form has been submitted', 5, '#modal');\n\n\n\n\nParameters\n\n\n\n\ntext\n  to wait for\n\n\nsec\n  seconds to wait\n\n\ncontext\n  element located by CSS|XPath|strict locator\n\n\n\n\nwaitForVisible\n\n\nWaits for an element to become visible on a page (by default waits for 1sec).\nElement can be located by CSS or XPath.\n\n\nI.waitForVisible('#popup');\n\n\n\nParameters\n\n\n\n\nlocator\n  element located by CSS|XPath|strict locator\n\n\nsec\n  time seconds to wait, 1 by default", 
            "title": "SeleniumWebdriver"
        }, 
        {
            "location": "/helpers/SeleniumWebdriver/#seleniumwebdriver", 
            "text": "SeleniumWebdriver helper is based on the official  Selenium Webdriver JS \nlibrary. It implements common web api methods (amOnPage, click, see).  Selenium Installation   Download  Selenium Server  Launch the daemon:  java -jar selenium-server-standalone-2.xx.xxx.jar   PhantomJS Installation  PhantomJS is a headless alternative to Selenium Server that implements  the WebDriver protocol .\nIt allows you to run Selenium tests on a server without a GUI installed.   Download  PhantomJS  Run PhantomJS in WebDriver mode:  phantomjs --webdriver=4444   Configuration  This helper should be configured in codecept.json   url  - base url of website to be tested  browser  - browser in which perform testing  driver  - which protrator driver to use (local, direct, session, hosted, sauce, browserstack). By default set to 'hosted' which requires selenium server to be started.  restart  - restart browser between tests (default: true), if set to false cookies will be cleaned but browser window will be kept.  seleniumAddress  - Selenium address to connect (default:  http://localhost:4444/wd/hub )  waitForTimeout : (optional) sets default wait time in  ms  for all  wait*  functions. 1000 by default;  capabilities : {} - list of  Desired Capabilities", 
            "title": "SeleniumWebdriver"
        }, 
        {
            "location": "/helpers/SeleniumWebdriver/#access-from-helpers", 
            "text": "Receive a WebDriverIO client from a custom helper by accessing  browser  property:  this.helpers['Protractor'].browser  Parameters   config", 
            "title": "Access From Helpers"
        }, 
        {
            "location": "/helpers/SeleniumWebdriver/#_locate", 
            "text": "Get elements by different locator types, including strict locator\nShould be used in custom helpers:  this.helpers['SeleniumWebdriver']._locate({name: 'password'}).then //...  Parameters   locator", 
            "title": "_locate"
        }, 
        {
            "location": "/helpers/SeleniumWebdriver/#amonpage", 
            "text": "Opens a web page in a browser. Requires relative or absolute url.\nIf url starts with  / , opens a web page of a site defined in  url  config parameter.  I.amOnPage('/'); // opens main page of website\nI.amOnPage('https://github.com'); // opens github\nI.amOnPage('/login'); // opens a login page  Parameters   url   url path or global url", 
            "title": "amOnPage"
        }, 
        {
            "location": "/helpers/SeleniumWebdriver/#appendfield", 
            "text": "Appends text to a input field or textarea.\nField is located by name, label, CSS or XPath  I.appendField('#myTextField', 'appended');  Parameters   field   located by label|name|CSS|XPath|strict locator  value   text value", 
            "title": "appendField"
        }, 
        {
            "location": "/helpers/SeleniumWebdriver/#attachfile", 
            "text": "Attaches a file to element located by label, name, CSS or XPath\nPath to file is relative current codecept directory (where codecept.json is located).\nFile will be uploaded to remove system (if tests are running remotely).  I.attachFile('Avatar', 'data/avatar.jpg');\nI.attachFile('form input[name=avatar]', 'data/avatar.jpg');  Parameters   locator   field located by label|name|CSS|XPath|strict locator  pathToFile   local file path relative to codecept.json config file", 
            "title": "attachFile"
        }, 
        {
            "location": "/helpers/SeleniumWebdriver/#checkoption", 
            "text": "Selects a checkbox or radio button.\nElement is located by label or name or CSS or XPath.  The second parameter is a context (CSS or XPath locator) to narrow the search.  I.checkOption('#agree');\nI.checkOption('I Agree to Terms and Conditions');\nI.checkOption('agree', '//form');  Parameters     -    field   checkbox located by label  name  CSS", 
            "title": "checkOption"
        }, 
        {
            "location": "/helpers/SeleniumWebdriver/#clearcookie", 
            "text": "Clears a cookie by name,\nif none provided clears all cookies  I.clearCookie();\nI.clearCookie('test');  Parameters   cookie   (optional)", 
            "title": "clearCookie"
        }, 
        {
            "location": "/helpers/SeleniumWebdriver/#click", 
            "text": "Perform a click on a link or a button, given by a locator.\nIf a fuzzy locator is given, the page will be searched for a button, link, or image matching the locator string.\nFor buttons, the \"value\" attribute, \"name\" attribute, and inner text are searched. For links, the link text is searched.\nFor images, the \"alt\" attribute and inner text of any parent links are searched.  The second parameter is a context (CSS or XPath locator) to narrow the search.  // simple link\nI.click('Logout');\n// button of form\nI.click('Submit');\n// CSS button\nI.click('#form input[type=submit]');\n// XPath\nI.click('//form/*[@type=submit]');\n// link in context\nI.click('Logout', '#nav');\n// using strict locator\nI.click({css: 'nav a.login'});  Parameters     -    locator   clickable link or button located by text, or any element located by CSS  XPath  strict locator", 
            "title": "click"
        }, 
        {
            "location": "/helpers/SeleniumWebdriver/#dontsee", 
            "text": "Opposite to  see . Checks that a text is not present on a page.\nUse context parameter to narrow down the search.  I.dontSee('Login'); // assume we are already logged in  Parameters   text   is not present  context   (optional) element located by CSS|XPath|strict locator in which to perfrom search", 
            "title": "dontSee"
        }, 
        {
            "location": "/helpers/SeleniumWebdriver/#dontseecheckboxischecked", 
            "text": "Verifies that the specified checkbox is not checked.  Parameters   field   located by label|name|CSS|XPath|strict locator", 
            "title": "dontSeeCheckboxIsChecked"
        }, 
        {
            "location": "/helpers/SeleniumWebdriver/#dontseecookie", 
            "text": "Checks that cookie with given name does not exist.  Parameters   name", 
            "title": "dontSeeCookie"
        }, 
        {
            "location": "/helpers/SeleniumWebdriver/#dontseecurrenturlequals", 
            "text": "Checks that current url is not equal to provided one.\nIf a relative url provided, a configured url will be prepended to it.  Parameters   url", 
            "title": "dontSeeCurrentUrlEquals"
        }, 
        {
            "location": "/helpers/SeleniumWebdriver/#dontseeelement", 
            "text": "Opposite to  seeElement . Checks that element is not visible  Parameters   locator   located by CSS|XPath|Strict locator", 
            "title": "dontSeeElement"
        }, 
        {
            "location": "/helpers/SeleniumWebdriver/#dontseeelementindom", 
            "text": "Opposite to  seeElementInDOM . Checks that element is not on page.  Parameters   locator   located by CSS|XPath|Strict locator", 
            "title": "dontSeeElementInDOM"
        }, 
        {
            "location": "/helpers/SeleniumWebdriver/#dontseeincurrenturl", 
            "text": "Checks that current url does not contain a provided fragment.  Parameters   url", 
            "title": "dontSeeInCurrentUrl"
        }, 
        {
            "location": "/helpers/SeleniumWebdriver/#dontseeinfield", 
            "text": "Checks that value of input field or textare doesn't equal to given value\nOpposite to  seeInField .  Parameters   field   located by label|name|CSS|XPath|strict locator  value   is not expected to be a field value", 
            "title": "dontSeeInField"
        }, 
        {
            "location": "/helpers/SeleniumWebdriver/#dontseeinsource", 
            "text": "Checks that the current page contains the given string in its raw source code  Parameters   text", 
            "title": "dontSeeInSource"
        }, 
        {
            "location": "/helpers/SeleniumWebdriver/#dontseeintitle", 
            "text": "Checks that title does not contain text.  Parameters   text", 
            "title": "dontSeeInTitle"
        }, 
        {
            "location": "/helpers/SeleniumWebdriver/#doubleclick", 
            "text": "Performs a double-click on an element matched by link|button|label|CSS or XPath.\nContext can be specified as second parameter to narrow search.  I.doubleClick('Edit');\nI.doubleClick('Edit', '.actions');\nI.doubleClick({css: 'button.accept'});\nI.doubleClick('.btn.edit');  Parameters   locator     context", 
            "title": "doubleClick"
        }, 
        {
            "location": "/helpers/SeleniumWebdriver/#executeasyncscript", 
            "text": "Executes async script on page.\nProvided function should execute a passed callback (as first argument) to signal it is finished.  Parameters   fn", 
            "title": "executeAsyncScript"
        }, 
        {
            "location": "/helpers/SeleniumWebdriver/#executescript", 
            "text": "Executes sync script on a page.\nPass arguments to function as additional parameters.\nWill return execution result to a test.\nIn this case you should use generator and yield to receive results.  Parameters   fn", 
            "title": "executeScript"
        }, 
        {
            "location": "/helpers/SeleniumWebdriver/#fillfield", 
            "text": "Fills a text field or textarea, after clearing its value, with the given string.\nField is located by name, label, CSS, or XPath.  // by label\nI.fillField('Email', 'hello@world.com');\n// by name\nI.fillField('password', '123456');\n// by CSS\nI.fillField('form#login input[name=username]', 'John');\n// or by strict locator\nI.fillField({css: 'form#login input[name=username]'}, 'John');  Parameters   field   located by label|name|CSS|XPath|strict locator  value", 
            "title": "fillField"
        }, 
        {
            "location": "/helpers/SeleniumWebdriver/#grabattributefrom", 
            "text": "Retrieves an attribute from an element located by CSS or XPath and returns it to test.\nResumes test execution, so  should be used inside a generator with  yield  operator.  let hint = yield I.grabAttributeFrom('#tooltip', 'title');  Parameters   locator   element located by CSS|XPath|strict locator  attr", 
            "title": "grabAttributeFrom"
        }, 
        {
            "location": "/helpers/SeleniumWebdriver/#grabcookie", 
            "text": "Gets a cookie object by name\nResumes test execution, so  should be used inside a generator with  yield  operator.  let cookie = I.grabCookie('auth');\nassert(cookie.value, '123456');  Parameters   name   Returns cookie in JSON  format .", 
            "title": "grabCookie"
        }, 
        {
            "location": "/helpers/SeleniumWebdriver/#grabtextfrom", 
            "text": "Retrieves a text from an element located by CSS or XPath and returns it to test.\nResumes test execution, so  should be used inside a generator with  yield  operator.  let pin = yield I.grabTextFrom('#pin');  Parameters   locator   element located by CSS|XPath|strict locator", 
            "title": "grabTextFrom"
        }, 
        {
            "location": "/helpers/SeleniumWebdriver/#grabtitle", 
            "text": "Retrieves a page title and returns it to test.\nResumes test execution, so  should be used inside a generator with  yield  operator.  let title = yield I.grabTitle();", 
            "title": "grabTitle"
        }, 
        {
            "location": "/helpers/SeleniumWebdriver/#grabvaluefrom", 
            "text": "Retrieves a value from a form element located by CSS or XPath and returns it to test.\nResumes test execution, so  should be used inside a generator with  yield  operator.  let email = yield I.grabValueFrom('input[name=email]');  Parameters   locator   field located by label|name|CSS|XPath|strict locator", 
            "title": "grabValueFrom"
        }, 
        {
            "location": "/helpers/SeleniumWebdriver/#presskey", 
            "text": "Presses a key on a focused element.\nSpeical keys like 'Enter', 'Control',  etc \nwill be replaced with corresponding unicode.\nIf modifier key is used (Control, Command, Alt, Shift) in array, it will be released afterwards.  I.pressKey('Enter');\nI.pressKey(['Control','a']);  Parameters   key", 
            "title": "pressKey"
        }, 
        {
            "location": "/helpers/SeleniumWebdriver/#resizewindow", 
            "text": "Resize the current window to provided width and height.\nFirst parameter can be set to  maximize  Parameters   width   or  maximize  height", 
            "title": "resizeWindow"
        }, 
        {
            "location": "/helpers/SeleniumWebdriver/#savescreenshot", 
            "text": "Saves a screenshot to ouput folder (set in codecept.json).\nFilename is relative to output folder.  I.saveScreenshot('debug.png');  Parameters   fileName", 
            "title": "saveScreenshot"
        }, 
        {
            "location": "/helpers/SeleniumWebdriver/#see", 
            "text": "Checks that a page contains a visible text.\nUse context parameter to narrow down the search.  I.see('Welcome'); // text welcome on a page\nI.see('Welcome', '.content'); // text inside .content div\nI.see('Register', {css: 'form.register'}); // use strict locator  Parameters   text   expected on page  context   (optional) element located by CSS|Xpath|strict locator in which to search for text", 
            "title": "see"
        }, 
        {
            "location": "/helpers/SeleniumWebdriver/#seecheckboxischecked", 
            "text": "Verifies that the specified checkbox is checked.  I.seeCheckboxIsChecked('Agree');\nI.seeCheckboxIsChecked('#agree'); // I suppose user agreed to terms\nI.seeCheckboxIsChecked({css: '#signup_form input[type=checkbox]'});  Parameters   field   located by label|name|CSS|XPath|strict locator", 
            "title": "seeCheckboxIsChecked"
        }, 
        {
            "location": "/helpers/SeleniumWebdriver/#seecookie", 
            "text": "Checks that cookie with given name exists.  I.seeCookie('Auth');  Parameters   name", 
            "title": "seeCookie"
        }, 
        {
            "location": "/helpers/SeleniumWebdriver/#seecurrenturlequals", 
            "text": "Checks that current url is equal to provided one.\nIf a relative url provided, a configured url will be prepended to it.\nSo both examples will work:  I.seeCurrentUrlEquals('/register');\nI.seeCurrentUrlEquals('http://my.site.com/register');  Parameters   url", 
            "title": "seeCurrentUrlEquals"
        }, 
        {
            "location": "/helpers/SeleniumWebdriver/#seeelement", 
            "text": "Checks that a given Element is visible\nElement is located by CSS or XPath.  I.seeElement('#modal');  Parameters   locator   located by CSS|XPath|strict locator", 
            "title": "seeElement"
        }, 
        {
            "location": "/helpers/SeleniumWebdriver/#seeelementindom", 
            "text": "Checks that a given Element is present in the DOM\nElement is located by CSS or XPath.  I.seeElementInDOM('#modal');  Parameters   locator   located by CSS|XPath|strict locator", 
            "title": "seeElementInDOM"
        }, 
        {
            "location": "/helpers/SeleniumWebdriver/#seeincurrenturl", 
            "text": "Checks that current url contains a provided fragment.  I.seeInCurrentUrl('/register'); // we are on registration page  Parameters   url", 
            "title": "seeInCurrentUrl"
        }, 
        {
            "location": "/helpers/SeleniumWebdriver/#seeinfield", 
            "text": "Checks that the given input field or textarea equals to given value.\nFor fuzzy locators, fields are matched by label text, the \"name\" attribute, CSS, and XPath.  I.seeInField('Username', 'davert');\nI.seeInField({css: 'form textarea'},'Type your comment here');\nI.seeInField('form input[type=hidden]','hidden_value');\nI.seeInField('#searchform input','Search');  Parameters   field   located by label|name|CSS|XPath|strict locator  value", 
            "title": "seeInField"
        }, 
        {
            "location": "/helpers/SeleniumWebdriver/#seeinsource", 
            "text": "Checks that the current page contains the given string in its raw source code.  I.seeInSource(' h1 Green eggs  amp; ham /h1 ');  Parameters   text", 
            "title": "seeInSource"
        }, 
        {
            "location": "/helpers/SeleniumWebdriver/#seeintitle", 
            "text": "Checks that title contains text.  Parameters   text", 
            "title": "seeInTitle"
        }, 
        {
            "location": "/helpers/SeleniumWebdriver/#selectoption", 
            "text": "Selects an option in a drop-down select.\nField is searched by label | name | CSS | XPath.\nOption is selected by visible text or by value.  I.selectOption('Choose Plan', 'Monthly'); // select by label\nI.selectOption('subscription', 'Monthly'); // match option by text\nI.selectOption('subscription', '0'); // or by value\nI.selectOption('//form/select[@name=account]','Premium');\nI.selectOption('form select[name=account]', 'Premium');\nI.selectOption({css: 'form select[name=account]'}, 'Premium');  Provide an array for the second argument to select multiple options.  I.selectOption('Which OS do you use?', ['Android', 'iOS']);  Parameters   select   field located by label|name|CSS|XPath|strict locator  option", 
            "title": "selectOption"
        }, 
        {
            "location": "/helpers/SeleniumWebdriver/#setcookie", 
            "text": "Sets a cookie  I.setCookie({name: 'auth', value: true});  Parameters   cookie", 
            "title": "setCookie"
        }, 
        {
            "location": "/helpers/SeleniumWebdriver/#wait", 
            "text": "Pauses execution for a number of seconds.  I.wait(2); // wait 2 secs  Parameters   sec", 
            "title": "wait"
        }, 
        {
            "location": "/helpers/SeleniumWebdriver/#waitforelement", 
            "text": "Waits for element to be present on page (by default waits for 1sec).\nElement can be located by CSS or XPath.  I.waitForElement('.btn.continue');\nI.waitForElement('.btn.continue', 5); // wait for 5 secs  Parameters   locator   element located by CSS|XPath|strict locator  sec   time seconds to wait, 1 by default", 
            "title": "waitForElement"
        }, 
        {
            "location": "/helpers/SeleniumWebdriver/#waitfortext", 
            "text": "Waits for a text to appear (by default waits for 1sec).\nElement can be located by CSS or XPath.\nNarrow down search results by providing context.  I.waitForText('Thank you, form has been submitted');\nI.waitForText('Thank you, form has been submitted', 5, '#modal');  Parameters   text   to wait for  sec   seconds to wait  context   element located by CSS|XPath|strict locator", 
            "title": "waitForText"
        }, 
        {
            "location": "/helpers/SeleniumWebdriver/#waitforvisible", 
            "text": "Waits for an element to become visible on a page (by default waits for 1sec).\nElement can be located by CSS or XPath.  I.waitForVisible('#popup');  Parameters   locator   element located by CSS|XPath|strict locator  sec   time seconds to wait, 1 by default", 
            "title": "waitForVisible"
        }, 
        {
            "location": "/helpers/Nightmare/", 
            "text": "Nightmare\n\n\nNightmare helper wraps \nNightmare\n library to provide\nfastest headless testing using Electron engine. Unlike Selenium-based drivers this uses\nChromium-based browser with Electron with lots of client side scripts, thus should be less stable and\nless trusted.\n\n\nRequires \nnightmare\n and \nnigthmare-upload\n packages to be installed.\n\n\nConfiguration\n\n\nThis helper should be configured in codecept.json\n\n\n\n\nurl\n - base url of website to be tested\n\n\nwaitForAction\n: (optional) how long to wait after click, doubleClick or PressKey actions in ms. Default: 500\n\n\nwaitForTimeout\n: (optional) default wait* timeout\n\n\n\n\nwindowSize\n: (optional) default window size. Set a dimension like \n640x480\n.\n\n\n\n\n\n\noptions from \nNightmare configuration\n\n\n\n\n\n\nParameters\n\n\n\n\nconfig\n  \n\n\n\n\n_locate\n\n\nLocate elements by different locator types, including strict locator.\nShould be used in custom helpers.\n\n\nThis method return promise with array of IDs of found elements.\nActual elements can be accessed inside \nevaulate\n by using \ncodeceptjs.fetchElement()\n\nclient-side function:\n\n\n// get an inner text of an element\n\nlet browser = this.helpers['Nigthmare'].browser;\nlet value = this.helpers['Nigthmare']._locate({name: 'password'}).then(function(els) {\n  return browser.evaluate(function(el) {\n    return codeceptjs.fetchElement(el).value;\n  }, els[0]);\n});\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\n\n\namOnPage\n\n\nOpens a web page in a browser. Requires relative or absolute url.\nIf url starts with \n/\n, opens a web page of a site defined in \nurl\n config parameter.\n\n\nI.amOnPage('/'); // opens main page of website\nI.amOnPage('https://github.com'); // opens github\nI.amOnPage('/login'); // opens a login page\n\n\n\n\nParameters\n\n\n\n\nurl\n  url path or global urlIn a second argument a list of request headers can be passed:\njs\n    I.amOnPage('/auth', [{'x-my-custom-header': 'some value'}])\n\n\nheaders\n  \n\n\n\n\nappendField\n\n\nAppends text to a input field or textarea.\nField is located by name, label, CSS or XPath\n\n\nI.appendField('#myTextField', 'appended');\n\n\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\nvalue\n  text value\n\n\n\n\nattachFile\n\n\nAttaches a file to element located by label, name, CSS or XPath\nPath to file is relative current codecept directory (where codecept.json is located).\nFile will be uploaded to remove system (if tests are running remotely).\n\n\nI.attachFile('Avatar', 'data/avatar.jpg');\nI.attachFile('form input[name=avatar]', 'data/avatar.jpg');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  field located by label|name|CSS|XPath|strict locator\n\n\npathToFile\n  local file path relative to codecept.json config fileDue to technical limitation this \nworks only with CSS selectors\n\n\n\n\ncheckOption\n\n\nSelects a checkbox or radio button.\nElement is located by label or name or CSS or XPath.\n\n\nThe second parameter is a context (CSS or XPath locator) to narrow the search.\n\n\nI.checkOption('#agree');\nI.checkOption('I Agree to Terms and Conditions');\nI.checkOption('agree', '//form');\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\n-   \nfield\n  checkbox located by label\n\n\nname\n\n\nCSS\n\n\n\n\n\n\n\n\n\n\nclearCookie\n\n\nClears a cookie by name,\nif none provided clears all cookies\n\n\nI.clearCookie();\nI.clearCookie('test');\n\n\n\n\nParameters\n\n\n\n\ncookie\n  (optional)\n\n\n\n\nclick\n\n\nPerform a click on a link or a button, given by a locator.\nIf a fuzzy locator is given, the page will be searched for a button, link, or image matching the locator string.\nFor buttons, the \"value\" attribute, \"name\" attribute, and inner text are searched. For links, the link text is searched.\nFor images, the \"alt\" attribute and inner text of any parent links are searched.\n\n\nThe second parameter is a context (CSS or XPath locator) to narrow the search.\n\n\n// simple link\nI.click('Logout');\n// button of form\nI.click('Submit');\n// CSS button\nI.click('#form input[type=submit]');\n// XPath\nI.click('//form/*[@type=submit]');\n// link in context\nI.click('Logout', '#nav');\n// using strict locator\nI.click({css: 'nav a.login'});\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\n-   \nlocator\n  clickable link or button located by text, or any element located by CSS\n\n\nXPath\n\n\nstrict locator\n\n\n\n\n\n\n\n\n\n\ndontSee\n\n\nOpposite to \nsee\n. Checks that a text is not present on a page.\nUse context parameter to narrow down the search.\n\n\nI.dontSee('Login'); // assume we are already logged in\n\n\n\n\nParameters\n\n\n\n\ntext\n  is not present\n\n\ncontext\n  (optional) element located by CSS|XPath|strict locator in which to perfrom search\n\n\n\n\ndontSeeCheckboxIsChecked\n\n\nVerifies that the specified checkbox is not checked.\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\n\n\ndontSeeCookie\n\n\nChecks that cookie with given name does not exist.\n\n\nParameters\n\n\n\n\nname\n  \n\n\n\n\ndontSeeCurrentUrlEquals\n\n\nChecks that current url is not equal to provided one.\nIf a relative url provided, a configured url will be prepended to it.\n\n\nParameters\n\n\n\n\nurl\n  \n\n\n\n\ndontSeeElement\n\n\nOpposite to \nseeElement\n. Checks that element is not visible\n\n\nParameters\n\n\n\n\nlocator\n  located by CSS|XPath|Strict locator\n\n\n\n\ndontSeeElementInDOM\n\n\nOpposite to \nseeElementInDOM\n. Checks that element is not on page.\n\n\nParameters\n\n\n\n\nlocator\n  located by CSS|XPath|Strict locator\n\n\n\n\ndontSeeInCurrentUrl\n\n\nChecks that current url does not contain a provided fragment.\n\n\nParameters\n\n\n\n\nurl\n  \n\n\n\n\ndontSeeInField\n\n\nChecks that value of input field or textare doesn't equal to given value\nOpposite to \nseeInField\n.\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\nvalue\n  is not expected to be a field value\n\n\n\n\ndontSeeInSource\n\n\nChecks that the current page contains the given string in its raw source code\n\n\nParameters\n\n\n\n\ntext\n  \n\n\n\n\ndontSeeInTitle\n\n\nChecks that title does not contain text.\n\n\nParameters\n\n\n\n\ntext\n  \n\n\n\n\ndoubleClick\n\n\nPerforms a double-click on an element matched by link|button|label|CSS or XPath.\nContext can be specified as second parameter to narrow search.\n\n\nI.doubleClick('Edit');\nI.doubleClick('Edit', '.actions');\nI.doubleClick({css: 'button.accept'});\nI.doubleClick('.btn.edit');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\ncontext\n  \n\n\n\n\nexecuteAsyncScript\n\n\nExecutes async script on page.\nProvided function should execute a passed callback (as first argument) to signal it is finished.\n\n\nParameters\n\n\n\n\nfn\n  \n\n\n\n\nexecuteScript\n\n\nExecutes sync script on a page.\nPass arguments to function as additional parameters.\nWill return execution result to a test.\nIn this case you should use generator and yield to receive results.\n\n\nParameters\n\n\n\n\nfn\n  \n\n\n\n\nfillField\n\n\nFills a text field or textarea, after clearing its value, with the given string.\nField is located by name, label, CSS, or XPath.\n\n\n// by label\nI.fillField('Email', 'hello@world.com');\n// by name\nI.fillField('password', '123456');\n// by CSS\nI.fillField('form#login input[name=username]', 'John');\n// or by strict locator\nI.fillField({css: 'form#login input[name=username]'}, 'John');\n\n\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\nvalue\n  \n\n\n\n\ngrabAttributeFrom\n\n\nRetrieves an attribute from an element located by CSS or XPath and returns it to test.\nResumes test execution, so \nshould be used inside a generator with \nyield\n operator.\n\n\nlet hint = yield I.grabAttributeFrom('#tooltip', 'title');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  element located by CSS|XPath|strict locator\n\n\nattr\n  \n\n\n\n\ngrabCookie\n\n\nGets a cookie object by name\nResumes test execution, so \nshould be used inside a generator with \nyield\n operator.\n\n\nlet cookie = I.grabCookie('auth');\nassert(cookie.value, '123456');\n\n\n\n\nParameters\n\n\n\n\nname\n  Returns cookie in JSON format. If name not passed returns all cookies for this domain.Multiple cookies can be received by passing query object:\njs\n    I.grabCookie({ secure: true});\nIf you'd like get all cookies for all urls, use: \n.grabCookie({ url: null }).\n\n\n\n\ngrabTextFrom\n\n\nRetrieves a text from an element located by CSS or XPath and returns it to test.\nResumes test execution, so \nshould be used inside a generator with \nyield\n operator.\n\n\nlet pin = yield I.grabTextFrom('#pin');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  element located by CSS|XPath|strict locator\n\n\n\n\ngrabTitle\n\n\nRetrieves a page title and returns it to test.\nResumes test execution, so \nshould be used inside a generator with \nyield\n operator.\n\n\nlet title = yield I.grabTitle();\n\n\n\n\ngrabValueFrom\n\n\nRetrieves a value from a form element located by CSS or XPath and returns it to test.\nResumes test execution, so \nshould be used inside a generator with \nyield\n operator.\n\n\nlet email = yield I.grabValueFrom('input[name=email]');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  field located by label|name|CSS|XPath|strict locator\n\n\n\n\nhaveHeader\n\n\nAdd a header override for all HTTP requests. If header is undefined, the header overrides will be reset.\n\n\nI.haveHeader('x-my-custom-header', 'some value');\nI.haveHeader(); // clear headers\n\n\n\n\nParameters\n\n\n\n\nheader\n  \n\n\nvalue\n  \n\n\n\n\npressKey\n\n\nSends \ninput event\n on a page.\nCan submit special keys like 'Enter', 'Backspace', etc\n\n\nParameters\n\n\n\n\nkey\n  \n\n\n\n\nresizeWindow\n\n\nResize the current window to provided width and height.\nFirst parameter can be set to \nmaximize\n\n\nParameters\n\n\n\n\nwidth\n  or \nmaximize\n\n\nheight\n  \n\n\n\n\nresizeWindow\n\n\nResize the current window to provided width and height.\nFirst parameter can be set to \nmaximize\n\n\nParameters\n\n\n\n\nwidth\n  or \nmaximize\n\n\nheight\n  \n\n\n\n\nsaveScreenshot\n\n\nSaves a screenshot to ouput folder (set in codecept.json).\nFilename is relative to output folder.\n\n\nI.saveScreenshot('debug.png');\n\n\n\n\nParameters\n\n\n\n\nfileName\n  \n\n\n\n\nscrollTo\n\n\nScrolls to element matched by locator.\nExtra shift can be set with offsetX and offsetY options\n\n\nI.scrollTo('footer');\nI.scrollTo('#submit', 5,5);\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\noffsetX\n  \n\n\noffsetY\n  \n\n\n\n\nsee\n\n\nChecks that a page contains a visible text.\nUse context parameter to narrow down the search.\n\n\nI.see('Welcome'); // text welcome on a page\nI.see('Welcome', '.content'); // text inside .content div\nI.see('Register', {css: 'form.register'}); // use strict locator\n\n\n\n\nParameters\n\n\n\n\ntext\n  expected on page\n\n\ncontext\n  (optional) element located by CSS|Xpath|strict locator in which to search for text\n\n\n\n\nseeCheckboxIsChecked\n\n\nVerifies that the specified checkbox is checked.\n\n\nI.seeCheckboxIsChecked('Agree');\nI.seeCheckboxIsChecked('#agree'); // I suppose user agreed to terms\nI.seeCheckboxIsChecked({css: '#signup_form input[type=checkbox]'});\n\n\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\n\n\nseeCookie\n\n\nChecks that cookie with given name exists.\n\n\nI.seeCookie('Auth');\n\n\n\n\nParameters\n\n\n\n\nname\n  \n\n\n\n\nseeCurrentUrlEquals\n\n\nChecks that current url is equal to provided one.\nIf a relative url provided, a configured url will be prepended to it.\nSo both examples will work:\n\n\nI.seeCurrentUrlEquals('/register');\nI.seeCurrentUrlEquals('http://my.site.com/register');\n\n\n\n\nParameters\n\n\n\n\nurl\n  \n\n\n\n\nseeElement\n\n\nChecks that a given Element is visible\nElement is located by CSS or XPath.\n\n\nI.seeElement('#modal');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  located by CSS|XPath|strict locator\n\n\n\n\nseeElementInDOM\n\n\nChecks that a given Element is present in the DOM\nElement is located by CSS or XPath.\n\n\nI.seeElementInDOM('#modal');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  located by CSS|XPath|strict locator\n\n\n\n\nseeInCurrentUrl\n\n\nChecks that current url contains a provided fragment.\n\n\nI.seeInCurrentUrl('/register'); // we are on registration page\n\n\n\n\nParameters\n\n\n\n\nurl\n  \n\n\n\n\nseeInField\n\n\nChecks that the given input field or textarea equals to given value.\nFor fuzzy locators, fields are matched by label text, the \"name\" attribute, CSS, and XPath.\n\n\nI.seeInField('Username', 'davert');\nI.seeInField({css: 'form textarea'},'Type your comment here');\nI.seeInField('form input[type=hidden]','hidden_value');\nI.seeInField('#searchform input','Search');\n\n\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\nvalue\n  \n\n\n\n\nseeInSource\n\n\nChecks that the current page contains the given string in its raw source code.\n\n\nI.seeInSource('\nh1\nGreen eggs \namp; ham\n/h1\n');\n\n\n\n\nParameters\n\n\n\n\ntext\n  \n\n\n\n\nseeInTitle\n\n\nChecks that title contains text.\n\n\nParameters\n\n\n\n\ntext\n  \n\n\n\n\nselectOption\n\n\nSelects an option in a drop-down select.\nField is searched by label | name | CSS | XPath.\nOption is selected by visible text or by value.\n\n\nI.selectOption('Choose Plan', 'Monthly'); // select by label\nI.selectOption('subscription', 'Monthly'); // match option by text\nI.selectOption('subscription', '0'); // or by value\nI.selectOption('//form/select[@name=account]','Premium');\nI.selectOption('form select[name=account]', 'Premium');\nI.selectOption({css: 'form select[name=account]'}, 'Premium');\n\n\n\n\nProvide an array for the second argument to select multiple options.\n\n\nI.selectOption('Which OS do you use?', ['Android', 'iOS']);\n\n\n\n\nParameters\n\n\n\n\nselect\n  field located by label|name|CSS|XPath|strict locator\n\n\noption\n  \n\n\n\n\nsetCookie\n\n\nSets a cookie\n\n\nI.setCookie({name: 'auth', value: true});\n\n\n\n\nParameters\n\n\n\n\ncookie\n  Wrapper for \n.cookies.set(cookie)\n.\n    \nSee more\n\n\n\n\nwait\n\n\nPauses execution for a number of seconds.\n\n\nI.wait(2); // wait 2 secs\n\n\n\n\nParameters\n\n\n\n\nsec\n  \n\n\n\n\nwaitForElement\n\n\nWaits for element to be present on page (by default waits for 1sec).\nElement can be located by CSS or XPath.\n\n\nI.waitForElement('.btn.continue');\nI.waitForElement('.btn.continue', 5); // wait for 5 secs\n\n\n\n\nParameters\n\n\n\n\nlocator\n  element located by CSS|XPath|strict locator\n\n\nsec\n  time seconds to wait, 1 by default\n\n\n\n\nwaitForText\n\n\nWaits for a text to appear (by default waits for 1sec).\nElement can be located by CSS or XPath.\nNarrow down search results by providing context.\n\n\nI.waitForText('Thank you, form has been submitted');\nI.waitForText('Thank you, form has been submitted', 5, '#modal');\n\n\n\n\nParameters\n\n\n\n\ntext\n  to wait for\n\n\nsec\n  seconds to wait\n\n\ncontext\n  element located by CSS|XPath|strict locator\n\n\n\n\nwaitForVisible\n\n\nWaits for an element to become visible on a page (by default waits for 1sec).\nElement can be located by CSS or XPath.\n\n\nI.waitForVisible('#popup');\n\n\n\nParameters\n\n\n\n\nlocator\n  element located by CSS|XPath|strict locator\n\n\nsec\n  time seconds to wait, 1 by default", 
            "title": "Nightmare"
        }, 
        {
            "location": "/helpers/Nightmare/#nightmare", 
            "text": "Nightmare helper wraps  Nightmare  library to provide\nfastest headless testing using Electron engine. Unlike Selenium-based drivers this uses\nChromium-based browser with Electron with lots of client side scripts, thus should be less stable and\nless trusted.  Requires  nightmare  and  nigthmare-upload  packages to be installed.  Configuration  This helper should be configured in codecept.json   url  - base url of website to be tested  waitForAction : (optional) how long to wait after click, doubleClick or PressKey actions in ms. Default: 500  waitForTimeout : (optional) default wait* timeout   windowSize : (optional) default window size. Set a dimension like  640x480 .    options from  Nightmare configuration    Parameters   config", 
            "title": "Nightmare"
        }, 
        {
            "location": "/helpers/Nightmare/#_locate", 
            "text": "Locate elements by different locator types, including strict locator.\nShould be used in custom helpers.  This method return promise with array of IDs of found elements.\nActual elements can be accessed inside  evaulate  by using  codeceptjs.fetchElement() \nclient-side function:  // get an inner text of an element\n\nlet browser = this.helpers['Nigthmare'].browser;\nlet value = this.helpers['Nigthmare']._locate({name: 'password'}).then(function(els) {\n  return browser.evaluate(function(el) {\n    return codeceptjs.fetchElement(el).value;\n  }, els[0]);\n});  Parameters   locator", 
            "title": "_locate"
        }, 
        {
            "location": "/helpers/Nightmare/#amonpage", 
            "text": "Opens a web page in a browser. Requires relative or absolute url.\nIf url starts with  / , opens a web page of a site defined in  url  config parameter.  I.amOnPage('/'); // opens main page of website\nI.amOnPage('https://github.com'); // opens github\nI.amOnPage('/login'); // opens a login page  Parameters   url   url path or global urlIn a second argument a list of request headers can be passed: js\n    I.amOnPage('/auth', [{'x-my-custom-header': 'some value'}])  headers", 
            "title": "amOnPage"
        }, 
        {
            "location": "/helpers/Nightmare/#appendfield", 
            "text": "Appends text to a input field or textarea.\nField is located by name, label, CSS or XPath  I.appendField('#myTextField', 'appended');  Parameters   field   located by label|name|CSS|XPath|strict locator  value   text value", 
            "title": "appendField"
        }, 
        {
            "location": "/helpers/Nightmare/#attachfile", 
            "text": "Attaches a file to element located by label, name, CSS or XPath\nPath to file is relative current codecept directory (where codecept.json is located).\nFile will be uploaded to remove system (if tests are running remotely).  I.attachFile('Avatar', 'data/avatar.jpg');\nI.attachFile('form input[name=avatar]', 'data/avatar.jpg');  Parameters   locator   field located by label|name|CSS|XPath|strict locator  pathToFile   local file path relative to codecept.json config fileDue to technical limitation this  works only with CSS selectors", 
            "title": "attachFile"
        }, 
        {
            "location": "/helpers/Nightmare/#checkoption", 
            "text": "Selects a checkbox or radio button.\nElement is located by label or name or CSS or XPath.  The second parameter is a context (CSS or XPath locator) to narrow the search.  I.checkOption('#agree');\nI.checkOption('I Agree to Terms and Conditions');\nI.checkOption('agree', '//form');  Parameters     -    field   checkbox located by label  name  CSS", 
            "title": "checkOption"
        }, 
        {
            "location": "/helpers/Nightmare/#clearcookie", 
            "text": "Clears a cookie by name,\nif none provided clears all cookies  I.clearCookie();\nI.clearCookie('test');  Parameters   cookie   (optional)", 
            "title": "clearCookie"
        }, 
        {
            "location": "/helpers/Nightmare/#click", 
            "text": "Perform a click on a link or a button, given by a locator.\nIf a fuzzy locator is given, the page will be searched for a button, link, or image matching the locator string.\nFor buttons, the \"value\" attribute, \"name\" attribute, and inner text are searched. For links, the link text is searched.\nFor images, the \"alt\" attribute and inner text of any parent links are searched.  The second parameter is a context (CSS or XPath locator) to narrow the search.  // simple link\nI.click('Logout');\n// button of form\nI.click('Submit');\n// CSS button\nI.click('#form input[type=submit]');\n// XPath\nI.click('//form/*[@type=submit]');\n// link in context\nI.click('Logout', '#nav');\n// using strict locator\nI.click({css: 'nav a.login'});  Parameters     -    locator   clickable link or button located by text, or any element located by CSS  XPath  strict locator", 
            "title": "click"
        }, 
        {
            "location": "/helpers/Nightmare/#dontsee", 
            "text": "Opposite to  see . Checks that a text is not present on a page.\nUse context parameter to narrow down the search.  I.dontSee('Login'); // assume we are already logged in  Parameters   text   is not present  context   (optional) element located by CSS|XPath|strict locator in which to perfrom search", 
            "title": "dontSee"
        }, 
        {
            "location": "/helpers/Nightmare/#dontseecheckboxischecked", 
            "text": "Verifies that the specified checkbox is not checked.  Parameters   field   located by label|name|CSS|XPath|strict locator", 
            "title": "dontSeeCheckboxIsChecked"
        }, 
        {
            "location": "/helpers/Nightmare/#dontseecookie", 
            "text": "Checks that cookie with given name does not exist.  Parameters   name", 
            "title": "dontSeeCookie"
        }, 
        {
            "location": "/helpers/Nightmare/#dontseecurrenturlequals", 
            "text": "Checks that current url is not equal to provided one.\nIf a relative url provided, a configured url will be prepended to it.  Parameters   url", 
            "title": "dontSeeCurrentUrlEquals"
        }, 
        {
            "location": "/helpers/Nightmare/#dontseeelement", 
            "text": "Opposite to  seeElement . Checks that element is not visible  Parameters   locator   located by CSS|XPath|Strict locator", 
            "title": "dontSeeElement"
        }, 
        {
            "location": "/helpers/Nightmare/#dontseeelementindom", 
            "text": "Opposite to  seeElementInDOM . Checks that element is not on page.  Parameters   locator   located by CSS|XPath|Strict locator", 
            "title": "dontSeeElementInDOM"
        }, 
        {
            "location": "/helpers/Nightmare/#dontseeincurrenturl", 
            "text": "Checks that current url does not contain a provided fragment.  Parameters   url", 
            "title": "dontSeeInCurrentUrl"
        }, 
        {
            "location": "/helpers/Nightmare/#dontseeinfield", 
            "text": "Checks that value of input field or textare doesn't equal to given value\nOpposite to  seeInField .  Parameters   field   located by label|name|CSS|XPath|strict locator  value   is not expected to be a field value", 
            "title": "dontSeeInField"
        }, 
        {
            "location": "/helpers/Nightmare/#dontseeinsource", 
            "text": "Checks that the current page contains the given string in its raw source code  Parameters   text", 
            "title": "dontSeeInSource"
        }, 
        {
            "location": "/helpers/Nightmare/#dontseeintitle", 
            "text": "Checks that title does not contain text.  Parameters   text", 
            "title": "dontSeeInTitle"
        }, 
        {
            "location": "/helpers/Nightmare/#doubleclick", 
            "text": "Performs a double-click on an element matched by link|button|label|CSS or XPath.\nContext can be specified as second parameter to narrow search.  I.doubleClick('Edit');\nI.doubleClick('Edit', '.actions');\nI.doubleClick({css: 'button.accept'});\nI.doubleClick('.btn.edit');  Parameters   locator     context", 
            "title": "doubleClick"
        }, 
        {
            "location": "/helpers/Nightmare/#executeasyncscript", 
            "text": "Executes async script on page.\nProvided function should execute a passed callback (as first argument) to signal it is finished.  Parameters   fn", 
            "title": "executeAsyncScript"
        }, 
        {
            "location": "/helpers/Nightmare/#executescript", 
            "text": "Executes sync script on a page.\nPass arguments to function as additional parameters.\nWill return execution result to a test.\nIn this case you should use generator and yield to receive results.  Parameters   fn", 
            "title": "executeScript"
        }, 
        {
            "location": "/helpers/Nightmare/#fillfield", 
            "text": "Fills a text field or textarea, after clearing its value, with the given string.\nField is located by name, label, CSS, or XPath.  // by label\nI.fillField('Email', 'hello@world.com');\n// by name\nI.fillField('password', '123456');\n// by CSS\nI.fillField('form#login input[name=username]', 'John');\n// or by strict locator\nI.fillField({css: 'form#login input[name=username]'}, 'John');  Parameters   field   located by label|name|CSS|XPath|strict locator  value", 
            "title": "fillField"
        }, 
        {
            "location": "/helpers/Nightmare/#grabattributefrom", 
            "text": "Retrieves an attribute from an element located by CSS or XPath and returns it to test.\nResumes test execution, so  should be used inside a generator with  yield  operator.  let hint = yield I.grabAttributeFrom('#tooltip', 'title');  Parameters   locator   element located by CSS|XPath|strict locator  attr", 
            "title": "grabAttributeFrom"
        }, 
        {
            "location": "/helpers/Nightmare/#grabcookie", 
            "text": "Gets a cookie object by name\nResumes test execution, so  should be used inside a generator with  yield  operator.  let cookie = I.grabCookie('auth');\nassert(cookie.value, '123456');  Parameters   name   Returns cookie in JSON format. If name not passed returns all cookies for this domain.Multiple cookies can be received by passing query object: js\n    I.grabCookie({ secure: true}); If you'd like get all cookies for all urls, use:  .grabCookie({ url: null }).", 
            "title": "grabCookie"
        }, 
        {
            "location": "/helpers/Nightmare/#grabtextfrom", 
            "text": "Retrieves a text from an element located by CSS or XPath and returns it to test.\nResumes test execution, so  should be used inside a generator with  yield  operator.  let pin = yield I.grabTextFrom('#pin');  Parameters   locator   element located by CSS|XPath|strict locator", 
            "title": "grabTextFrom"
        }, 
        {
            "location": "/helpers/Nightmare/#grabtitle", 
            "text": "Retrieves a page title and returns it to test.\nResumes test execution, so  should be used inside a generator with  yield  operator.  let title = yield I.grabTitle();", 
            "title": "grabTitle"
        }, 
        {
            "location": "/helpers/Nightmare/#grabvaluefrom", 
            "text": "Retrieves a value from a form element located by CSS or XPath and returns it to test.\nResumes test execution, so  should be used inside a generator with  yield  operator.  let email = yield I.grabValueFrom('input[name=email]');  Parameters   locator   field located by label|name|CSS|XPath|strict locator", 
            "title": "grabValueFrom"
        }, 
        {
            "location": "/helpers/Nightmare/#haveheader", 
            "text": "Add a header override for all HTTP requests. If header is undefined, the header overrides will be reset.  I.haveHeader('x-my-custom-header', 'some value');\nI.haveHeader(); // clear headers  Parameters   header     value", 
            "title": "haveHeader"
        }, 
        {
            "location": "/helpers/Nightmare/#presskey", 
            "text": "Sends  input event  on a page.\nCan submit special keys like 'Enter', 'Backspace', etc  Parameters   key", 
            "title": "pressKey"
        }, 
        {
            "location": "/helpers/Nightmare/#resizewindow", 
            "text": "Resize the current window to provided width and height.\nFirst parameter can be set to  maximize  Parameters   width   or  maximize  height", 
            "title": "resizeWindow"
        }, 
        {
            "location": "/helpers/Nightmare/#resizewindow_1", 
            "text": "Resize the current window to provided width and height.\nFirst parameter can be set to  maximize  Parameters   width   or  maximize  height", 
            "title": "resizeWindow"
        }, 
        {
            "location": "/helpers/Nightmare/#savescreenshot", 
            "text": "Saves a screenshot to ouput folder (set in codecept.json).\nFilename is relative to output folder.  I.saveScreenshot('debug.png');  Parameters   fileName", 
            "title": "saveScreenshot"
        }, 
        {
            "location": "/helpers/Nightmare/#scrollto", 
            "text": "Scrolls to element matched by locator.\nExtra shift can be set with offsetX and offsetY options  I.scrollTo('footer');\nI.scrollTo('#submit', 5,5);  Parameters   locator     offsetX     offsetY", 
            "title": "scrollTo"
        }, 
        {
            "location": "/helpers/Nightmare/#see", 
            "text": "Checks that a page contains a visible text.\nUse context parameter to narrow down the search.  I.see('Welcome'); // text welcome on a page\nI.see('Welcome', '.content'); // text inside .content div\nI.see('Register', {css: 'form.register'}); // use strict locator  Parameters   text   expected on page  context   (optional) element located by CSS|Xpath|strict locator in which to search for text", 
            "title": "see"
        }, 
        {
            "location": "/helpers/Nightmare/#seecheckboxischecked", 
            "text": "Verifies that the specified checkbox is checked.  I.seeCheckboxIsChecked('Agree');\nI.seeCheckboxIsChecked('#agree'); // I suppose user agreed to terms\nI.seeCheckboxIsChecked({css: '#signup_form input[type=checkbox]'});  Parameters   field   located by label|name|CSS|XPath|strict locator", 
            "title": "seeCheckboxIsChecked"
        }, 
        {
            "location": "/helpers/Nightmare/#seecookie", 
            "text": "Checks that cookie with given name exists.  I.seeCookie('Auth');  Parameters   name", 
            "title": "seeCookie"
        }, 
        {
            "location": "/helpers/Nightmare/#seecurrenturlequals", 
            "text": "Checks that current url is equal to provided one.\nIf a relative url provided, a configured url will be prepended to it.\nSo both examples will work:  I.seeCurrentUrlEquals('/register');\nI.seeCurrentUrlEquals('http://my.site.com/register');  Parameters   url", 
            "title": "seeCurrentUrlEquals"
        }, 
        {
            "location": "/helpers/Nightmare/#seeelement", 
            "text": "Checks that a given Element is visible\nElement is located by CSS or XPath.  I.seeElement('#modal');  Parameters   locator   located by CSS|XPath|strict locator", 
            "title": "seeElement"
        }, 
        {
            "location": "/helpers/Nightmare/#seeelementindom", 
            "text": "Checks that a given Element is present in the DOM\nElement is located by CSS or XPath.  I.seeElementInDOM('#modal');  Parameters   locator   located by CSS|XPath|strict locator", 
            "title": "seeElementInDOM"
        }, 
        {
            "location": "/helpers/Nightmare/#seeincurrenturl", 
            "text": "Checks that current url contains a provided fragment.  I.seeInCurrentUrl('/register'); // we are on registration page  Parameters   url", 
            "title": "seeInCurrentUrl"
        }, 
        {
            "location": "/helpers/Nightmare/#seeinfield", 
            "text": "Checks that the given input field or textarea equals to given value.\nFor fuzzy locators, fields are matched by label text, the \"name\" attribute, CSS, and XPath.  I.seeInField('Username', 'davert');\nI.seeInField({css: 'form textarea'},'Type your comment here');\nI.seeInField('form input[type=hidden]','hidden_value');\nI.seeInField('#searchform input','Search');  Parameters   field   located by label|name|CSS|XPath|strict locator  value", 
            "title": "seeInField"
        }, 
        {
            "location": "/helpers/Nightmare/#seeinsource", 
            "text": "Checks that the current page contains the given string in its raw source code.  I.seeInSource(' h1 Green eggs  amp; ham /h1 ');  Parameters   text", 
            "title": "seeInSource"
        }, 
        {
            "location": "/helpers/Nightmare/#seeintitle", 
            "text": "Checks that title contains text.  Parameters   text", 
            "title": "seeInTitle"
        }, 
        {
            "location": "/helpers/Nightmare/#selectoption", 
            "text": "Selects an option in a drop-down select.\nField is searched by label | name | CSS | XPath.\nOption is selected by visible text or by value.  I.selectOption('Choose Plan', 'Monthly'); // select by label\nI.selectOption('subscription', 'Monthly'); // match option by text\nI.selectOption('subscription', '0'); // or by value\nI.selectOption('//form/select[@name=account]','Premium');\nI.selectOption('form select[name=account]', 'Premium');\nI.selectOption({css: 'form select[name=account]'}, 'Premium');  Provide an array for the second argument to select multiple options.  I.selectOption('Which OS do you use?', ['Android', 'iOS']);  Parameters   select   field located by label|name|CSS|XPath|strict locator  option", 
            "title": "selectOption"
        }, 
        {
            "location": "/helpers/Nightmare/#setcookie", 
            "text": "Sets a cookie  I.setCookie({name: 'auth', value: true});  Parameters   cookie   Wrapper for  .cookies.set(cookie) .\n     See more", 
            "title": "setCookie"
        }, 
        {
            "location": "/helpers/Nightmare/#wait", 
            "text": "Pauses execution for a number of seconds.  I.wait(2); // wait 2 secs  Parameters   sec", 
            "title": "wait"
        }, 
        {
            "location": "/helpers/Nightmare/#waitforelement", 
            "text": "Waits for element to be present on page (by default waits for 1sec).\nElement can be located by CSS or XPath.  I.waitForElement('.btn.continue');\nI.waitForElement('.btn.continue', 5); // wait for 5 secs  Parameters   locator   element located by CSS|XPath|strict locator  sec   time seconds to wait, 1 by default", 
            "title": "waitForElement"
        }, 
        {
            "location": "/helpers/Nightmare/#waitfortext", 
            "text": "Waits for a text to appear (by default waits for 1sec).\nElement can be located by CSS or XPath.\nNarrow down search results by providing context.  I.waitForText('Thank you, form has been submitted');\nI.waitForText('Thank you, form has been submitted', 5, '#modal');  Parameters   text   to wait for  sec   seconds to wait  context   element located by CSS|XPath|strict locator", 
            "title": "waitForText"
        }, 
        {
            "location": "/helpers/Nightmare/#waitforvisible", 
            "text": "Waits for an element to become visible on a page (by default waits for 1sec).\nElement can be located by CSS or XPath.  I.waitForVisible('#popup');  Parameters   locator   element located by CSS|XPath|strict locator  sec   time seconds to wait, 1 by default", 
            "title": "waitForVisible"
        }, 
        {
            "location": "/helpers/FileSystem/", 
            "text": "FileSystem\n\n\nHelper for testing filesystem.\nCan be easily used to check file structures:\n\n\nI.amInPath('test');\nI.seeFile('codecept.json');\nI.seeInThisFile('FileSystem');\nI.dontSeeInThisFile(\nWebDriverIO\n);\n\n\n\n\namInPath\n\n\nEnters a directory In local filesystem.\nStarts from a current directory\n\n\nParameters\n\n\n\n\nopenPath\n  \n\n\n\n\ndontSeeFileContentsEqual\n\n\nChecks that contents of file found by \nseeFile\n doesn't equal to text.\n\n\nParameters\n\n\n\n\ntext\n  \n\n\nencoding\n  \n\n\n\n\ndontSeeInThisFile\n\n\nChecks that file found by \nseeFile\n doesn't include text.\n\n\nParameters\n\n\n\n\ntext\n  \n\n\nencoding\n  \n\n\n\n\nseeFile\n\n\nChecks that file exists\n\n\nParameters\n\n\n\n\nname\n  \n\n\n\n\nseeFileContentsEqual\n\n\nChecks that contents of file found by \nseeFile\n equal to text.\n\n\nParameters\n\n\n\n\ntext\n  \n\n\nencoding\n  \n\n\n\n\nseeInThisFile\n\n\nChecks that file found by \nseeFile\n includes a text.\n\n\nParameters\n\n\n\n\ntext\n  \n\n\nencoding\n  \n\n\n\n\nwriteToFile\n\n\nWrites test to file\n\n\nParameters\n\n\n\n\nname\n  \n\n\ntext", 
            "title": "FileSystem"
        }, 
        {
            "location": "/helpers/FileSystem/#filesystem", 
            "text": "Helper for testing filesystem.\nCan be easily used to check file structures:  I.amInPath('test');\nI.seeFile('codecept.json');\nI.seeInThisFile('FileSystem');\nI.dontSeeInThisFile( WebDriverIO );", 
            "title": "FileSystem"
        }, 
        {
            "location": "/helpers/FileSystem/#aminpath", 
            "text": "Enters a directory In local filesystem.\nStarts from a current directory  Parameters   openPath", 
            "title": "amInPath"
        }, 
        {
            "location": "/helpers/FileSystem/#dontseefilecontentsequal", 
            "text": "Checks that contents of file found by  seeFile  doesn't equal to text.  Parameters   text     encoding", 
            "title": "dontSeeFileContentsEqual"
        }, 
        {
            "location": "/helpers/FileSystem/#dontseeinthisfile", 
            "text": "Checks that file found by  seeFile  doesn't include text.  Parameters   text     encoding", 
            "title": "dontSeeInThisFile"
        }, 
        {
            "location": "/helpers/FileSystem/#seefile", 
            "text": "Checks that file exists  Parameters   name", 
            "title": "seeFile"
        }, 
        {
            "location": "/helpers/FileSystem/#seefilecontentsequal", 
            "text": "Checks that contents of file found by  seeFile  equal to text.  Parameters   text     encoding", 
            "title": "seeFileContentsEqual"
        }, 
        {
            "location": "/helpers/FileSystem/#seeinthisfile", 
            "text": "Checks that file found by  seeFile  includes a text.  Parameters   text     encoding", 
            "title": "seeInThisFile"
        }, 
        {
            "location": "/helpers/FileSystem/#writetofile", 
            "text": "Writes test to file  Parameters   name     text", 
            "title": "writeToFile"
        }, 
        {
            "location": "/commands/", 
            "text": "Commands\n\n\nRun\n\n\nExecutes tests. Requires \ncodecept.json\n config to be present in provided path.\n\n\n\n\nRun all tests from current dir\n\n\ncodeceptjs run\n\n\n\n\nRun tests from \ntest\n dir\n\n\ncodeceptjs run test\n\n\n\n\nRun only tests with \"signin\" word in name\n\n\ncodeceptjs run --grep \nsignin\n\n\n\n\n\nRun single test [path to codecept.js] [test filename]\n\n\ncodeceptjs run . github_test.js\n\n\n\n\nRun single test with steps printed\n\n\ncodeceptjs run . github_test.js --steps\n\n\n\n\nRun single test in debug mode\n\n\ncodeceptjs run . github_test.js --debug\n\n\n\n\nRun test with internal logs printed (global promises, and events).\n\n\ncodeceptjs run . github_test.js --verbose\n\n\n\n\nRun tests and produce xunit report:\n\n\ncodeceptjs run --reporter xunit\n\n\n\n\nUse any of \nMocha reporters\n used.\n\n\nInit\n\n\nCreates \ncodecept.json\n file in current directory:\n\n\ncodeceptjs init\n\n\n\n\nOr in provided path\n\n\ncodecept init test\n\n\n\n\nShell\n\n\nInteractive shell. Allows to try \nI.\n commands in runtime\n\n\ncodeceptjs shell\n\n\n\n\nGenerators\n\n\nCreate new test\n\n\ncodeceptjs generate test\n\n\n\n\nCreate new pageobject\n\n\ncodeceptjs generate pageobject\n\n\n\n\nCreate new helper\n\n\ncodeceptjs generate helper\n\n\n\n\nTypeScript Definitions\n\n\nTypeScript Definitions allows IDEs to provide autocompletion when writing tests.\n\n\ncodeceptjs def\n\n\n\n\nProduces \nsteps.d.ts\n file, which refrerenced in the very beginning of a test file.\n\n\n/// \nreference path=\n./steps.d.ts\n /\n\nFeature('My new test');\n\n\n\n\nAfter doing that IDE should provide autocompletion for \nI\n object inside \nScenario\n and \nwithin\n blocks.\n\n\nList Commands\n\n\nPrints all avialable methods of \nI\n to console\n\n\ncodeceptjs list", 
            "title": "Commands"
        }, 
        {
            "location": "/commands/#commands", 
            "text": "", 
            "title": "Commands"
        }, 
        {
            "location": "/commands/#run", 
            "text": "Executes tests. Requires  codecept.json  config to be present in provided path.   Run all tests from current dir  codeceptjs run  Run tests from  test  dir  codeceptjs run test  Run only tests with \"signin\" word in name  codeceptjs run --grep  signin   Run single test [path to codecept.js] [test filename]  codeceptjs run . github_test.js  Run single test with steps printed  codeceptjs run . github_test.js --steps  Run single test in debug mode  codeceptjs run . github_test.js --debug  Run test with internal logs printed (global promises, and events).  codeceptjs run . github_test.js --verbose  Run tests and produce xunit report:  codeceptjs run --reporter xunit  Use any of  Mocha reporters  used.", 
            "title": "Run"
        }, 
        {
            "location": "/commands/#init", 
            "text": "Creates  codecept.json  file in current directory:  codeceptjs init  Or in provided path  codecept init test", 
            "title": "Init"
        }, 
        {
            "location": "/commands/#shell", 
            "text": "Interactive shell. Allows to try  I.  commands in runtime  codeceptjs shell", 
            "title": "Shell"
        }, 
        {
            "location": "/commands/#generators", 
            "text": "Create new test  codeceptjs generate test  Create new pageobject  codeceptjs generate pageobject  Create new helper  codeceptjs generate helper", 
            "title": "Generators"
        }, 
        {
            "location": "/commands/#typescript-definitions", 
            "text": "TypeScript Definitions allows IDEs to provide autocompletion when writing tests.  codeceptjs def  Produces  steps.d.ts  file, which refrerenced in the very beginning of a test file.  ///  reference path= ./steps.d.ts  / \nFeature('My new test');  After doing that IDE should provide autocompletion for  I  object inside  Scenario  and  within  blocks.", 
            "title": "TypeScript Definitions"
        }, 
        {
            "location": "/commands/#list-commands", 
            "text": "Prints all avialable methods of  I  to console  codeceptjs list", 
            "title": "List Commands"
        }, 
        {
            "location": "/configuration/", 
            "text": "Configuration\n\n\nCodeceptJS configuration is set in \ncodecept.js\n file.\n\n\nAfter running \ncodeceptjs init\n it should be saved in test root.\n\n\nHere is an overview of available options with their defaults:\n\n\n\n\ntests\n: \n\"./*_test.js\"\n - pattern to locate tests\n\n\ninclude\n: \n{}\n - actors and pageobjects to be registered in DI container and included in tests.\n\n\ntimeout\n: \n10000\n - default tests timeout\n\n\noutput\n: \n\"./output\"\n - where to store failure screenshots, etc\n\n\nhelpers\n: \n{}\n - list of enabled helpers\n\n\nmocha\n: \n{}\n - mocha options, \nreporters\n can be configured here\n\n\nname\n: \n\"tests\"\n - test suite name (not used)\n\n\nbootstrap\n: \n\"./bootstrap.js\"\n - JS file to be executed before tests\n\n\nteardown\n: - JS file to be executed after tests\n\n\ntranslation\n: - \nlocale\n to be used to print steps output, as well as used in source code.\n\n\n\n\nDynamic Configuration\n\n\nBy default \ncodecept.json\n is used for configuration. However, you can switch to JS format for more dynamic options.\n Create \ncodecept.conf.js\n file and make it export \nconfig\n property.\n\n\nSee the config example:\n\n\nexports.config = {\n  helpers: {\n    WebDriverIO: {\n      // load variables from the environment and provide defaults\n      url: process.env.CODECEPT_URL || 'http://localhost:3000',\n      browser: process.profile || 'chrome',\n\n      user: process.env.CLOUDSERVICE_USER,\n      key: process.env.CLOUDSERVICE_KEY,\n\n      coloredLogs: true,\n      waitforTimeout: 10000\n    }\n  },\n  // don't build monolithic configs\n  mocha: require('./mocha.conf.js') || {},\n\n  // here goes config as it was in codecept.json\n  // ....\n};\n\n\n\n\n(Don't copy-paste this config, it's just demo)\n\n\nProfile\n\n\nUsing values from \nprocess.profile\n you can change the config dynamically.\nIt provides value of \n--profile\n option passed to runner.\nUse its value to change config value on the fly.\n\n\nFor instance, with the config above we can change browser value using \nprofile\n option\n\n\ncodeceptjs run --profile firefox", 
            "title": "Configuration"
        }, 
        {
            "location": "/configuration/#configuration", 
            "text": "CodeceptJS configuration is set in  codecept.js  file.  After running  codeceptjs init  it should be saved in test root.  Here is an overview of available options with their defaults:   tests :  \"./*_test.js\"  - pattern to locate tests  include :  {}  - actors and pageobjects to be registered in DI container and included in tests.  timeout :  10000  - default tests timeout  output :  \"./output\"  - where to store failure screenshots, etc  helpers :  {}  - list of enabled helpers  mocha :  {}  - mocha options,  reporters  can be configured here  name :  \"tests\"  - test suite name (not used)  bootstrap :  \"./bootstrap.js\"  - JS file to be executed before tests  teardown : - JS file to be executed after tests  translation : -  locale  to be used to print steps output, as well as used in source code.", 
            "title": "Configuration"
        }, 
        {
            "location": "/configuration/#dynamic-configuration", 
            "text": "By default  codecept.json  is used for configuration. However, you can switch to JS format for more dynamic options.\n Create  codecept.conf.js  file and make it export  config  property.  See the config example:  exports.config = {\n  helpers: {\n    WebDriverIO: {\n      // load variables from the environment and provide defaults\n      url: process.env.CODECEPT_URL || 'http://localhost:3000',\n      browser: process.profile || 'chrome',\n\n      user: process.env.CLOUDSERVICE_USER,\n      key: process.env.CLOUDSERVICE_KEY,\n\n      coloredLogs: true,\n      waitforTimeout: 10000\n    }\n  },\n  // don't build monolithic configs\n  mocha: require('./mocha.conf.js') || {},\n\n  // here goes config as it was in codecept.json\n  // ....\n};  (Don't copy-paste this config, it's just demo)", 
            "title": "Dynamic Configuration"
        }, 
        {
            "location": "/configuration/#profile", 
            "text": "Using values from  process.profile  you can change the config dynamically.\nIt provides value of  --profile  option passed to runner.\nUse its value to change config value on the fly.  For instance, with the config above we can change browser value using  profile  option  codeceptjs run --profile firefox", 
            "title": "Profile"
        }, 
        {
            "location": "/reports/", 
            "text": "Reporters\n\n\nCli (default)\n\n\nBy default CodeceptJS provides cli reporter with console output.\nTest names and failures will be printed to screen.\n\n\nGitHub --\n \u2713 search in 2577ms\n \u2713 signin in 2170ms\n \u2716 register in 1306ms\n\n-- FAILURES:\n\n  1) GitHub: register:\n      Field q not found by name|text|CSS|XPath\n\n  Scenario Steps:\n\n  - I.fillField(\nq\n, \naaa\n) at examples/github_test.js:29:7\n  - I.fillField(\nuser[password]\n, \nuser@user.com\n) at examples/github_test.js:28:7\n  - I.fillField(\nuser[email]\n, \nuser@user.com\n) at examples/github_test.js:27:7\n  - I.fillField(\nuser[login]\n, \nUser\n) at examples/github_test.js:26:7\n\n\n\n  Run with --verbose flag to see NodeJS stacktrace\n\n\n\n\nFor dynamic step-by-step output add \n--steps\n option to \nrun\n command:\n\n\nGitHub --\n search\n \u2022 I am on page \nhttps://github.com\n\n \u2022 I am on page \nhttps://github.com/search\n\n \u2022 I fill field \nSearch GitHub\n, \nCodeceptJS\n\n \u2022 I press key \nEnter\n\n \u2022 I see \nCodeception/CodeceptJS\n, \na\n\n \u2713 OK in 2681ms\n\n signin\n \u2022 I am on page \nhttps://github.com\n\n \u2022 I click \nSign in\n\n \u2022 I see \nSign in to GitHub\n\n \u2022 I fill field \nUsername or email address\n, \nsomething@totest.com\n\n \u2022 I fill field \nPassword\n, \n123456\n\n \u2022 I click \nSign in\n\n \u2022 I see \nIncorrect username or password.\n, \n.flash-error\n\n \u2713 OK in 2252ms\n\n register\n \u2022 I am on page \nhttps://github.com\n\n   Within .js-signup-form:\n   \u2022 I fill field \nuser[login]\n, \nUser\n\n   \u2022 I fill field \nuser[email]\n, \nuser@user.com\n\n   \u2022 I fill field \nuser[password]\n, \nuser@user.com\n\n   \u2022 I fill field \nq\n, \naaa\n\n \u2716 FAILED in 1260ms\n\n\n\n\nTo get additional information about test execution use \n--debug\n option. This will show execution steps\nas well as notices from test runner. To get even more information with more technical details like error stacktraces,\nand global promises, or events use \n--verbose\n mode.\n\n\nGitHub --\n register\n   [1] Starting recording promises\n   Emitted | test.before\n \n WebDriverIO._before\n   [1] Queued | hook WebDriverIO._before()\n   [1] Queued | amOnPage: https://github.com\n   Emitted | step.before (I am on page \nhttps://github.com\n)\n \u2022 I am on page \nhttps://github.com\n\n   Emitted | step.after (I am on page \nhttps://github.com\n)\n   Emitted | test.start ([object Object])\n...\n\n\n\n\nPlease use verbose output when reporting issues to GitHub.\n\n\nXML\n\n\nUse default xunit reporter of Mocha to print xml reports. Provide \n--reporter xunit\n to get the report to screen.\nIt is recommended to use more powerful \nmocha-junit-reporter\n package\not get better support for Jenkins CI.\n\n\nInstall it via NPM (locally or globally, depending on CodeceptJS installation type):\n\n\nnpm i mocha-junit-reporter\n\n\n\n\nAdditional configuration should be added to \ncodecept.json\n to print xml report to \noutput\n directory:\n\n\n  \nmocha\n: {\n    \nreporterOptions\n: {\n        \nmochaFile\n: \noutput/result.xml\n\n    }\n  },\n\n\n\n\nExecute CodeceptJS with JUnit reporter:\n\n\ncodeceptjs run --reporter mocha-junit-reporter\n\n\n\n\nResult will be located at \noutput/result.xml\n file.\n\n\nHtml\n\n\nBest HTML reports could be prodused with \nmochawesome\n reporter.\n\n\n\n\nInstall it via NPM:\n\n\nnpm i mochawesome\n\n\n\n\nConfigure it to use \noutput\n directory to print HTML reports:\n\n\n  \nmocha\n: {\n    \nreporterOptions\n: {\n        \nreportDir\n: \noutput\n\n    }\n  },\n\n\n\n\nExecute CodeceptJS with HTML reporter:\n\n\ncodeceptjs run --reporter mochawesome.\n\n\n\n\nResult will be located at \noutput/index.html\n file.", 
            "title": "Reports"
        }, 
        {
            "location": "/reports/#reporters", 
            "text": "", 
            "title": "Reporters"
        }, 
        {
            "location": "/reports/#cli-default", 
            "text": "By default CodeceptJS provides cli reporter with console output.\nTest names and failures will be printed to screen.  GitHub --\n \u2713 search in 2577ms\n \u2713 signin in 2170ms\n \u2716 register in 1306ms\n\n-- FAILURES:\n\n  1) GitHub: register:\n      Field q not found by name|text|CSS|XPath\n\n  Scenario Steps:\n\n  - I.fillField( q ,  aaa ) at examples/github_test.js:29:7\n  - I.fillField( user[password] ,  user@user.com ) at examples/github_test.js:28:7\n  - I.fillField( user[email] ,  user@user.com ) at examples/github_test.js:27:7\n  - I.fillField( user[login] ,  User ) at examples/github_test.js:26:7\n\n\n\n  Run with --verbose flag to see NodeJS stacktrace  For dynamic step-by-step output add  --steps  option to  run  command:  GitHub --\n search\n \u2022 I am on page  https://github.com \n \u2022 I am on page  https://github.com/search \n \u2022 I fill field  Search GitHub ,  CodeceptJS \n \u2022 I press key  Enter \n \u2022 I see  Codeception/CodeceptJS ,  a \n \u2713 OK in 2681ms\n\n signin\n \u2022 I am on page  https://github.com \n \u2022 I click  Sign in \n \u2022 I see  Sign in to GitHub \n \u2022 I fill field  Username or email address ,  something@totest.com \n \u2022 I fill field  Password ,  123456 \n \u2022 I click  Sign in \n \u2022 I see  Incorrect username or password. ,  .flash-error \n \u2713 OK in 2252ms\n\n register\n \u2022 I am on page  https://github.com \n   Within .js-signup-form:\n   \u2022 I fill field  user[login] ,  User \n   \u2022 I fill field  user[email] ,  user@user.com \n   \u2022 I fill field  user[password] ,  user@user.com \n   \u2022 I fill field  q ,  aaa \n \u2716 FAILED in 1260ms  To get additional information about test execution use  --debug  option. This will show execution steps\nas well as notices from test runner. To get even more information with more technical details like error stacktraces,\nand global promises, or events use  --verbose  mode.  GitHub --\n register\n   [1] Starting recording promises\n   Emitted | test.before\n   WebDriverIO._before\n   [1] Queued | hook WebDriverIO._before()\n   [1] Queued | amOnPage: https://github.com\n   Emitted | step.before (I am on page  https://github.com )\n \u2022 I am on page  https://github.com \n   Emitted | step.after (I am on page  https://github.com )\n   Emitted | test.start ([object Object])\n...  Please use verbose output when reporting issues to GitHub.", 
            "title": "Cli (default)"
        }, 
        {
            "location": "/reports/#xml", 
            "text": "Use default xunit reporter of Mocha to print xml reports. Provide  --reporter xunit  to get the report to screen.\nIt is recommended to use more powerful  mocha-junit-reporter  package\not get better support for Jenkins CI.  Install it via NPM (locally or globally, depending on CodeceptJS installation type):  npm i mocha-junit-reporter  Additional configuration should be added to  codecept.json  to print xml report to  output  directory:     mocha : {\n     reporterOptions : {\n         mochaFile :  output/result.xml \n    }\n  },  Execute CodeceptJS with JUnit reporter:  codeceptjs run --reporter mocha-junit-reporter  Result will be located at  output/result.xml  file.", 
            "title": "XML"
        }, 
        {
            "location": "/reports/#html", 
            "text": "Best HTML reports could be prodused with  mochawesome  reporter.   Install it via NPM:  npm i mochawesome  Configure it to use  output  directory to print HTML reports:     mocha : {\n     reporterOptions : {\n         reportDir :  output \n    }\n  },  Execute CodeceptJS with HTML reporter:  codeceptjs run --reporter mochawesome.  Result will be located at  output/index.html  file.", 
            "title": "Html"
        }, 
        {
            "location": "/translation/", 
            "text": "Translation\n\n\nTest output and the way tests are written can be localized.\n\n\nCodeceptJS provides built in translations to:\n\n\n\n\nru-RU\n\n\npt-BR\n\n\n\n\nThey can be enabled in config file like:\n\n\n  \ntranslation\n: \nru-RU\n\n\n\n\n\nBy enabling this feature and running with \n--steps\n option steps will be translated:\n\n\n\n\nThis also enables localized method names for actor object.\n\n\nThis way tests can be written in native language while it is still JavaScript:\n\n\nScenario('\u043f\u0440\u043e\u0431\u0443\u044e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0440\u0435\u0444\u0435\u0440\u0430\u0442', (\u042f) =\n {\n    \u042f.\u043d\u0430_\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435('http://yandex.ru/referats');\n    \u042f.\u0432\u0438\u0436\u0443(\n\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0440\u0435\u0444\u0435\u0440\u0430\u0442 \u043f\u043e\n);\n    \u042f.\u0432\u044b\u0431\u0438\u0440\u0430\u044e_\u043e\u043f\u0446\u0438\u044e('\u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u0438');\n    \u042f.\u043a\u043b\u0438\u043a\u0430\u044e(\n\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0440\u0435\u0444\u0435\u0440\u0430\u0442\n);\n    \u042f.\u0432\u0438\u0436\u0443(\n\u0420\u0435\u0444\u0435\u0440\u0430\u0442 \u043f\u043e \u043f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u0438\n);\n});\n\n\n\n\nFor write your steps in portuguese you can enable the portuguese translation in config file like:\n\n\n  \ntranslation\n: \npt-BR\n\n\n\n\n\nYour test will be like this:\n\n\nScenario('Efetuar login', (Eu) =\n {\n    Eu.estouNaPagina('http://minhaAplicacao.com.br');\n    Eu.preenchoOCampo(\nlogin\n, \nusuario@minhaAplicacao.com.br\n);\n    Eu.preenchoOCampo(\nsenha\n, \n123456\n);\n    Eu.clico(\nEntrar\n);\n    Eu.vejo(\nSeja bem vindo usu\u00e1rio!\n);\n});\n\n\n\n\nTo get autocompletion for localized method names generate definitions by running\n\n\ncodeceptjs def", 
            "title": "Translation"
        }, 
        {
            "location": "/translation/#translation", 
            "text": "Test output and the way tests are written can be localized.  CodeceptJS provides built in translations to:   ru-RU  pt-BR   They can be enabled in config file like:     translation :  ru-RU   By enabling this feature and running with  --steps  option steps will be translated:   This also enables localized method names for actor object.  This way tests can be written in native language while it is still JavaScript:  Scenario('\u043f\u0440\u043e\u0431\u0443\u044e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0440\u0435\u0444\u0435\u0440\u0430\u0442', (\u042f) =  {\n    \u042f.\u043d\u0430_\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435('http://yandex.ru/referats');\n    \u042f.\u0432\u0438\u0436\u0443( \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0440\u0435\u0444\u0435\u0440\u0430\u0442 \u043f\u043e );\n    \u042f.\u0432\u044b\u0431\u0438\u0440\u0430\u044e_\u043e\u043f\u0446\u0438\u044e('\u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u0438');\n    \u042f.\u043a\u043b\u0438\u043a\u0430\u044e( \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0440\u0435\u0444\u0435\u0440\u0430\u0442 );\n    \u042f.\u0432\u0438\u0436\u0443( \u0420\u0435\u0444\u0435\u0440\u0430\u0442 \u043f\u043e \u043f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u0438 );\n});  For write your steps in portuguese you can enable the portuguese translation in config file like:     translation :  pt-BR   Your test will be like this:  Scenario('Efetuar login', (Eu) =  {\n    Eu.estouNaPagina('http://minhaAplicacao.com.br');\n    Eu.preenchoOCampo( login ,  usuario@minhaAplicacao.com.br );\n    Eu.preenchoOCampo( senha ,  123456 );\n    Eu.clico( Entrar );\n    Eu.vejo( Seja bem vindo usu\u00e1rio! );\n});  To get autocompletion for localized method names generate definitions by running  codeceptjs def", 
            "title": "Translation"
        }, 
        {
            "location": "/changelog/", 
            "text": "0.4.6\n\n\n\n\nAdded \nBeforeSuite\n and \nAfterSuite\n hooks to scenario by @APshenkin. See \nupdated documentation\n\n\n\n\n0.4.5\n\n\n\n\nFixed running \ncodecept def\n command by @jankaspar\n\n\n[Protractor][SeleniumWebdriver] Added support for special keys in \npressKey\n method. Fixes #216\n\n\n\n\n0.4.4\n\n\n\n\nInteractive shell fixed. Start it by running \ncodeceptjs shell\n\n\nAdded \n--profile\n option to \nshell\n command to use dynamic configuration.\n\n\nAdded \n--verbose\n option to \nshell\n command for most complete output.\n\n\n\n\n0.4.3\n\n\n\n\n[Protractor] Regression fixed to ^4.0.0 support\n\n\nTranslations included into package.\n\n\nteardown\n option added to config (opposite to \nbootstrap\n), expects a JS file to be executed after tests stop.\n\n\nConfiguration\n can be set via JavaScript file \ncodecept.conf.js\n instead of \ncodecept.json\n. It should export \nconfig\n object:\n\n\n\n\n// inside codecept.conf.js\nexports.config = {\n  // contents of codecept.json\n}\n\n\n\n\n\n\nAdded \n--profile\n option to pass its value to \ncodecept.conf.js\n as \nprocess.profile\n for \ndynamic configuration\n.\n\n\nDocumentation for \nStepObjects, PageFragments\n updated.\n\n\nDocumentation for \nConfiguration\n added.\n\n\n\n\n0.4.2\n\n\n\n\nAdded ability to localize tests with translation \n#189\n. Thanks to @abner\n\n\n[Translation] ru-RU translation added.\n\n\n[Translation] pt-BR translation added.\n\n\n[Protractor] Protractor 4.0.4 compatibility.\n\n\n[WebDriverIO][SeleniumWebdriver][Protractor] Fixed single browser session  mode for \nrestart: false\n\n\nFixed using of 3rd party reporters (xunit, mocha-junit-reporter, mochawesome). Added guide.\n\n\nDocumentation for \nTranslation\n added.\n\n\nDocumentation for \nReports\n added.\n\n\n\n\n0.4.1\n\n\n\n\nAdded custom steps to step definition list. See #174 by @jayS-de\n\n\n[WebDriverIO] Fixed using \nwaitForTimeout\n option by @stephane-ruhlmann. See #178\n\n\n\n\n0.4.0\n\n\n\n\nNightmare\n Helper\n added for faster web testing.\n\n\n[Protractor][SeleniumWebdriver][WebDriverIO] added \nrestart: false\n option to reuse one browser between tests (improves speed).\n\n\nProtractor 4.0\n compatibility. Please upgrade Protractor library.\n\n\nAdded \n--verbose\n option for \nrun\n command to log and print global promise and events.\n\n\nFixed errors with shutting down and cleanup.\n\n\nFixed starting interactive shell with \ncodeceptjs shell\n.\n\n\nFixed handling of failures inside within block\n\n\n\n\n0.3.5\n\n\n\n\nIntroduced IDE autocompletion support for Visual Studio Code and others. Added command for generating TypeScript definitions for \nI\n object. Use it as\n\n\n\n\ncodeceptjs def\n\n\n\n\nto generate steps definition file and include it into tests by reference. By @kaflan\n\n\n0.3.4\n\n\n\n\n[Protractor] version 3.3.0 comptaibility, NPM 3 compatibility. Please update Protractor!\n\n\nallows using absolute path for helpers, output, in config and in command line. By @denis-sokolov\n\n\nFixes 'Cannot read property '1' of null in generate.js:44' by @seethislight\n\n\n\n\n0.3.3\n\n\nFixed global installation\n. CodeceptJS can now locate globally located modules.\nCodeceptJS is also recommended for local installation.\nDepending on installation type additional modules (webdriverio, protractor, ...) will be loaded either from local or from global path.\n\n\n0.3.2\n\n\n\n\nAdded \ncodeceptjs list\n command which shows all available methods of \nI\n object.\n\n\n[Protractor][SeleniumWebdriver] fixed closing browser instances\n\n\n[Protractor][SeleniumWebdriver] \ndoubleClick\n method added\n\n\n[WebDriverIO][Protractor][SeleniumWebdriver] \ndoubleClick\n method to locate clickable elements by text, \ncontext\n option added.\n\n\nFixed using assert in generator without yields #89\n\n\n\n\n0.3.1\n\n\n\n\nFixed \ninit\n command\n\n\n\n\n0.3.0\n\n\nBreaking Change\n: webdriverio package removed from dependencies list. You will need to install it manually after the upgrade.\nStarting from 0.3.0 webdriverio is not the only backend for running selenium tests, so you are free to choose between Protractor, SeleniumWebdriver, and webdriverio and install them.\n\n\n\n\n[Protractor] helper added\n. Now you can test AngularJS applications by using its official library within the unigied CodeceptJS API!\n\n\n[SeleniumWebdriver] helper added\n. You can switch to official JS bindings for Selenium.\n\n\n[WebDriverIO] \nupdated to webdriverio v 4.0\n\n\n[WebDriverIO] \nclearField\n method added by @fabioel\n\n\n[WebDriverIO] added \ndragAndDrop\n by @fabioel\n\n\n[WebDriverIO] fixed \nscrollTo\n method by @sensone\n\n\n[WebDriverIO] fixed \nwindowSize: maximize\n option in config\n\n\n[WebDriverIO] \nseeElement\n and \ndontSeeElement\n check element for visibility by @fabioel and @davertmik\n\n\n[WebDriverIO] \nseeElementInDOM\n, \ndontSeeElementInDOM\n added to check element exists on page.\n\n\n[WebDriverIO] fixed saving screenshots on failure. Fixes #70\n\n\nfixed \nwithin\n block doesn't end in output not #79\n\n\n\n\n0.2.8\n\n\n\n\n[WebDriverIO] added \nseeNumberOfElements\n by @fabioel\n\n\n\n\n0.2.7\n\n\n\n\nprocess ends with exit code 1 on error or failure #49\n\n\nfixed registereing global Helper #57\n\n\nfixed handling error in within block #50\n\n\n\n\n0.2.6\n\n\n\n\nFixed \ndone() was called multiple times\n\n\n[WebDriverIO] added \nwaitToHide\n method by @fabioel\n\n\nAdded global \nHelper\n (alias \ncodecept_helper)\n, object use for writing custom Helpers. Generator updated. Changes to #48\n\n\n\n\n0.2.5\n\n\n\n\nFixed issues with using yield inside a test #45 #47 #43\n\n\nFixed generating a custom helper. Helper class is now accessible with \ncodecept_helper\n var. Fixes #48\n\n\n\n\n0.2.4\n\n\n\n\nFixed accessing helpers from custom helper by @pim.\n\n\n\n\n0.2.3\n\n\n\n\n[WebDriverIO] fixed \nseeInField\n to work with single value elements like: input[type=text], textareas, and multiple: select, input[type=radio], input[type=checkbox]\n\n\n[WebDriverIO] fixed \npressKey\n, key modifeiers (Control, Command, Alt, Shift) are released after the action\n\n\n\n\n0.2.2\n\n\nFixed generation of custom steps file and page objects.\nPlease replace \nrequire('codeceptjs/actor')\n to \nactor\n in your \ncustom_steps.js\n.\nWhenever you need to create \nI\n object (in page objects, custom steps, but not in tests) just call \nactor()\n;\n\n\n0.2.0\n\n\n\n\nwithin\n context hook added\n\n\n--reporter\n option supported\n\n\n[WebDriverIO] added features and methods:\n\n\nelements: \nseeElement\n, ...\n\n\npopups: \nacceptPopup\n, \ncancelPopup\n, \nseeInPopup\n,...\n\n\nnavigation: \nmoveCursorTo\n, \nscrollTo\n\n\nsaving screenshots on failure; \nsaveScreenshot\n\n\ncookies: \nsetCookie\n, \nseeCookie\n, ...\n\n\nsource: \nseeInSource\n\n\nform: \nseeCheckboxIsChecked\n, \nselectOption\n to support multiple selects\n\n\nkeyboard: \nappendField\n, \npressKey\n\n\nmouse: \nrightClick\n\n\ntests added\n\n\n[WebDriverIO] proxy configuration added by @petehouston\n\n\n[WebDriverIO] fixed \nwaitForText\n method by @roadhump. Fixes #11\n\n\nFixed creating output dir when it already exists on init by @alfirin\n\n\nFixed loading of custom helpers", 
            "title": "Releases"
        }, 
        {
            "location": "/changelog/#046", 
            "text": "Added  BeforeSuite  and  AfterSuite  hooks to scenario by @APshenkin. See  updated documentation", 
            "title": "0.4.6"
        }, 
        {
            "location": "/changelog/#045", 
            "text": "Fixed running  codecept def  command by @jankaspar  [Protractor][SeleniumWebdriver] Added support for special keys in  pressKey  method. Fixes #216", 
            "title": "0.4.5"
        }, 
        {
            "location": "/changelog/#044", 
            "text": "Interactive shell fixed. Start it by running  codeceptjs shell  Added  --profile  option to  shell  command to use dynamic configuration.  Added  --verbose  option to  shell  command for most complete output.", 
            "title": "0.4.4"
        }, 
        {
            "location": "/changelog/#043", 
            "text": "[Protractor] Regression fixed to ^4.0.0 support  Translations included into package.  teardown  option added to config (opposite to  bootstrap ), expects a JS file to be executed after tests stop.  Configuration  can be set via JavaScript file  codecept.conf.js  instead of  codecept.json . It should export  config  object:   // inside codecept.conf.js\nexports.config = {\n  // contents of codecept.json\n}   Added  --profile  option to pass its value to  codecept.conf.js  as  process.profile  for  dynamic configuration .  Documentation for  StepObjects, PageFragments  updated.  Documentation for  Configuration  added.", 
            "title": "0.4.3"
        }, 
        {
            "location": "/changelog/#042", 
            "text": "Added ability to localize tests with translation  #189 . Thanks to @abner  [Translation] ru-RU translation added.  [Translation] pt-BR translation added.  [Protractor] Protractor 4.0.4 compatibility.  [WebDriverIO][SeleniumWebdriver][Protractor] Fixed single browser session  mode for  restart: false  Fixed using of 3rd party reporters (xunit, mocha-junit-reporter, mochawesome). Added guide.  Documentation for  Translation  added.  Documentation for  Reports  added.", 
            "title": "0.4.2"
        }, 
        {
            "location": "/changelog/#041", 
            "text": "Added custom steps to step definition list. See #174 by @jayS-de  [WebDriverIO] Fixed using  waitForTimeout  option by @stephane-ruhlmann. See #178", 
            "title": "0.4.1"
        }, 
        {
            "location": "/changelog/#040", 
            "text": "Nightmare  Helper  added for faster web testing.  [Protractor][SeleniumWebdriver][WebDriverIO] added  restart: false  option to reuse one browser between tests (improves speed).  Protractor 4.0  compatibility. Please upgrade Protractor library.  Added  --verbose  option for  run  command to log and print global promise and events.  Fixed errors with shutting down and cleanup.  Fixed starting interactive shell with  codeceptjs shell .  Fixed handling of failures inside within block", 
            "title": "0.4.0"
        }, 
        {
            "location": "/changelog/#035", 
            "text": "Introduced IDE autocompletion support for Visual Studio Code and others. Added command for generating TypeScript definitions for  I  object. Use it as   codeceptjs def  to generate steps definition file and include it into tests by reference. By @kaflan", 
            "title": "0.3.5"
        }, 
        {
            "location": "/changelog/#034", 
            "text": "[Protractor] version 3.3.0 comptaibility, NPM 3 compatibility. Please update Protractor!  allows using absolute path for helpers, output, in config and in command line. By @denis-sokolov  Fixes 'Cannot read property '1' of null in generate.js:44' by @seethislight", 
            "title": "0.3.4"
        }, 
        {
            "location": "/changelog/#033", 
            "text": "Fixed global installation . CodeceptJS can now locate globally located modules.\nCodeceptJS is also recommended for local installation.\nDepending on installation type additional modules (webdriverio, protractor, ...) will be loaded either from local or from global path.", 
            "title": "0.3.3"
        }, 
        {
            "location": "/changelog/#032", 
            "text": "Added  codeceptjs list  command which shows all available methods of  I  object.  [Protractor][SeleniumWebdriver] fixed closing browser instances  [Protractor][SeleniumWebdriver]  doubleClick  method added  [WebDriverIO][Protractor][SeleniumWebdriver]  doubleClick  method to locate clickable elements by text,  context  option added.  Fixed using assert in generator without yields #89", 
            "title": "0.3.2"
        }, 
        {
            "location": "/changelog/#031", 
            "text": "Fixed  init  command", 
            "title": "0.3.1"
        }, 
        {
            "location": "/changelog/#030", 
            "text": "Breaking Change : webdriverio package removed from dependencies list. You will need to install it manually after the upgrade.\nStarting from 0.3.0 webdriverio is not the only backend for running selenium tests, so you are free to choose between Protractor, SeleniumWebdriver, and webdriverio and install them.   [Protractor] helper added . Now you can test AngularJS applications by using its official library within the unigied CodeceptJS API!  [SeleniumWebdriver] helper added . You can switch to official JS bindings for Selenium.  [WebDriverIO]  updated to webdriverio v 4.0  [WebDriverIO]  clearField  method added by @fabioel  [WebDriverIO] added  dragAndDrop  by @fabioel  [WebDriverIO] fixed  scrollTo  method by @sensone  [WebDriverIO] fixed  windowSize: maximize  option in config  [WebDriverIO]  seeElement  and  dontSeeElement  check element for visibility by @fabioel and @davertmik  [WebDriverIO]  seeElementInDOM ,  dontSeeElementInDOM  added to check element exists on page.  [WebDriverIO] fixed saving screenshots on failure. Fixes #70  fixed  within  block doesn't end in output not #79", 
            "title": "0.3.0"
        }, 
        {
            "location": "/changelog/#028", 
            "text": "[WebDriverIO] added  seeNumberOfElements  by @fabioel", 
            "title": "0.2.8"
        }, 
        {
            "location": "/changelog/#027", 
            "text": "process ends with exit code 1 on error or failure #49  fixed registereing global Helper #57  fixed handling error in within block #50", 
            "title": "0.2.7"
        }, 
        {
            "location": "/changelog/#026", 
            "text": "Fixed  done() was called multiple times  [WebDriverIO] added  waitToHide  method by @fabioel  Added global  Helper  (alias  codecept_helper) , object use for writing custom Helpers. Generator updated. Changes to #48", 
            "title": "0.2.6"
        }, 
        {
            "location": "/changelog/#025", 
            "text": "Fixed issues with using yield inside a test #45 #47 #43  Fixed generating a custom helper. Helper class is now accessible with  codecept_helper  var. Fixes #48", 
            "title": "0.2.5"
        }, 
        {
            "location": "/changelog/#024", 
            "text": "Fixed accessing helpers from custom helper by @pim.", 
            "title": "0.2.4"
        }, 
        {
            "location": "/changelog/#023", 
            "text": "[WebDriverIO] fixed  seeInField  to work with single value elements like: input[type=text], textareas, and multiple: select, input[type=radio], input[type=checkbox]  [WebDriverIO] fixed  pressKey , key modifeiers (Control, Command, Alt, Shift) are released after the action", 
            "title": "0.2.3"
        }, 
        {
            "location": "/changelog/#022", 
            "text": "Fixed generation of custom steps file and page objects.\nPlease replace  require('codeceptjs/actor')  to  actor  in your  custom_steps.js .\nWhenever you need to create  I  object (in page objects, custom steps, but not in tests) just call  actor() ;", 
            "title": "0.2.2"
        }, 
        {
            "location": "/changelog/#020", 
            "text": "within  context hook added  --reporter  option supported  [WebDriverIO] added features and methods:  elements:  seeElement , ...  popups:  acceptPopup ,  cancelPopup ,  seeInPopup ,...  navigation:  moveCursorTo ,  scrollTo  saving screenshots on failure;  saveScreenshot  cookies:  setCookie ,  seeCookie , ...  source:  seeInSource  form:  seeCheckboxIsChecked ,  selectOption  to support multiple selects  keyboard:  appendField ,  pressKey  mouse:  rightClick  tests added  [WebDriverIO] proxy configuration added by @petehouston  [WebDriverIO] fixed  waitForText  method by @roadhump. Fixes #11  Fixed creating output dir when it already exists on init by @alfirin  Fixed loading of custom helpers", 
            "title": "0.2.0"
        }
    ]
}